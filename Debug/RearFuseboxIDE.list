
RearFuseboxIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f80  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008158  08008158  00018158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008178  08008178  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08008178  08008178  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008178  08008178  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008178  08008178  00018178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800817c  0800817c  0001817c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000018  08008198  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200005d8  08008198  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a25a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cad  00000000  00000000  0003a2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  0003cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  0003e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287a6  00000000  00000000  0003fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fb8  00000000  00000000  0006846e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110e77  00000000  00000000  00081426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019229d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006570  00000000  00000000  001922f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008140 	.word	0x08008140

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08008140 	.word	0x08008140

08000218 <LSM6DSL_AccInit>:
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
 8000222:	4b26      	ldr	r3, [pc, #152]	; (80002bc <LSM6DSL_AccInit+0xa4>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
 8000228:	2110      	movs	r1, #16
 800022a:	20d4      	movs	r0, #212	; 0xd4
 800022c:	f001 f828 	bl	8001280 <SENSOR_IO_Read>
 8000230:	4603      	mov	r3, r0
 8000232:	461a      	mov	r2, r3
 8000234:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <LSM6DSL_AccInit+0xa8>)
 8000236:	701a      	strb	r2, [r3, #0]
 8000238:	88fb      	ldrh	r3, [r7, #6]
 800023a:	b2da      	uxtb	r2, r3
 800023c:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <LSM6DSL_AccInit+0xa4>)
 800023e:	701a      	strb	r2, [r3, #0]
 8000240:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <LSM6DSL_AccInit+0xa8>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	f003 0303 	and.w	r3, r3, #3
 8000248:	b2da      	uxtb	r2, r3
 800024a:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <LSM6DSL_AccInit+0xa8>)
 800024c:	701a      	strb	r2, [r3, #0]
 800024e:	4b1c      	ldr	r3, [pc, #112]	; (80002c0 <LSM6DSL_AccInit+0xa8>)
 8000250:	781a      	ldrb	r2, [r3, #0]
 8000252:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <LSM6DSL_AccInit+0xa4>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	4313      	orrs	r3, r2
 8000258:	b2da      	uxtb	r2, r3
 800025a:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <LSM6DSL_AccInit+0xa8>)
 800025c:	701a      	strb	r2, [r3, #0]
 800025e:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <LSM6DSL_AccInit+0xa8>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	461a      	mov	r2, r3
 8000264:	2110      	movs	r1, #16
 8000266:	20d4      	movs	r0, #212	; 0xd4
 8000268:	f000 ffe6 	bl	8001238 <SENSOR_IO_Write>
 800026c:	2112      	movs	r1, #18
 800026e:	20d4      	movs	r0, #212	; 0xd4
 8000270:	f001 f806 	bl	8001280 <SENSOR_IO_Read>
 8000274:	4603      	mov	r3, r0
 8000276:	461a      	mov	r2, r3
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <LSM6DSL_AccInit+0xa8>)
 800027a:	701a      	strb	r2, [r3, #0]
 800027c:	88fb      	ldrh	r3, [r7, #6]
 800027e:	0a1b      	lsrs	r3, r3, #8
 8000280:	b29b      	uxth	r3, r3
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <LSM6DSL_AccInit+0xa4>)
 8000286:	701a      	strb	r2, [r3, #0]
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <LSM6DSL_AccInit+0xa8>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000290:	b2da      	uxtb	r2, r3
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <LSM6DSL_AccInit+0xa8>)
 8000294:	701a      	strb	r2, [r3, #0]
 8000296:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <LSM6DSL_AccInit+0xa8>)
 8000298:	781a      	ldrb	r2, [r3, #0]
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <LSM6DSL_AccInit+0xa4>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4313      	orrs	r3, r2
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <LSM6DSL_AccInit+0xa8>)
 80002a4:	701a      	strb	r2, [r3, #0]
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <LSM6DSL_AccInit+0xa8>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	461a      	mov	r2, r3
 80002ac:	2112      	movs	r1, #18
 80002ae:	20d4      	movs	r0, #212	; 0xd4
 80002b0:	f000 ffc2 	bl	8001238 <SENSOR_IO_Write>
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000035 	.word	0x20000035
 80002c0:	20000034 	.word	0x20000034

080002c4 <LSM6DSL_AccReadID>:
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	f000 ff76 	bl	80011b8 <SENSOR_IO_Init>
 80002cc:	210f      	movs	r1, #15
 80002ce:	20d4      	movs	r0, #212	; 0xd4
 80002d0:	f000 ffd6 	bl	8001280 <SENSOR_IO_Read>
 80002d4:	4603      	mov	r3, r0
 80002d6:	4618      	mov	r0, r3
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <LSM6DSL_AccReadXYZ>:
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	4b64      	ldr	r3, [pc, #400]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]
 80002ee:	e00c      	b.n	800030a <LSM6DSL_AccReadXYZ+0x2e>
 80002f0:	4b62      	ldr	r3, [pc, #392]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	461a      	mov	r2, r3
 80002f6:	4b62      	ldr	r3, [pc, #392]	; (8000480 <LSM6DSL_AccReadXYZ+0x1a4>)
 80002f8:	2100      	movs	r1, #0
 80002fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80002fe:	4b5f      	ldr	r3, [pc, #380]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	3301      	adds	r3, #1
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b5d      	ldr	r3, [pc, #372]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 8000308:	701a      	strb	r2, [r3, #0]
 800030a:	4b5c      	ldr	r3, [pc, #368]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b02      	cmp	r3, #2
 8000310:	d9ee      	bls.n	80002f0 <LSM6DSL_AccReadXYZ+0x14>
 8000312:	4b5c      	ldr	r3, [pc, #368]	; (8000484 <LSM6DSL_AccReadXYZ+0x1a8>)
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
 8000318:	4b58      	ldr	r3, [pc, #352]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
 800031e:	e00b      	b.n	8000338 <LSM6DSL_AccReadXYZ+0x5c>
 8000320:	4b56      	ldr	r3, [pc, #344]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b58      	ldr	r3, [pc, #352]	; (8000488 <LSM6DSL_AccReadXYZ+0x1ac>)
 8000328:	2100      	movs	r1, #0
 800032a:	5499      	strb	r1, [r3, r2]
 800032c:	4b53      	ldr	r3, [pc, #332]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	b2da      	uxtb	r2, r3
 8000334:	4b51      	ldr	r3, [pc, #324]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 8000336:	701a      	strb	r2, [r3, #0]
 8000338:	4b50      	ldr	r3, [pc, #320]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b05      	cmp	r3, #5
 800033e:	d9ef      	bls.n	8000320 <LSM6DSL_AccReadXYZ+0x44>
 8000340:	4b4e      	ldr	r3, [pc, #312]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
 8000346:	f04f 0300 	mov.w	r3, #0
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	2110      	movs	r1, #16
 800034e:	20d4      	movs	r0, #212	; 0xd4
 8000350:	f000 ff96 	bl	8001280 <SENSOR_IO_Read>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	4b4a      	ldr	r3, [pc, #296]	; (8000484 <LSM6DSL_AccReadXYZ+0x1a8>)
 800035a:	701a      	strb	r2, [r3, #0]
 800035c:	2128      	movs	r1, #40	; 0x28
 800035e:	20d4      	movs	r0, #212	; 0xd4
 8000360:	f000 ff8e 	bl	8001280 <SENSOR_IO_Read>
 8000364:	4603      	mov	r3, r0
 8000366:	461a      	mov	r2, r3
 8000368:	4b47      	ldr	r3, [pc, #284]	; (8000488 <LSM6DSL_AccReadXYZ+0x1ac>)
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	2129      	movs	r1, #41	; 0x29
 800036e:	20d4      	movs	r0, #212	; 0xd4
 8000370:	f000 ff86 	bl	8001280 <SENSOR_IO_Read>
 8000374:	4603      	mov	r3, r0
 8000376:	461a      	mov	r2, r3
 8000378:	4b43      	ldr	r3, [pc, #268]	; (8000488 <LSM6DSL_AccReadXYZ+0x1ac>)
 800037a:	705a      	strb	r2, [r3, #1]
 800037c:	212a      	movs	r1, #42	; 0x2a
 800037e:	20d4      	movs	r0, #212	; 0xd4
 8000380:	f000 ff7e 	bl	8001280 <SENSOR_IO_Read>
 8000384:	4603      	mov	r3, r0
 8000386:	461a      	mov	r2, r3
 8000388:	4b3f      	ldr	r3, [pc, #252]	; (8000488 <LSM6DSL_AccReadXYZ+0x1ac>)
 800038a:	709a      	strb	r2, [r3, #2]
 800038c:	212b      	movs	r1, #43	; 0x2b
 800038e:	20d4      	movs	r0, #212	; 0xd4
 8000390:	f000 ff76 	bl	8001280 <SENSOR_IO_Read>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	4b3b      	ldr	r3, [pc, #236]	; (8000488 <LSM6DSL_AccReadXYZ+0x1ac>)
 800039a:	70da      	strb	r2, [r3, #3]
 800039c:	212c      	movs	r1, #44	; 0x2c
 800039e:	20d4      	movs	r0, #212	; 0xd4
 80003a0:	f000 ff6e 	bl	8001280 <SENSOR_IO_Read>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b37      	ldr	r3, [pc, #220]	; (8000488 <LSM6DSL_AccReadXYZ+0x1ac>)
 80003aa:	711a      	strb	r2, [r3, #4]
 80003ac:	212d      	movs	r1, #45	; 0x2d
 80003ae:	20d4      	movs	r0, #212	; 0xd4
 80003b0:	f000 ff66 	bl	8001280 <SENSOR_IO_Read>
 80003b4:	4603      	mov	r3, r0
 80003b6:	461a      	mov	r2, r3
 80003b8:	4b33      	ldr	r3, [pc, #204]	; (8000488 <LSM6DSL_AccReadXYZ+0x1ac>)
 80003ba:	715a      	strb	r2, [r3, #5]
 80003bc:	4b2f      	ldr	r3, [pc, #188]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
 80003c2:	e01d      	b.n	8000400 <LSM6DSL_AccReadXYZ+0x124>
 80003c4:	4b2d      	ldr	r3, [pc, #180]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	005b      	lsls	r3, r3, #1
 80003ca:	3301      	adds	r3, #1
 80003cc:	4a2e      	ldr	r2, [pc, #184]	; (8000488 <LSM6DSL_AccReadXYZ+0x1ac>)
 80003ce:	5cd3      	ldrb	r3, [r2, r3]
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	021b      	lsls	r3, r3, #8
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	4b29      	ldr	r3, [pc, #164]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	492a      	ldr	r1, [pc, #168]	; (8000488 <LSM6DSL_AccReadXYZ+0x1ac>)
 80003de:	5ccb      	ldrb	r3, [r1, r3]
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	4413      	add	r3, r2
 80003e4:	b299      	uxth	r1, r3
 80003e6:	4b25      	ldr	r3, [pc, #148]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	461a      	mov	r2, r3
 80003ec:	b209      	sxth	r1, r1
 80003ee:	4b24      	ldr	r3, [pc, #144]	; (8000480 <LSM6DSL_AccReadXYZ+0x1a4>)
 80003f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80003f4:	4b21      	ldr	r3, [pc, #132]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	3301      	adds	r3, #1
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	4b1f      	ldr	r3, [pc, #124]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 80003fe:	701a      	strb	r2, [r3, #0]
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b02      	cmp	r3, #2
 8000406:	d9dd      	bls.n	80003c4 <LSM6DSL_AccReadXYZ+0xe8>
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <LSM6DSL_AccReadXYZ+0x1a8>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	f003 030c 	and.w	r3, r3, #12
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	4b1e      	ldr	r3, [pc, #120]	; (800048c <LSM6DSL_AccReadXYZ+0x1b0>)
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d003      	beq.n	8000424 <LSM6DSL_AccReadXYZ+0x148>
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <LSM6DSL_AccReadXYZ+0x1a8>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	3301      	adds	r3, #1
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	4b15      	ldr	r3, [pc, #84]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
 800042a:	e01e      	b.n	800046a <LSM6DSL_AccReadXYZ+0x18e>
 800042c:	4b13      	ldr	r3, [pc, #76]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	461a      	mov	r2, r3
 8000432:	4b13      	ldr	r3, [pc, #76]	; (8000480 <LSM6DSL_AccReadXYZ+0x1a4>)
 8000434:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000438:	ee07 3a90 	vmov	s15, r3
 800043c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000440:	edd7 7a02 	vldr	s15, [r7, #8]
 8000444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000456:	ee17 2a90 	vmov	r2, s15
 800045a:	b212      	sxth	r2, r2
 800045c:	801a      	strh	r2, [r3, #0]
 800045e:	4b07      	ldr	r3, [pc, #28]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	3301      	adds	r3, #1
 8000464:	b2da      	uxtb	r2, r3
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 8000468:	701a      	strb	r2, [r3, #0]
 800046a:	4b04      	ldr	r3, [pc, #16]	; (800047c <LSM6DSL_AccReadXYZ+0x1a0>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b02      	cmp	r3, #2
 8000470:	d9dc      	bls.n	800042c <LSM6DSL_AccReadXYZ+0x150>
 8000472:	bf00      	nop
 8000474:	bf00      	nop
 8000476:	3710      	adds	r7, #16
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000046 	.word	0x20000046
 8000480:	20000038 	.word	0x20000038
 8000484:	2000003e 	.word	0x2000003e
 8000488:	20000040 	.word	0x20000040
 800048c:	3df9db23 	.word	0x3df9db23

08000490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000494:	f001 fcb5 	bl	8001e02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000498:	f000 f908 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
	
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049c:	f000 fdb4 	bl	8001008 <MX_GPIO_Init>
  MX_DMA_Init();
 80004a0:	f000 fd78 	bl	8000f94 <MX_DMA_Init>
  MX_ADC1_Init();
 80004a4:	f000 f97a 	bl	800079c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80004a8:	f000 fb74 	bl	8000b94 <MX_FDCAN1_Init>
  MX_ADC2_Init();
 80004ac:	f000 fa52 	bl	8000954 <MX_ADC2_Init>
  MX_ADC3_Init();
 80004b0:	f000 fae8 	bl	8000a84 <MX_ADC3_Init>
  MX_TIM2_Init();
 80004b4:	f000 fcc4 	bl	8000e40 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004b8:	f000 fd10 	bl	8000edc <MX_TIM3_Init>
  MX_IWDG_Init();
 80004bc:	f000 fbf0 	bl	8000ca0 <MX_IWDG_Init>
  MX_I2C3_Init();
 80004c0:	f000 fbae 	bl	8000c20 <MX_I2C3_Init>
  MX_TIM1_Init();
 80004c4:	f000 fc0a 	bl	8000cdc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //SET AUX (LEFT FAN) OFF
  	HAL_GPIO_WritePin(FAN_LEFT_CTRL_GPIO_Port,FAN_LEFT_CTRL_Pin,GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2102      	movs	r1, #2
 80004cc:	4862      	ldr	r0, [pc, #392]	; (8000658 <main+0x1c8>)
 80004ce:	f004 fb19 	bl	8004b04 <HAL_GPIO_WritePin>
  	//SET ETC (RIGHT FAN) OFF
  	HAL_GPIO_WritePin(FAN_RIGHT_CTRL_GPIO_Port,FAN_RIGHT_CTRL_Pin,GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d8:	4860      	ldr	r0, [pc, #384]	; (800065c <main+0x1cc>)
 80004da:	f004 fb13 	bl	8004b04 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 80004de:	200a      	movs	r0, #10
 80004e0:	f001 fd00 	bl	8001ee4 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)uhADCxConvertedData, 7);
 80004e4:	2207      	movs	r2, #7
 80004e6:	495e      	ldr	r1, [pc, #376]	; (8000660 <main+0x1d0>)
 80004e8:	485e      	ldr	r0, [pc, #376]	; (8000664 <main+0x1d4>)
 80004ea:	f002 f8fd 	bl	80026e8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)uhADC2ConvertedData, 3);
 80004ee:	2203      	movs	r2, #3
 80004f0:	495d      	ldr	r1, [pc, #372]	; (8000668 <main+0x1d8>)
 80004f2:	485e      	ldr	r0, [pc, #376]	; (800066c <main+0x1dc>)
 80004f4:	f002 f8f8 	bl	80026e8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)uhADC3ConvertedData, 2);
 80004f8:	2202      	movs	r2, #2
 80004fa:	495d      	ldr	r1, [pc, #372]	; (8000670 <main+0x1e0>)
 80004fc:	485d      	ldr	r0, [pc, #372]	; (8000674 <main+0x1e4>)
 80004fe:	f002 f8f3 	bl	80026e8 <HAL_ADC_Start_DMA>
	
	HAL_TIM_Base_Start_IT(&htim2);
 8000502:	485d      	ldr	r0, [pc, #372]	; (8000678 <main+0x1e8>)
 8000504:	f006 f93a 	bl	800677c <HAL_TIM_Base_Start_IT>
	FDCAN_Config();
 8000508:	f000 fe18 	bl	800113c <FDCAN_Config>
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	accId = LSM6DSL_AccReadID();
 800050c:	f7ff feda 	bl	80002c4 <LSM6DSL_AccReadID>
 8000510:	4603      	mov	r3, r0
 8000512:	461a      	mov	r2, r3
 8000514:	4b59      	ldr	r3, [pc, #356]	; (800067c <main+0x1ec>)
 8000516:	701a      	strb	r2, [r3, #0]
	//xxxxxx11
	LSM6DSL_AccInit(LSM6DSL_ACC_FULLSCALE_4G+LSM6DSL_ODR_6660Hz+3);
 8000518:	20ab      	movs	r0, #171	; 0xab
 800051a:	f7ff fe7d 	bl	8000218 <LSM6DSL_AccInit>
	HAL_GPIO_WritePin(FAN_LEFT_CTRL_GPIO_Port,FAN_LEFT_CTRL_Pin,GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2102      	movs	r1, #2
 8000522:	484d      	ldr	r0, [pc, #308]	; (8000658 <main+0x1c8>)
 8000524:	f004 faee 	bl	8004b04 <HAL_GPIO_WritePin>
	//SET ETC (RIGHT FAN) OFF
	HAL_GPIO_WritePin(FAN_RIGHT_CTRL_GPIO_Port,FAN_RIGHT_CTRL_Pin,GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052e:	484b      	ldr	r0, [pc, #300]	; (800065c <main+0x1cc>)
 8000530:	f004 fae8 	bl	8004b04 <HAL_GPIO_WritePin>
	//01001000
	//LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL,0b01001000);
	//SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL,0b11101100);
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL,0b11001000);
 8000534:	22c8      	movs	r2, #200	; 0xc8
 8000536:	2117      	movs	r1, #23
 8000538:	20d4      	movs	r0, #212	; 0xd4
 800053a:	f000 fe7d 	bl	8001238 <SENSOR_IO_Write>
	//SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW,	LSM6DSL_ACC_GYRO_OUT_TEMP_L);
	//SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW,	LSM6DSL_ACC_GYRO_OUT_TEMP_H);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800053e:	2108      	movs	r1, #8
 8000540:	484f      	ldr	r0, [pc, #316]	; (8000680 <main+0x1f0>)
 8000542:	f006 f9eb 	bl	800691c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000546:	2108      	movs	r1, #8
 8000548:	484d      	ldr	r0, [pc, #308]	; (8000680 <main+0x1f0>)
 800054a:	f007 fb57 	bl	8007bfc <HAL_TIMEx_PWMN_Start>

	sConfigOCTIM1.OCMode = TIM_OCMODE_PWM1;
 800054e:	4b4d      	ldr	r3, [pc, #308]	; (8000684 <main+0x1f4>)
 8000550:	2260      	movs	r2, #96	; 0x60
 8000552:	601a      	str	r2, [r3, #0]
	sConfigOCTIM1.Pulse = 99;
 8000554:	4b4b      	ldr	r3, [pc, #300]	; (8000684 <main+0x1f4>)
 8000556:	2263      	movs	r2, #99	; 0x63
 8000558:	605a      	str	r2, [r3, #4]
	sConfigOCTIM1.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055a:	4b4a      	ldr	r3, [pc, #296]	; (8000684 <main+0x1f4>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
	sConfigOCTIM1.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000560:	4b48      	ldr	r3, [pc, #288]	; (8000684 <main+0x1f4>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
	sConfigOCTIM1.OCFastMode = TIM_OCFAST_DISABLE;
 8000566:	4b47      	ldr	r3, [pc, #284]	; (8000684 <main+0x1f4>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
	sConfigOCTIM1.OCIdleState = TIM_OCIDLESTATE_RESET;
 800056c:	4b45      	ldr	r3, [pc, #276]	; (8000684 <main+0x1f4>)
 800056e:	2200      	movs	r2, #0
 8000570:	615a      	str	r2, [r3, #20]
	sConfigOCTIM1.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000572:	4b44      	ldr	r3, [pc, #272]	; (8000684 <main+0x1f4>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  while (1)
  {
    //tickValue = HAL_GetTick();
	  //if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO1) > 0){

	  			HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CANframeHeader, &CANframeData);
 8000578:	4b43      	ldr	r3, [pc, #268]	; (8000688 <main+0x1f8>)
 800057a:	4a44      	ldr	r2, [pc, #272]	; (800068c <main+0x1fc>)
 800057c:	2140      	movs	r1, #64	; 0x40
 800057e:	4844      	ldr	r0, [pc, #272]	; (8000690 <main+0x200>)
 8000580:	f003 fdcc 	bl	800411c <HAL_FDCAN_GetRxMessage>
	  			//fifo1fill++;

	  			if(CANframeHeader.Identifier == 0x11){
 8000584:	4b41      	ldr	r3, [pc, #260]	; (800068c <main+0x1fc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b11      	cmp	r3, #17
 800058a:	d123      	bne.n	80005d4 <main+0x144>
	  				if(CANframeData[1]&0b00001000 == 0b00001000){
 800058c:	4b3e      	ldr	r3, [pc, #248]	; (8000688 <main+0x1f8>)
 800058e:	785b      	ldrb	r3, [r3, #1]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d01d      	beq.n	80005d4 <main+0x144>
	  					lightStateI++;
 8000598:	4b3e      	ldr	r3, [pc, #248]	; (8000694 <main+0x204>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	4a3d      	ldr	r2, [pc, #244]	; (8000694 <main+0x204>)
 80005a0:	6013      	str	r3, [r2, #0]
	  					if(lightStateI > 4){
 80005a2:	4b3c      	ldr	r3, [pc, #240]	; (8000694 <main+0x204>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	dd02      	ble.n	80005b0 <main+0x120>
	  						lightStateI=0;
 80005aa:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <main+0x204>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
	  					}
	  					sConfigOCTIM1.Pulse=lightStates[lightStateI];
 80005b0:	4b38      	ldr	r3, [pc, #224]	; (8000694 <main+0x204>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a38      	ldr	r2, [pc, #224]	; (8000698 <main+0x208>)
 80005b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b31      	ldr	r3, [pc, #196]	; (8000684 <main+0x1f4>)
 80005be:	605a      	str	r2, [r3, #4]
	  					if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOCTIM1, TIM_CHANNEL_3) != HAL_OK)
 80005c0:	2208      	movs	r2, #8
 80005c2:	4930      	ldr	r1, [pc, #192]	; (8000684 <main+0x1f4>)
 80005c4:	482e      	ldr	r0, [pc, #184]	; (8000680 <main+0x1f0>)
 80005c6:	f006 fc3b 	bl	8006e40 <HAL_TIM_PWM_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <main+0x144>
	  				    {
	  					Error_Handler();
 80005d0:	f001 f895 	bl	80016fe <Error_Handler>
	  				}

	  			}
	  		//}
    
		LSM6DSL_AccReadXYZ(accelerationRes);
 80005d4:	4831      	ldr	r0, [pc, #196]	; (800069c <main+0x20c>)
 80005d6:	f7ff fe81 	bl	80002dc <LSM6DSL_AccReadXYZ>
		accresAvg[0] = (int16_t)(dsp_ema_i32(accelerationRes[0], accresAvg[0], DSP_EMA_I32_ALPHA(0.1)));
 80005da:	4b30      	ldr	r3, [pc, #192]	; (800069c <main+0x20c>)
 80005dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005e0:	4618      	mov	r0, r3
 80005e2:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <main+0x210>)
 80005e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005e8:	f641 1299 	movw	r2, #6553	; 0x1999
 80005ec:	4619      	mov	r1, r3
 80005ee:	f001 f831 	bl	8001654 <dsp_ema_i32>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b21a      	sxth	r2, r3
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <main+0x210>)
 80005f8:	801a      	strh	r2, [r3, #0]
		accresAvg[1] = (int16_t)(dsp_ema_i32(accelerationRes[1], accresAvg[1], DSP_EMA_I32_ALPHA(0.1)));
 80005fa:	4b28      	ldr	r3, [pc, #160]	; (800069c <main+0x20c>)
 80005fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000600:	4618      	mov	r0, r3
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <main+0x210>)
 8000604:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000608:	f641 1299 	movw	r2, #6553	; 0x1999
 800060c:	4619      	mov	r1, r3
 800060e:	f001 f821 	bl	8001654 <dsp_ema_i32>
 8000612:	4603      	mov	r3, r0
 8000614:	b21a      	sxth	r2, r3
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <main+0x210>)
 8000618:	805a      	strh	r2, [r3, #2]
		accresAvg[2] = (int16_t)(dsp_ema_i32(accelerationRes[2], accresAvg[2], DSP_EMA_I32_ALPHA(0.1)));
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <main+0x20c>)
 800061c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000620:	4618      	mov	r0, r3
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <main+0x210>)
 8000624:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000628:	f641 1299 	movw	r2, #6553	; 0x1999
 800062c:	4619      	mov	r1, r3
 800062e:	f001 f811 	bl	8001654 <dsp_ema_i32>
 8000632:	4603      	mov	r3, r0
 8000634:	b21a      	sxth	r2, r3
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <main+0x210>)
 8000638:	809a      	strh	r2, [r3, #4]

		fifo0fill=HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0);
 800063a:	2140      	movs	r1, #64	; 0x40
 800063c:	4814      	ldr	r0, [pc, #80]	; (8000690 <main+0x200>)
 800063e:	f003 febc 	bl	80043ba <HAL_FDCAN_GetRxFifoFillLevel>
 8000642:	4603      	mov	r3, r0
 8000644:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <main+0x214>)
 8000646:	6013      	str	r3, [r2, #0]
		fifo1fill=HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO1);
 8000648:	2141      	movs	r1, #65	; 0x41
 800064a:	4811      	ldr	r0, [pc, #68]	; (8000690 <main+0x200>)
 800064c:	f003 feb5 	bl	80043ba <HAL_FDCAN_GetRxFifoFillLevel>
 8000650:	4603      	mov	r3, r0
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <main+0x218>)
 8000654:	6013      	str	r3, [r2, #0]
	  			HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CANframeHeader, &CANframeData);
 8000656:	e78f      	b.n	8000578 <main+0xe8>
 8000658:	48001400 	.word	0x48001400
 800065c:	48000400 	.word	0x48000400
 8000660:	2000015c 	.word	0x2000015c
 8000664:	20000250 	.word	0x20000250
 8000668:	20000434 	.word	0x20000434
 800066c:	200000f0 	.word	0x200000f0
 8000670:	200005d0 	.word	0x200005d0
 8000674:	200002c4 	.word	0x200002c4
 8000678:	200004d8 	.word	0x200004d8
 800067c:	2000007c 	.word	0x2000007c
 8000680:	20000484 	.word	0x20000484
 8000684:	20000050 	.word	0x20000050
 8000688:	200002bc 	.word	0x200002bc
 800068c:	20000390 	.word	0x20000390
 8000690:	200003b8 	.word	0x200003b8
 8000694:	2000006c 	.word	0x2000006c
 8000698:	20000000 	.word	0x20000000
 800069c:	20000048 	.word	0x20000048
 80006a0:	20000080 	.word	0x20000080
 80006a4:	20000088 	.word	0x20000088
 80006a8:	2000008c 	.word	0x2000008c

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0a8      	sub	sp, #160	; 0xa0
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006b6:	2238      	movs	r2, #56	; 0x38
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f007 fd38 	bl	8008130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2254      	movs	r2, #84	; 0x54
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f007 fd2a 	bl	8008130 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e0:	f004 fff8 	bl	80056d4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006e4:	230a      	movs	r3, #10
 80006e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ec:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000702:	2301      	movs	r3, #1
 8000704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000708:	2310      	movs	r3, #16
 800070a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000724:	4618      	mov	r0, r3
 8000726:	f005 f889 	bl	800583c <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000730:	f000 ffe5 	bl	80016fe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2303      	movs	r3, #3
 800073a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000740:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000744:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000746:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800074a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000750:	2103      	movs	r1, #3
 8000752:	4618      	mov	r0, r3
 8000754:	f005 fb8a 	bl	8005e6c <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800075e:	f000 ffce 	bl	80016fe <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_ADC12
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <SystemClock_Config+0xec>)
 8000764:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800076a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000770:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000774:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000776:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4618      	mov	r0, r3
 8000780:	f005 fd58 	bl	8006234 <HAL_RCCEx_PeriphCLKConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800078a:	f000 ffb8 	bl	80016fe <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	37a0      	adds	r7, #160	; 0xa0
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	00019100 	.word	0x00019100

0800079c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2220      	movs	r2, #32
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f007 fcbb 	bl	8008130 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ba:	4b5e      	ldr	r3, [pc, #376]	; (8000934 <MX_ADC1_Init+0x198>)
 80007bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c2:	4b5c      	ldr	r3, [pc, #368]	; (8000934 <MX_ADC1_Init+0x198>)
 80007c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ca:	4b5a      	ldr	r3, [pc, #360]	; (8000934 <MX_ADC1_Init+0x198>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d0:	4b58      	ldr	r3, [pc, #352]	; (8000934 <MX_ADC1_Init+0x198>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007d6:	4b57      	ldr	r3, [pc, #348]	; (8000934 <MX_ADC1_Init+0x198>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007dc:	4b55      	ldr	r3, [pc, #340]	; (8000934 <MX_ADC1_Init+0x198>)
 80007de:	2201      	movs	r2, #1
 80007e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007e2:	4b54      	ldr	r3, [pc, #336]	; (8000934 <MX_ADC1_Init+0x198>)
 80007e4:	2208      	movs	r2, #8
 80007e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e8:	4b52      	ldr	r3, [pc, #328]	; (8000934 <MX_ADC1_Init+0x198>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ee:	4b51      	ldr	r3, [pc, #324]	; (8000934 <MX_ADC1_Init+0x198>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 7;
 80007f4:	4b4f      	ldr	r3, [pc, #316]	; (8000934 <MX_ADC1_Init+0x198>)
 80007f6:	2207      	movs	r2, #7
 80007f8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b4e      	ldr	r3, [pc, #312]	; (8000934 <MX_ADC1_Init+0x198>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000802:	4b4c      	ldr	r3, [pc, #304]	; (8000934 <MX_ADC1_Init+0x198>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000808:	4b4a      	ldr	r3, [pc, #296]	; (8000934 <MX_ADC1_Init+0x198>)
 800080a:	2200      	movs	r2, #0
 800080c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800080e:	4b49      	ldr	r3, [pc, #292]	; (8000934 <MX_ADC1_Init+0x198>)
 8000810:	2201      	movs	r2, #1
 8000812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000816:	4b47      	ldr	r3, [pc, #284]	; (8000934 <MX_ADC1_Init+0x198>)
 8000818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800081c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800081e:	4b45      	ldr	r3, [pc, #276]	; (8000934 <MX_ADC1_Init+0x198>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000826:	4843      	ldr	r0, [pc, #268]	; (8000934 <MX_ADC1_Init+0x198>)
 8000828:	f001 fd9c 	bl	8002364 <HAL_ADC_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000832:	f000 ff64 	bl	80016fe <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	483c      	ldr	r0, [pc, #240]	; (8000934 <MX_ADC1_Init+0x198>)
 8000842:	f002 fd8f 	bl	8003364 <HAL_ADCEx_MultiModeConfigChannel>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800084c:	f000 ff57 	bl	80016fe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000850:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC1_Init+0x19c>)
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000854:	2306      	movs	r3, #6
 8000856:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000858:	2307      	movs	r3, #7
 800085a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085c:	237f      	movs	r3, #127	; 0x7f
 800085e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000860:	2304      	movs	r3, #4
 8000862:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4831      	ldr	r0, [pc, #196]	; (8000934 <MX_ADC1_Init+0x198>)
 800086e:	f002 f81d 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000878:	f000 ff41 	bl	80016fe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800087c:	4b2f      	ldr	r3, [pc, #188]	; (800093c <MX_ADC1_Init+0x1a0>)
 800087e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000880:	230c      	movs	r3, #12
 8000882:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	482a      	ldr	r0, [pc, #168]	; (8000934 <MX_ADC1_Init+0x198>)
 800088a:	f002 f80f 	bl	80028ac <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000894:	f000 ff33 	bl	80016fe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_ADC1_Init+0x1a4>)
 800089a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800089c:	2312      	movs	r3, #18
 800089e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4823      	ldr	r0, [pc, #140]	; (8000934 <MX_ADC1_Init+0x198>)
 80008a6:	f002 f801 	bl	80028ac <HAL_ADC_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80008b0:	f000 ff25 	bl	80016fe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_ADC1_Init+0x1a8>)
 80008b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008b8:	2318      	movs	r3, #24
 80008ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	481c      	ldr	r0, [pc, #112]	; (8000934 <MX_ADC1_Init+0x198>)
 80008c2:	f001 fff3 	bl	80028ac <HAL_ADC_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80008cc:	f000 ff17 	bl	80016fe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_ADC1_Init+0x1ac>)
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80008d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	4815      	ldr	r0, [pc, #84]	; (8000934 <MX_ADC1_Init+0x198>)
 80008e0:	f001 ffe4 	bl	80028ac <HAL_ADC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80008ea:	f000 ff08 	bl	80016fe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_ADC1_Init+0x1b0>)
 80008f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008f2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80008f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_ADC1_Init+0x198>)
 80008fe:	f001 ffd5 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000908:	f000 fef9 	bl	80016fe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_ADC1_Init+0x1b4>)
 800090e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000910:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000914:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_ADC1_Init+0x198>)
 800091c:	f001 ffc6 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000926:	f000 feea 	bl	80016fe <Error_Handler>
//CH3 - AUX - single fan 		index 4
//CH4 - ETC - single fan	 	index 5
//CH5 - SCRET - FANS ON 		index 6
  /* USER CODE END ADC1_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3730      	adds	r7, #48	; 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000250 	.word	0x20000250
 8000938:	19200040 	.word	0x19200040
 800093c:	1d500080 	.word	0x1d500080
 8000940:	21800100 	.word	0x21800100
 8000944:	25b00200 	.word	0x25b00200
 8000948:	0c900008 	.word	0x0c900008
 800094c:	10c00010 	.word	0x10c00010
 8000950:	14f00020 	.word	0x14f00020

08000954 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */
	__HAL_RCC_ADC12_CLK_ENABLE();
 800095a:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <MX_ADC2_Init+0x118>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a43      	ldr	r2, [pc, #268]	; (8000a6c <MX_ADC2_Init+0x118>)
 8000960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <MX_ADC2_Init+0x118>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	2220      	movs	r2, #32
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f007 fbd8 	bl	8008130 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000980:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <MX_ADC2_Init+0x11c>)
 8000982:	4a3c      	ldr	r2, [pc, #240]	; (8000a74 <MX_ADC2_Init+0x120>)
 8000984:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000986:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <MX_ADC2_Init+0x11c>)
 8000988:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800098c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <MX_ADC2_Init+0x11c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000994:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <MX_ADC2_Init+0x11c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800099a:	4b35      	ldr	r3, [pc, #212]	; (8000a70 <MX_ADC2_Init+0x11c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009a0:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <MX_ADC2_Init+0x11c>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009a6:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <MX_ADC2_Init+0x11c>)
 80009a8:	2208      	movs	r2, #8
 80009aa:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <MX_ADC2_Init+0x11c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80009b2:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <MX_ADC2_Init+0x11c>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <MX_ADC2_Init+0x11c>)
 80009ba:	2203      	movs	r2, #3
 80009bc:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009be:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <MX_ADC2_Init+0x11c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c6:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <MX_ADC2_Init+0x11c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_ADC2_Init+0x11c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80009d2:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <MX_ADC2_Init+0x11c>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <MX_ADC2_Init+0x11c>)
 80009dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <MX_ADC2_Init+0x11c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009ea:	4821      	ldr	r0, [pc, #132]	; (8000a70 <MX_ADC2_Init+0x11c>)
 80009ec:	f001 fcba 	bl	8002364 <HAL_ADC_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 80009f6:	f000 fe82 	bl	80016fe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_ADC2_Init+0x124>)
 80009fc:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fe:	2306      	movs	r3, #6
 8000a00:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000a02:	2307      	movs	r3, #7
 8000a04:	613b      	str	r3, [r7, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a06:	237f      	movs	r3, #127	; 0x7f
 8000a08:	617b      	str	r3, [r7, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4619      	mov	r1, r3
 8000a18:	4815      	ldr	r0, [pc, #84]	; (8000a70 <MX_ADC2_Init+0x11c>)
 8000a1a:	f001 ff47 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8000a24:	f000 fe6b 	bl	80016fe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_ADC2_Init+0x128>)
 8000a2a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	4619      	mov	r1, r3
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <MX_ADC2_Init+0x11c>)
 8000a38:	f001 ff38 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8000a42:	f000 fe5c 	bl	80016fe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_ADC2_Init+0x12c>)
 8000a48:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a4a:	2312      	movs	r3, #18
 8000a4c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4619      	mov	r1, r3
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_ADC2_Init+0x11c>)
 8000a56:	f001 ff29 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_ADC2_Init+0x110>
  {
    Error_Handler();
 8000a60:	f000 fe4d 	bl	80016fe <Error_Handler>
	//BOTH FANS ADC 2 IN 11	ID9
	//FUEL ADC 2 IN 15			ID10

  /* USER CODE END ADC2_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	200000f0 	.word	0x200000f0
 8000a74:	50000100 	.word	0x50000100
 8000a78:	10c00010 	.word	0x10c00010
 8000a7c:	14f00020 	.word	0x14f00020
 8000a80:	2e300800 	.word	0x2e300800

08000a84 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2220      	movs	r2, #32
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f007 fb47 	bl	8008130 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000aa4:	4a38      	ldr	r2, [pc, #224]	; (8000b88 <MX_ADC3_Init+0x104>)
 8000aa6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000aa8:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000aaa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000aae:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000abc:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ac2:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000aca:	2204      	movs	r2, #4
 8000acc:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ace:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8000ada:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ae0:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae8:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aee:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b0a:	481e      	ldr	r0, [pc, #120]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000b0c:	f001 fc2a 	bl	8002364 <HAL_ADC_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000b16:	f000 fdf2 	bl	80016fe <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4817      	ldr	r0, [pc, #92]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000b26:	f002 fc1d 	bl	8003364 <HAL_ADCEx_MultiModeConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000b30:	f000 fde5 	bl	80016fe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_ADC3_Init+0x108>)
 8000b36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b38:	2306      	movs	r3, #6
 8000b3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b40:	237f      	movs	r3, #127	; 0x7f
 8000b42:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b44:	2304      	movs	r3, #4
 8000b46:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000b52:	f001 feab 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000b5c:	f000 fdcf 	bl	80016fe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_ADC3_Init+0x10c>)
 8000b62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b64:	230c      	movs	r3, #12
 8000b66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_ADC3_Init+0x100>)
 8000b6e:	f001 fe9d 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 8000b78:	f000 fdc1 	bl	80016fe <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3730      	adds	r7, #48	; 0x30
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200002c4 	.word	0x200002c4
 8000b88:	50000400 	.word	0x50000400
 8000b8c:	32601000 	.word	0x32601000
 8000b90:	14f00020 	.word	0x14f00020

08000b94 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000b9a:	4a20      	ldr	r2, [pc, #128]	; (8000c1c <MX_FDCAN1_Init+0x88>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000bd0:	2205      	movs	r2, #5
 8000bd2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 6;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000be8:	2206      	movs	r2, #6
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_FDCAN1_Init+0x84>)
 8000c06:	f003 f837 	bl	8003c78 <HAL_FDCAN_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000c10:	f000 fd75 	bl	80016fe <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	
  /* USER CODE END FDCAN1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200003b8 	.word	0x200003b8
 8000c1c:	40006400 	.word	0x40006400

08000c20 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <MX_I2C3_Init+0x78>)
 8000c28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <MX_I2C3_Init+0x7c>)
 8000c2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c5a:	480e      	ldr	r0, [pc, #56]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c5c:	f003 ff6a 	bl	8004b34 <HAL_I2C_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c66:	f000 fd4a 	bl	80016fe <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c6e:	f004 fc3b 	bl	80054e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c78:	f000 fd41 	bl	80016fe <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c80:	f004 fc7d 	bl	800557e <HAL_I2CEx_ConfigDigitalFilter>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c8a:	f000 fd38 	bl	80016fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000a0 	.word	0x200000a0
 8000c98:	40007800 	.word	0x40007800
 8000c9c:	00303d5b 	.word	0x00303d5b

08000ca0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_IWDG_Init+0x34>)
 8000ca6:	4a0c      	ldr	r2, [pc, #48]	; (8000cd8 <MX_IWDG_Init+0x38>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_IWDG_Init+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_IWDG_Init+0x34>)
 8000cb2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000cb6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_IWDG_Init+0x34>)
 8000cba:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000cbe:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_IWDG_Init+0x34>)
 8000cc2:	f004 fca8 	bl	8005616 <HAL_IWDG_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000ccc:	f000 fd17 	bl	80016fe <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000016c 	.word	0x2000016c
 8000cd8:	40003000 	.word	0x40003000

08000cdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09c      	sub	sp, #112	; 0x70
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2234      	movs	r2, #52	; 0x34
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f007 fa0a 	bl	8008130 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000d1e:	4a47      	ldr	r2, [pc, #284]	; (8000e3c <MX_TIM1_Init+0x160>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8000d22:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000d24:	2214      	movs	r2, #20
 8000d26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000d2e:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000d30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000d36:	4b40      	ldr	r3, [pc, #256]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d3e:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d44:	4b3c      	ldr	r3, [pc, #240]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d4a:	483b      	ldr	r0, [pc, #236]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000d4c:	f005 fcbe 	bl	80066cc <HAL_TIM_Base_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000d56:	f000 fcd2 	bl	80016fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d60:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d64:	4619      	mov	r1, r3
 8000d66:	4834      	ldr	r0, [pc, #208]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000d68:	f006 f97a 	bl	8007060 <HAL_TIM_ConfigClockSource>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000d72:	f000 fcc4 	bl	80016fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d76:	4830      	ldr	r0, [pc, #192]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000d78:	f005 fd78 	bl	800686c <HAL_TIM_PWM_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000d82:	f000 fcbc 	bl	80016fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d96:	4619      	mov	r1, r3
 8000d98:	4827      	ldr	r0, [pc, #156]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000d9a:	f006 fff1 	bl	8007d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000da4:	f000 fcab 	bl	80016fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da8:	2360      	movs	r3, #96	; 0x60
 8000daa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 997;
 8000dac:	f240 33e5 	movw	r3, #997	; 0x3e5
 8000db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db2:	2300      	movs	r3, #0
 8000db4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dca:	2208      	movs	r2, #8
 8000dcc:	4619      	mov	r1, r3
 8000dce:	481a      	ldr	r0, [pc, #104]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000dd0:	f006 f836 	bl	8006e40 <HAL_TIM_PWM_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000dda:	f000 fc90 	bl	80016fe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4807      	ldr	r0, [pc, #28]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000e1c:	f007 f846 	bl	8007eac <HAL_TIMEx_ConfigBreakDeadTime>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000e26:	f000 fc6a 	bl	80016fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e2a:	4803      	ldr	r0, [pc, #12]	; (8000e38 <MX_TIM1_Init+0x15c>)
 8000e2c:	f000 fefe 	bl	8001c2c <HAL_TIM_MspPostInit>

}
 8000e30:	bf00      	nop
 8000e32:	3770      	adds	r7, #112	; 0x70
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000484 	.word	0x20000484
 8000e3c:	40012c00 	.word	0x40012c00

08000e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e68:	22a0      	movs	r2, #160	; 0xa0
 8000e6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e86:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e88:	f005 fc20 	bl	80066cc <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e92:	f000 fc34 	bl	80016fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000ea4:	f006 f8dc 	bl	8007060 <HAL_TIM_ConfigClockSource>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eae:	f000 fc26 	bl	80016fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000ec0:	f006 ff5e 	bl	8007d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f000 fc18 	bl	80016fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200004d8 	.word	0x200004d8

08000edc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <MX_TIM3_Init+0xb0>)
 8000f02:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <MX_TIM3_Init+0xb4>)
 8000f04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_TIM3_Init+0xb0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_TIM3_Init+0xb0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_TIM3_Init+0xb0>)
 8000f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_TIM3_Init+0xb0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_TIM3_Init+0xb0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f26:	4819      	ldr	r0, [pc, #100]	; (8000f8c <MX_TIM3_Init+0xb0>)
 8000f28:	f005 fca0 	bl	800686c <HAL_TIM_PWM_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f32:	f000 fbe4 	bl	80016fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	4811      	ldr	r0, [pc, #68]	; (8000f8c <MX_TIM3_Init+0xb0>)
 8000f46:	f006 ff1b 	bl	8007d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f50:	f000 fbd5 	bl	80016fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f54:	2360      	movs	r3, #96	; 0x60
 8000f56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 60000;
 8000f58:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <MX_TIM3_Init+0xb0>)
 8000f6e:	f005 ff67 	bl	8006e40 <HAL_TIM_PWM_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000f78:	f000 fbc1 	bl	80016fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <MX_TIM3_Init+0xb0>)
 8000f7e:	f000 fe55 	bl	8001c2c <HAL_TIM_MspPostInit>

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200001dc 	.word	0x200001dc
 8000f90:	40000400 	.word	0x40000400

08000f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_DMA_Init+0x70>)
 8000f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f9e:	4a19      	ldr	r2, [pc, #100]	; (8001004 <MX_DMA_Init+0x70>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6493      	str	r3, [r2, #72]	; 0x48
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_DMA_Init+0x70>)
 8000fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_DMA_Init+0x70>)
 8000fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb6:	4a13      	ldr	r2, [pc, #76]	; (8001004 <MX_DMA_Init+0x70>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6493      	str	r3, [r2, #72]	; 0x48
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_DMA_Init+0x70>)
 8000fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2101      	movs	r1, #1
 8000fce:	200b      	movs	r0, #11
 8000fd0:	f002 fbab 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fd4:	200b      	movs	r0, #11
 8000fd6:	f002 fbc2 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2102      	movs	r1, #2
 8000fde:	200c      	movs	r0, #12
 8000fe0:	f002 fba3 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fe4:	200c      	movs	r0, #12
 8000fe6:	f002 fbba 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2103      	movs	r1, #3
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f002 fb9b 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ff4:	200d      	movs	r0, #13
 8000ff6:	f002 fbb2 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800101e:	4b43      	ldr	r3, [pc, #268]	; (800112c <MX_GPIO_Init+0x124>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a42      	ldr	r2, [pc, #264]	; (800112c <MX_GPIO_Init+0x124>)
 8001024:	f043 0320 	orr.w	r3, r3, #32
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b40      	ldr	r3, [pc, #256]	; (800112c <MX_GPIO_Init+0x124>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0320 	and.w	r3, r3, #32
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4b3d      	ldr	r3, [pc, #244]	; (800112c <MX_GPIO_Init+0x124>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a3c      	ldr	r2, [pc, #240]	; (800112c <MX_GPIO_Init+0x124>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b3a      	ldr	r3, [pc, #232]	; (800112c <MX_GPIO_Init+0x124>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b37      	ldr	r3, [pc, #220]	; (800112c <MX_GPIO_Init+0x124>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a36      	ldr	r2, [pc, #216]	; (800112c <MX_GPIO_Init+0x124>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b34      	ldr	r3, [pc, #208]	; (800112c <MX_GPIO_Init+0x124>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <MX_GPIO_Init+0x124>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a30      	ldr	r2, [pc, #192]	; (800112c <MX_GPIO_Init+0x124>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <MX_GPIO_Init+0x124>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_LEFT_CTRL_GPIO_Port, FAN_LEFT_CTRL_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2102      	movs	r1, #2
 8001082:	482b      	ldr	r0, [pc, #172]	; (8001130 <MX_GPIO_Init+0x128>)
 8001084:	f003 fd3e 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2102      	movs	r1, #2
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f003 fd38 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN_RIGHT_CTRL_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800109a:	4826      	ldr	r0, [pc, #152]	; (8001134 <MX_GPIO_Init+0x12c>)
 800109c:	f003 fd32 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a6:	4824      	ldr	r0, [pc, #144]	; (8001138 <MX_GPIO_Init+0x130>)
 80010a8:	f003 fd2c 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FAN_LEFT_CTRL_Pin */
  GPIO_InitStruct.Pin = FAN_LEFT_CTRL_Pin;
 80010ac:	2302      	movs	r3, #2
 80010ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FAN_LEFT_CTRL_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	481b      	ldr	r0, [pc, #108]	; (8001130 <MX_GPIO_Init+0x128>)
 80010c4:	f003 fb9c 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010c8:	2302      	movs	r3, #2
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f003 fb8d 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_RIGHT_CTRL_Pin PB11 PB12 */
  GPIO_InitStruct.Pin = FAN_RIGHT_CTRL_Pin|GPIO_PIN_11|GPIO_PIN_12;
 80010e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_GPIO_Init+0x12c>)
 8001100:	f003 fb7e 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_GPIO_Init+0x130>)
 800111e:	f003 fb6f 	bl	8004800 <HAL_GPIO_Init>

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	48001400 	.word	0x48001400
 8001134:	48000400 	.word	0x48000400
 8001138:	48000800 	.word	0x48000800

0800113c <FDCAN_Config>:

/* USER CODE BEGIN 4 */
void FDCAN_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af02      	add	r7, sp, #8
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800114e:	2301      	movs	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x00;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x00;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4815      	ldr	r0, [pc, #84]	; (80011b4 <FDCAN_Config+0x78>)
 8001160:	f002 fee4 	bl	8003f2c <HAL_FDCAN_ConfigFilter>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <FDCAN_Config+0x32>
  {
    Error_Handler();
 800116a:	f000 fac8 	bl	80016fe <Error_Handler>
  }

  /* Configure global filter:
     Filter all remote frames with STD and EXT ID
     Reject non matching frames with STD ID and EXT ID */
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 800116e:	2300      	movs	r3, #0
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2300      	movs	r3, #0
 8001174:	2202      	movs	r2, #2
 8001176:	2102      	movs	r1, #2
 8001178:	480e      	ldr	r0, [pc, #56]	; (80011b4 <FDCAN_Config+0x78>)
 800117a:	f002 ff31 	bl	8003fe0 <HAL_FDCAN_ConfigGlobalFilter>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <FDCAN_Config+0x4c>
  {
    Error_Handler();
 8001184:	f000 fabb 	bl	80016fe <Error_Handler>
  }

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <FDCAN_Config+0x78>)
 800118a:	f002 ff5a 	bl	8004042 <HAL_FDCAN_Start>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <FDCAN_Config+0x5c>
  {
    Error_Handler();
 8001194:	f000 fab3 	bl	80016fe <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001198:	2200      	movs	r2, #0
 800119a:	2101      	movs	r1, #1
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <FDCAN_Config+0x78>)
 800119e:	f003 f961 	bl	8004464 <HAL_FDCAN_ActivateNotification>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <FDCAN_Config+0x70>
  {
    Error_Handler();
 80011a8:	f000 faa9 	bl	80016fe <Error_Handler>
  }

  
}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200003b8 	.word	0x200003b8

080011b8 <SENSOR_IO_Init>:

void SENSOR_IO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <SENSOR_IO_Init+0x74>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <SENSOR_IO_Init+0x78>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <SENSOR_IO_Init+0x74>)
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <SENSOR_IO_Init+0x7c>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <SENSOR_IO_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <SENSOR_IO_Init+0x74>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <SENSOR_IO_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <SENSOR_IO_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <SENSOR_IO_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <SENSOR_IO_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <SENSOR_IO_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <SENSOR_IO_Init+0x74>)
 80011f4:	f003 fc9e 	bl	8004b34 <HAL_I2C_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SENSOR_IO_Init+0x4a>
  {
    Error_Handler();
 80011fe:	f000 fa7e 	bl	80016fe <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <SENSOR_IO_Init+0x74>)
 8001206:	f004 f96f 	bl	80054e8 <HAL_I2CEx_ConfigAnalogFilter>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SENSOR_IO_Init+0x5c>
  {
    Error_Handler();
 8001210:	f000 fa75 	bl	80016fe <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001214:	2100      	movs	r1, #0
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <SENSOR_IO_Init+0x74>)
 8001218:	f004 f9b1 	bl	800557e <HAL_I2CEx_ConfigDigitalFilter>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SENSOR_IO_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 fa6c 	bl	80016fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200000a0 	.word	0x200000a0
 8001230:	40007800 	.word	0x40007800
 8001234:	00303d5b 	.word	0x00303d5b

08001238 <SENSOR_IO_Write>:

void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value){
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af04      	add	r7, sp, #16
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	460b      	mov	r3, r1
 8001244:	71bb      	strb	r3, [r7, #6]
 8001246:	4613      	mov	r3, r2
 8001248:	717b      	strb	r3, [r7, #5]
		if(HAL_I2C_Mem_Write(&hi2c3,Addr,Reg,1,&Value,1,1000) != HAL_ERROR){
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	b299      	uxth	r1, r3
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	b29a      	uxth	r2, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2301      	movs	r3, #1
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	1d7b      	adds	r3, r7, #5
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <SENSOR_IO_Write+0x44>)
 8001264:	f003 fcf6 	bl	8004c54 <HAL_I2C_Mem_Write>
			//HAL_IWDG_Refresh(&hiwdg);
		}
	
		if(SENSOR_IO_Read(Addr, Reg) == Value){
 8001268:	79ba      	ldrb	r2, [r7, #6]
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f806 	bl	8001280 <SENSOR_IO_Read>
			//HAL_IWDG_Refresh(&hiwdg);
		}
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200000a0 	.word	0x200000a0

08001280 <SENSOR_IO_Read>:
uint8_t res[10] = {0,0,0,0,0,0,0,0,0,0};
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg){
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af04      	add	r7, sp, #16
 8001286:	4603      	mov	r3, r0
 8001288:	460a      	mov	r2, r1
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
	
	if(HAL_I2C_Mem_Read(&hi2c3,Addr,Reg,1,res,1,1000) != HAL_ERROR){
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	b299      	uxth	r1, r3
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	b29a      	uxth	r2, r3
 8001298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129c:	9302      	str	r3, [sp, #8]
 800129e:	2301      	movs	r3, #1
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <SENSOR_IO_Read+0x3c>)
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <SENSOR_IO_Read+0x40>)
 80012aa:	f003 fde7 	bl	8004e7c <HAL_I2C_Mem_Read>
		//HAL_IWDG_Refresh(&hiwdg);
	}
	
	return res[0];
 80012ae:	4b03      	ldr	r3, [pc, #12]	; (80012bc <SENSOR_IO_Read+0x3c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000090 	.word	0x20000090
 80012c0:	200000a0 	.word	0x200000a0

080012c4 <HAL_ADC_ConvCpltCallback>:
	
	return result;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
		int i = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
		if(hadc == &hadc1){
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a4b      	ldr	r2, [pc, #300]	; (8001400 <HAL_ADC_ConvCpltCallback+0x13c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d12a      	bne.n	800132e <HAL_ADC_ConvCpltCallback+0x6a>
			for(i=0; i<ADC1NUMConversions; i++){
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	e01e      	b.n	800131c <HAL_ADC_ConvCpltCallback+0x58>
				lastConversionResults[i]=uhADCxConvertedData[i];
 80012de:	4a49      	ldr	r2, [pc, #292]	; (8001404 <HAL_ADC_ConvCpltCallback+0x140>)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80012e6:	4a48      	ldr	r2, [pc, #288]	; (8001408 <HAL_ADC_ConvCpltCallback+0x144>)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				averageConversionResults[i] = (int16_t)(dsp_ema_i32(lastConversionResults[i], averageConversionResults[i], DSP_EMA_I32_ALPHA(0.1)));
 80012ee:	4a46      	ldr	r2, [pc, #280]	; (8001408 <HAL_ADC_ConvCpltCallback+0x144>)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012f6:	4618      	mov	r0, r3
 80012f8:	4a44      	ldr	r2, [pc, #272]	; (800140c <HAL_ADC_ConvCpltCallback+0x148>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001300:	f641 1299 	movw	r2, #6553	; 0x1999
 8001304:	4619      	mov	r1, r3
 8001306:	f000 f9a5 	bl	8001654 <dsp_ema_i32>
 800130a:	4603      	mov	r3, r0
 800130c:	b299      	uxth	r1, r3
 800130e:	4a3f      	ldr	r2, [pc, #252]	; (800140c <HAL_ADC_ConvCpltCallback+0x148>)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i=0; i<ADC1NUMConversions; i++){
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b06      	cmp	r3, #6
 8001320:	dddd      	ble.n	80012de <HAL_ADC_ConvCpltCallback+0x1a>
			}
			ADC1Conversions++;
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_ADC_ConvCpltCallback+0x14c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	4a39      	ldr	r2, [pc, #228]	; (8001410 <HAL_ADC_ConvCpltCallback+0x14c>)
 800132a:	6013      	str	r3, [r2, #0]
	
		// Conversion Complete & DMA Transfer Complete As Well
    // So The AD_RES Is Now Updated & Let's Move IT To The PWM CCR1
    
		//HAL_ADC_Start_DMA(&hadc1,uhADCxConvertedData,10);
}
 800132c:	e064      	b.n	80013f8 <HAL_ADC_ConvCpltCallback+0x134>
		else if(hadc == &hadc3){
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a38      	ldr	r2, [pc, #224]	; (8001414 <HAL_ADC_ConvCpltCallback+0x150>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12e      	bne.n	8001394 <HAL_ADC_ConvCpltCallback+0xd0>
			for(i=0; i<ADC3NUMConversions; i++){
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	e022      	b.n	8001382 <HAL_ADC_ConvCpltCallback+0xbe>
				lastConversionResults[i+ADC1NUMConversions]=uhADC3ConvertedData[i];
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3307      	adds	r3, #7
 8001340:	4935      	ldr	r1, [pc, #212]	; (8001418 <HAL_ADC_ConvCpltCallback+0x154>)
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001348:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <HAL_ADC_ConvCpltCallback+0x144>)
 800134a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				averageConversionResults[i+ADC1NUMConversions] = (int16_t)(dsp_ema_i32(lastConversionResults[i+ADC1NUMConversions], averageConversionResults[i+ADC1NUMConversions], DSP_EMA_I32_ALPHA(0.1)));
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3307      	adds	r3, #7
 8001352:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <HAL_ADC_ConvCpltCallback+0x144>)
 8001354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001358:	4618      	mov	r0, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3307      	adds	r3, #7
 800135e:	4a2b      	ldr	r2, [pc, #172]	; (800140c <HAL_ADC_ConvCpltCallback+0x148>)
 8001360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001364:	f641 1299 	movw	r2, #6553	; 0x1999
 8001368:	4619      	mov	r1, r3
 800136a:	f000 f973 	bl	8001654 <dsp_ema_i32>
 800136e:	4602      	mov	r2, r0
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3307      	adds	r3, #7
 8001374:	b291      	uxth	r1, r2
 8001376:	4a25      	ldr	r2, [pc, #148]	; (800140c <HAL_ADC_ConvCpltCallback+0x148>)
 8001378:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i=0; i<ADC3NUMConversions; i++){
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3301      	adds	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2b01      	cmp	r3, #1
 8001386:	ddd9      	ble.n	800133c <HAL_ADC_ConvCpltCallback+0x78>
			ADC3Conversions++;
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_ADC_ConvCpltCallback+0x158>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a23      	ldr	r2, [pc, #140]	; (800141c <HAL_ADC_ConvCpltCallback+0x158>)
 8001390:	6013      	str	r3, [r2, #0]
}
 8001392:	e031      	b.n	80013f8 <HAL_ADC_ConvCpltCallback+0x134>
		else if(hadc == &hadc2){
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a22      	ldr	r2, [pc, #136]	; (8001420 <HAL_ADC_ConvCpltCallback+0x15c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d12d      	bne.n	80013f8 <HAL_ADC_ConvCpltCallback+0x134>
			for(i=0; i<ADC2NUMConversions; i++){
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	e022      	b.n	80013e8 <HAL_ADC_ConvCpltCallback+0x124>
				lastConversionResults[i+ADC3NUMConversions+ADC1NUMConversions]=uhADC2ConvertedData[i];
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3309      	adds	r3, #9
 80013a6:	491f      	ldr	r1, [pc, #124]	; (8001424 <HAL_ADC_ConvCpltCallback+0x160>)
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80013ae:	4a16      	ldr	r2, [pc, #88]	; (8001408 <HAL_ADC_ConvCpltCallback+0x144>)
 80013b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				averageConversionResults[i+ADC1NUMConversions+ADC3NUMConversions] = (int16_t)(dsp_ema_i32(lastConversionResults[i+ADC1NUMConversions+ADC3NUMConversions], averageConversionResults[i+ADC1NUMConversions+ADC3NUMConversions], DSP_EMA_I32_ALPHA(0.1)));
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3309      	adds	r3, #9
 80013b8:	4a13      	ldr	r2, [pc, #76]	; (8001408 <HAL_ADC_ConvCpltCallback+0x144>)
 80013ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013be:	4618      	mov	r0, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3309      	adds	r3, #9
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_ADC_ConvCpltCallback+0x148>)
 80013c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ca:	f641 1299 	movw	r2, #6553	; 0x1999
 80013ce:	4619      	mov	r1, r3
 80013d0:	f000 f940 	bl	8001654 <dsp_ema_i32>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3309      	adds	r3, #9
 80013da:	b291      	uxth	r1, r2
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_ADC_ConvCpltCallback+0x148>)
 80013de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i=0; i<ADC2NUMConversions; i++){
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	ddd9      	ble.n	80013a2 <HAL_ADC_ConvCpltCallback+0xde>
			ADC2Conversions++;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_ADC_ConvCpltCallback+0x164>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <HAL_ADC_ConvCpltCallback+0x164>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000250 	.word	0x20000250
 8001404:	2000015c 	.word	0x2000015c
 8001408:	2000041c 	.word	0x2000041c
 800140c:	20000238 	.word	0x20000238
 8001410:	20000070 	.word	0x20000070
 8001414:	200002c4 	.word	0x200002c4
 8001418:	200005d0 	.word	0x200005d0
 800141c:	20000078 	.word	0x20000078
 8001420:	200000f0 	.word	0x200000f0
 8001424:	20000434 	.word	0x20000434
 8001428:	20000074 	.word	0x20000074

0800142c <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
		//BOTH FANS ADC 2 IN 11	ID9
		//FUEL ADC 2 IN 15			ID10
		

			/* Prepare Tx Header */
			TxHeader.Identifier = 0x105;
 8001434:	4b7d      	ldr	r3, [pc, #500]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001436:	f240 1205 	movw	r2, #261	; 0x105
 800143a:	601a      	str	r2, [r3, #0]
			TxHeader.IdType = FDCAN_STANDARD_ID;
 800143c:	4b7b      	ldr	r3, [pc, #492]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
			TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001442:	4b7a      	ldr	r3, [pc, #488]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
			TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001448:	4b78      	ldr	r3, [pc, #480]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800144a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800144e:	60da      	str	r2, [r3, #12]
			TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001450:	4b76      	ldr	r3, [pc, #472]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
			TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001456:	4b75      	ldr	r3, [pc, #468]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
			TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800145c:	4b73      	ldr	r3, [pc, #460]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
			TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001462:	4b72      	ldr	r3, [pc, #456]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001464:	2200      	movs	r2, #0
 8001466:	61da      	str	r2, [r3, #28]
			TxHeader.MessageMarker = 0;
 8001468:	4b70      	ldr	r3, [pc, #448]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
		
	    TxData[0] = averageConversionResults[4] & 0xFF;
 800146e:	4b70      	ldr	r3, [pc, #448]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001470:	891b      	ldrh	r3, [r3, #8]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b6f      	ldr	r3, [pc, #444]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001476:	701a      	strb	r2, [r3, #0]
	    TxData[1] = ((averageConversionResults[4] >> 8) & 0xFF ) | ((averageConversionResults[5] & 0xF )<<4);
 8001478:	4b6d      	ldr	r3, [pc, #436]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800147a:	891b      	ldrh	r3, [r3, #8]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	b29b      	uxth	r3, r3
 8001480:	b25a      	sxtb	r2, r3
 8001482:	4b6b      	ldr	r3, [pc, #428]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001484:	895b      	ldrh	r3, [r3, #10]
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	b25b      	sxtb	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b25b      	sxtb	r3, r3
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b68      	ldr	r3, [pc, #416]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001492:	705a      	strb	r2, [r3, #1]
			TxData[2] = (averageConversionResults[5]>> 4);
 8001494:	4b66      	ldr	r3, [pc, #408]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001496:	895b      	ldrh	r3, [r3, #10]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	b29b      	uxth	r3, r3
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b65      	ldr	r3, [pc, #404]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80014a0:	709a      	strb	r2, [r3, #2]
			TxData[3] = averageConversionResults[6] & 0xFF;
 80014a2:	4b63      	ldr	r3, [pc, #396]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80014a4:	899b      	ldrh	r3, [r3, #12]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b62      	ldr	r3, [pc, #392]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80014aa:	70da      	strb	r2, [r3, #3]
	    TxData[4] = ((averageConversionResults[6] >> 8) & 0xFF ) | ((averageConversionResults[7] & 0xF )<<4);
 80014ac:	4b60      	ldr	r3, [pc, #384]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80014ae:	899b      	ldrh	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	4b5e      	ldr	r3, [pc, #376]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80014b8:	89db      	ldrh	r3, [r3, #14]
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80014c6:	711a      	strb	r2, [r3, #4]
			TxData[5] = (averageConversionResults[7]>> 4);
 80014c8:	4b59      	ldr	r3, [pc, #356]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80014ca:	89db      	ldrh	r3, [r3, #14]
 80014cc:	091b      	lsrs	r3, r3, #4
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b58      	ldr	r3, [pc, #352]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80014d4:	715a      	strb	r2, [r3, #5]
			TxData[6] = averageConversionResults[9] & 0xFF;
 80014d6:	4b56      	ldr	r3, [pc, #344]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80014d8:	8a5b      	ldrh	r3, [r3, #18]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b55      	ldr	r3, [pc, #340]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80014de:	719a      	strb	r2, [r3, #6]
	    TxData[7] = ((averageConversionResults[9] >> 8) & 0xFF );
 80014e0:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80014e2:	8a5b      	ldrh	r3, [r3, #18]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b52      	ldr	r3, [pc, #328]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80014ec:	71da      	strb	r2, [r3, #7]
	        /* Start the Transmission process */
	    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80014ee:	4a51      	ldr	r2, [pc, #324]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80014f0:	494e      	ldr	r1, [pc, #312]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 80014f2:	4851      	ldr	r0, [pc, #324]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80014f4:	f002 fdcd 	bl	8004092 <HAL_FDCAN_AddMessageToTxFifoQ>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_TIM_PeriodElapsedCallback+0xd6>
			{
				/* Transmission request Error */
				Error_Handler();
 80014fe:	f000 f8fe 	bl	80016fe <Error_Handler>
			}
			
			TxHeader.Identifier = 0x106;
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001504:	f44f 7283 	mov.w	r2, #262	; 0x106
 8001508:	601a      	str	r2, [r3, #0]
			TxHeader.IdType = FDCAN_STANDARD_ID;
 800150a:	4b48      	ldr	r3, [pc, #288]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
			TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001510:	4b46      	ldr	r3, [pc, #280]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
			TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001516:	4b45      	ldr	r3, [pc, #276]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001518:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800151c:	60da      	str	r2, [r3, #12]
			TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800151e:	4b43      	ldr	r3, [pc, #268]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
			TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001524:	4b41      	ldr	r3, [pc, #260]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
			TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800152a:	4b40      	ldr	r3, [pc, #256]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
			TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001530:	4b3e      	ldr	r3, [pc, #248]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
			TxHeader.MessageMarker = 0;
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
		
	    TxData[0] = averageConversionResults[10] & 0xFF;
 800153c:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800153e:	8a9b      	ldrh	r3, [r3, #20]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001544:	701a      	strb	r2, [r3, #0]
	    TxData[1] = ((averageConversionResults[10] >> 8) & 0xFF );
 8001546:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001548:	8a9b      	ldrh	r3, [r3, #20]
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	b29b      	uxth	r3, r3
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001552:	705a      	strb	r2, [r3, #1]
			TxData[2] = accelerationRes[0] & 0xFF;
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b35      	ldr	r3, [pc, #212]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800155e:	709a      	strb	r2, [r3, #2]
	    TxData[3] = ((accelerationRes[0] >> 8));
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001566:	121b      	asrs	r3, r3, #8
 8001568:	b21b      	sxth	r3, r3
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b31      	ldr	r3, [pc, #196]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800156e:	70da      	strb	r2, [r3, #3]
			TxData[4] = accelerationRes[1] & 0xFF;
 8001570:	4b32      	ldr	r3, [pc, #200]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001572:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800157a:	711a      	strb	r2, [r3, #4]
	    TxData[5] = ((accelerationRes[1] >> 8));
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x210>)
 800157e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001582:	121b      	asrs	r3, r3, #8
 8001584:	b21b      	sxth	r3, r3
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800158a:	715a      	strb	r2, [r3, #5]
			TxData[6] = accelerationRes[2] & 0xFF;
 800158c:	4b2b      	ldr	r3, [pc, #172]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x210>)
 800158e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001596:	719a      	strb	r2, [r3, #6]
	    TxData[7] = ((accelerationRes[2] >> 8));
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x210>)
 800159a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800159e:	121b      	asrs	r3, r3, #8
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80015a6:	71da      	strb	r2, [r3, #7]
	        /* Start the Transmission process */
	    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80015a8:	4a22      	ldr	r2, [pc, #136]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80015aa:	4920      	ldr	r1, [pc, #128]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x200>)
 80015ac:	4822      	ldr	r0, [pc, #136]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80015ae:	f002 fd70 	bl	8004092 <HAL_FDCAN_AddMessageToTxFifoQ>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x190>
			{
				/* Transmission request Error */
				Error_Handler();
 80015b8:	f000 f8a1 	bl	80016fe <Error_Handler>
			}

			HAL_FDCAN_GetErrorCounters(&hfdcan1, &errorCounter);
 80015bc:	4920      	ldr	r1, [pc, #128]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80015be:	481e      	ldr	r0, [pc, #120]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80015c0:	f002 fed6 	bl	8004370 <HAL_FDCAN_GetErrorCounters>
			HAL_FDCAN_IsRestrictedOperationMode(&hfdcan1);
 80015c4:	481c      	ldr	r0, [pc, #112]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80015c6:	f002 ff16 	bl	80043f6 <HAL_FDCAN_IsRestrictedOperationMode>
			HAL_FDCAN_GetProtocolStatus(&hfdcan1, &protocolStatus);
 80015ca:	491e      	ldr	r1, [pc, #120]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80015cc:	481a      	ldr	r0, [pc, #104]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80015ce:	f002 fe7f 	bl	80042d0 <HAL_FDCAN_GetProtocolStatus>

			if(protocolStatus.BusOff==1){
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d10b      	bne.n	80015f2 <HAL_TIM_PeriodElapsedCallback+0x1c6>
				HAL_FDCAN_ExitRestrictedOperationMode(&hfdcan1);
 80015da:	4817      	ldr	r0, [pc, #92]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80015dc:	f002 ff1d 	bl	800441a <HAL_FDCAN_ExitRestrictedOperationMode>
				if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80015e0:	4815      	ldr	r0, [pc, #84]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80015e2:	f002 fd2e 	bl	8004042 <HAL_FDCAN_Start>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01b      	beq.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x1f8>
				{
					Error_Handler();
 80015ec:	f000 f887 	bl	80016fe <Error_Handler>
				  	//SET ETC (RIGHT FAN) OFF
				  	HAL_GPIO_WritePin(FAN_RIGHT_CTRL_GPIO_Port,FAN_RIGHT_CTRL_Pin,GPIO_PIN_RESET);

				  	//HAL_GPIO_TogglePin(CTULogo_GPIO_Port,CTULogo_Pin);
			}
}
 80015f0:	e018      	b.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x1f8>
				HAL_IWDG_Refresh(&hiwdg);
 80015f2:	4815      	ldr	r0, [pc, #84]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80015f4:	f004 f85e 	bl	80056b4 <HAL_IWDG_Refresh>
				HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1,GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2102      	movs	r1, #2
 80015fc:	4813      	ldr	r0, [pc, #76]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80015fe:	f003 fa81 	bl	8004b04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001608:	4811      	ldr	r0, [pc, #68]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800160a:	f003 fa7b 	bl	8004b04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FAN_LEFT_CTRL_GPIO_Port,FAN_LEFT_CTRL_Pin,GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2102      	movs	r1, #2
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001614:	f003 fa76 	bl	8004b04 <HAL_GPIO_WritePin>
				  	HAL_GPIO_WritePin(FAN_RIGHT_CTRL_GPIO_Port,FAN_RIGHT_CTRL_Pin,GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161e:	480c      	ldr	r0, [pc, #48]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001620:	f003 fa70 	bl	8004b04 <HAL_GPIO_WritePin>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000584 	.word	0x20000584
 8001630:	20000238 	.word	0x20000238
 8001634:	20000450 	.word	0x20000450
 8001638:	200003b8 	.word	0x200003b8
 800163c:	20000048 	.word	0x20000048
 8001640:	20000228 	.word	0x20000228
 8001644:	20000458 	.word	0x20000458
 8001648:	2000016c 	.word	0x2000016c
 800164c:	48001400 	.word	0x48001400
 8001650:	48000400 	.word	0x48000400

08001654 <dsp_ema_i32>:


 

 
int32_t dsp_ema_i32(int32_t in, int32_t average, uint16_t alpha){
 8001654:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	4613      	mov	r3, r2
 8001662:	80fb      	strh	r3, [r7, #6]
  int64_t tmp0; //calcs must be done in 64-bit math to avoid overflow
  tmp0 = (int64_t)in * (alpha) + (int64_t)average * (65536 - alpha);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4618      	mov	r0, r3
 8001668:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800166c:	88fa      	ldrh	r2, [r7, #6]
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	fb02 f501 	mul.w	r5, r2, r1
 8001676:	fb00 f403 	mul.w	r4, r0, r3
 800167a:	442c      	add	r4, r5
 800167c:	fba0 0102 	umull	r0, r1, r0, r2
 8001680:	1863      	adds	r3, r4, r1
 8001682:	4619      	mov	r1, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	461c      	mov	r4, r3
 8001688:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001692:	461a      	mov	r2, r3
 8001694:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001698:	fb02 fc05 	mul.w	ip, r2, r5
 800169c:	fb04 f603 	mul.w	r6, r4, r3
 80016a0:	4466      	add	r6, ip
 80016a2:	fba4 2302 	umull	r2, r3, r4, r2
 80016a6:	18f4      	adds	r4, r6, r3
 80016a8:	4623      	mov	r3, r4
 80016aa:	eb10 0802 	adds.w	r8, r0, r2
 80016ae:	eb41 0903 	adc.w	r9, r1, r3
 80016b2:	e9c7 8904 	strd	r8, r9, [r7, #16]
  return (int32_t)((tmp0 + 32768) / 65536); //scale back to 32-bit (with rounding)
 80016b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016ba:	f512 4a00 	adds.w	sl, r2, #32768	; 0x8000
 80016be:	f143 0b00 	adc.w	fp, r3, #0
 80016c2:	4652      	mov	r2, sl
 80016c4:	465b      	mov	r3, fp
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	f173 0100 	sbcs.w	r1, r3, #0
 80016cc:	da06      	bge.n	80016dc <dsp_ema_i32+0x88>
 80016ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016d2:	f04f 0100 	mov.w	r1, #0
 80016d6:	1812      	adds	r2, r2, r0
 80016d8:	eb41 0303 	adc.w	r3, r1, r3
 80016dc:	f04f 0000 	mov.w	r0, #0
 80016e0:	f04f 0100 	mov.w	r1, #0
 80016e4:	0c10      	lsrs	r0, r2, #16
 80016e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80016ea:	1419      	asrs	r1, r3, #16
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4613      	mov	r3, r2
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80016fc:	4770      	bx	lr

080016fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_MspInit+0x44>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <HAL_MspInit+0x44>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6613      	str	r3, [r2, #96]	; 0x60
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_MspInit+0x44>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_MspInit+0x44>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_MspInit+0x44>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6593      	str	r3, [r2, #88]	; 0x58
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_MspInit+0x44>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001742:	f004 f86b 	bl	800581c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b090      	sub	sp, #64	; 0x40
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001774:	f040 808b 	bne.w	800188e <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001778:	4b81      	ldr	r3, [pc, #516]	; (8001980 <HAL_ADC_MspInit+0x22c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4a80      	ldr	r2, [pc, #512]	; (8001980 <HAL_ADC_MspInit+0x22c>)
 8001780:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001782:	4b7f      	ldr	r3, [pc, #508]	; (8001980 <HAL_ADC_MspInit+0x22c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d10b      	bne.n	80017a2 <HAL_ADC_MspInit+0x4e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800178a:	4b7e      	ldr	r3, [pc, #504]	; (8001984 <HAL_ADC_MspInit+0x230>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	4a7d      	ldr	r2, [pc, #500]	; (8001984 <HAL_ADC_MspInit+0x230>)
 8001790:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001796:	4b7b      	ldr	r3, [pc, #492]	; (8001984 <HAL_ADC_MspInit+0x230>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	4b78      	ldr	r3, [pc, #480]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a77      	ldr	r2, [pc, #476]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b75      	ldr	r3, [pc, #468]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	4b72      	ldr	r3, [pc, #456]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a71      	ldr	r2, [pc, #452]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b6f      	ldr	r3, [pc, #444]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b6c      	ldr	r3, [pc, #432]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a6b      	ldr	r2, [pc, #428]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b69      	ldr	r3, [pc, #420]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	69fb      	ldr	r3, [r7, #28]
    PC3     ------> ADC1_IN9
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017ea:	230f      	movs	r3, #15
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ee:	2303      	movs	r3, #3
 80017f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fa:	4619      	mov	r1, r3
 80017fc:	4862      	ldr	r0, [pc, #392]	; (8001988 <HAL_ADC_MspInit+0x234>)
 80017fe:	f002 ffff 	bl	8004800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001802:	230c      	movs	r3, #12
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001806:	2303      	movs	r3, #3
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001818:	f002 fff2 	bl	8004800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800181c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001822:	2303      	movs	r3, #3
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182e:	4619      	mov	r1, r3
 8001830:	4856      	ldr	r0, [pc, #344]	; (800198c <HAL_ADC_MspInit+0x238>)
 8001832:	f002 ffe5 	bl	8004800 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <HAL_ADC_MspInit+0x23c>)
 8001838:	4a56      	ldr	r2, [pc, #344]	; (8001994 <HAL_ADC_MspInit+0x240>)
 800183a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800183c:	4b54      	ldr	r3, [pc, #336]	; (8001990 <HAL_ADC_MspInit+0x23c>)
 800183e:	2205      	movs	r2, #5
 8001840:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001842:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_ADC_MspInit+0x23c>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001848:	4b51      	ldr	r3, [pc, #324]	; (8001990 <HAL_ADC_MspInit+0x23c>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800184e:	4b50      	ldr	r3, [pc, #320]	; (8001990 <HAL_ADC_MspInit+0x23c>)
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001854:	4b4e      	ldr	r3, [pc, #312]	; (8001990 <HAL_ADC_MspInit+0x23c>)
 8001856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800185a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800185c:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <HAL_ADC_MspInit+0x23c>)
 800185e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001862:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001864:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <HAL_ADC_MspInit+0x23c>)
 8001866:	2220      	movs	r2, #32
 8001868:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800186a:	4b49      	ldr	r3, [pc, #292]	; (8001990 <HAL_ADC_MspInit+0x23c>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001870:	4847      	ldr	r0, [pc, #284]	; (8001990 <HAL_ADC_MspInit+0x23c>)
 8001872:	f001 ff8f 	bl	8003794 <HAL_DMA_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 800187c:	f7ff ff3f 	bl	80016fe <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a43      	ldr	r2, [pc, #268]	; (8001990 <HAL_ADC_MspInit+0x23c>)
 8001884:	655a      	str	r2, [r3, #84]	; 0x54
 8001886:	4a42      	ldr	r2, [pc, #264]	; (8001990 <HAL_ADC_MspInit+0x23c>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800188c:	e0df      	b.n	8001a4e <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a41      	ldr	r2, [pc, #260]	; (8001998 <HAL_ADC_MspInit+0x244>)
 8001894:	4293      	cmp	r3, r2
 8001896:	f040 8085 	bne.w	80019a4 <HAL_ADC_MspInit+0x250>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800189a:	4b39      	ldr	r3, [pc, #228]	; (8001980 <HAL_ADC_MspInit+0x22c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a37      	ldr	r2, [pc, #220]	; (8001980 <HAL_ADC_MspInit+0x22c>)
 80018a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018a4:	4b36      	ldr	r3, [pc, #216]	; (8001980 <HAL_ADC_MspInit+0x22c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d10b      	bne.n	80018c4 <HAL_ADC_MspInit+0x170>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018ac:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	4a34      	ldr	r2, [pc, #208]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80018b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b8:	4b32      	ldr	r3, [pc, #200]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a2e      	ldr	r2, [pc, #184]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018dc:	4b29      	ldr	r3, [pc, #164]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	4a28      	ldr	r2, [pc, #160]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e8:	4b26      	ldr	r3, [pc, #152]	; (8001984 <HAL_ADC_MspInit+0x230>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f8:	2303      	movs	r3, #3
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001904:	4619      	mov	r1, r3
 8001906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190a:	f002 ff79 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800190e:	2330      	movs	r3, #48	; 0x30
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001912:	2303      	movs	r3, #3
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191e:	4619      	mov	r1, r3
 8001920:	4819      	ldr	r0, [pc, #100]	; (8001988 <HAL_ADC_MspInit+0x234>)
 8001922:	f002 ff6d 	bl	8004800 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_ADC_MspInit+0x248>)
 8001928:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <HAL_ADC_MspInit+0x24c>)
 800192a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_ADC_MspInit+0x248>)
 800192e:	2224      	movs	r2, #36	; 0x24
 8001930:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_ADC_MspInit+0x248>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_ADC_MspInit+0x248>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_ADC_MspInit+0x248>)
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_ADC_MspInit+0x248>)
 8001946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_ADC_MspInit+0x248>)
 800194e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001952:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_ADC_MspInit+0x248>)
 8001956:	2220      	movs	r2, #32
 8001958:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_ADC_MspInit+0x248>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001960:	480e      	ldr	r0, [pc, #56]	; (800199c <HAL_ADC_MspInit+0x248>)
 8001962:	f001 ff17 	bl	8003794 <HAL_DMA_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_ADC_MspInit+0x21c>
      Error_Handler();
 800196c:	f7ff fec7 	bl	80016fe <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_ADC_MspInit+0x248>)
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_ADC_MspInit+0x248>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800197c:	e067      	b.n	8001a4e <HAL_ADC_MspInit+0x2fa>
 800197e:	bf00      	nop
 8001980:	2000009c 	.word	0x2000009c
 8001984:	40021000 	.word	0x40021000
 8001988:	48000800 	.word	0x48000800
 800198c:	48000400 	.word	0x48000400
 8001990:	20000330 	.word	0x20000330
 8001994:	40020008 	.word	0x40020008
 8001998:	50000100 	.word	0x50000100
 800199c:	20000524 	.word	0x20000524
 80019a0:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC3)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a2b      	ldr	r2, [pc, #172]	; (8001a58 <HAL_ADC_MspInit+0x304>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d14f      	bne.n	8001a4e <HAL_ADC_MspInit+0x2fa>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_ADC_MspInit+0x308>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4a2a      	ldr	r2, [pc, #168]	; (8001a5c <HAL_ADC_MspInit+0x308>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_ADC_MspInit+0x308>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <HAL_ADC_MspInit+0x308>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <HAL_ADC_MspInit+0x308>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <HAL_ADC_MspInit+0x308>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 80019de:	f242 0301 	movw	r3, #8193	; 0x2001
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e4:	2303      	movs	r3, #3
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f0:	4619      	mov	r1, r3
 80019f2:	481b      	ldr	r0, [pc, #108]	; (8001a60 <HAL_ADC_MspInit+0x30c>)
 80019f4:	f002 ff04 	bl	8004800 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_ADC_MspInit+0x310>)
 80019fa:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <HAL_ADC_MspInit+0x314>)
 80019fc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_ADC_MspInit+0x310>)
 8001a00:	2225      	movs	r2, #37	; 0x25
 8001a02:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_ADC_MspInit+0x310>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_ADC_MspInit+0x310>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_ADC_MspInit+0x310>)
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_ADC_MspInit+0x310>)
 8001a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_ADC_MspInit+0x310>)
 8001a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a24:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_ADC_MspInit+0x310>)
 8001a28:	2220      	movs	r2, #32
 8001a2a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_ADC_MspInit+0x310>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001a32:	480c      	ldr	r0, [pc, #48]	; (8001a64 <HAL_ADC_MspInit+0x310>)
 8001a34:	f001 feae 	bl	8003794 <HAL_DMA_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 8001a3e:	f7ff fe5e 	bl	80016fe <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_ADC_MspInit+0x310>)
 8001a46:	655a      	str	r2, [r3, #84]	; 0x54
 8001a48:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_ADC_MspInit+0x310>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001a4e:	bf00      	nop
 8001a50:	3740      	adds	r7, #64	; 0x40
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	50000400 	.word	0x50000400
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	48000400 	.word	0x48000400
 8001a64:	2000017c 	.word	0x2000017c
 8001a68:	40020030 	.word	0x40020030

08001a6c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a18      	ldr	r2, [pc, #96]	; (8001aec <HAL_FDCAN_MspInit+0x80>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d129      	bne.n	8001ae2 <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_FDCAN_MspInit+0x84>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <HAL_FDCAN_MspInit+0x84>)
 8001a94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a98:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_FDCAN_MspInit+0x84>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_FDCAN_MspInit+0x84>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <HAL_FDCAN_MspInit+0x84>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_FDCAN_MspInit+0x84>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001abe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001ad0:	2309      	movs	r3, #9
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ade:	f002 fe8f 	bl	8004800 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	; 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40006400 	.word	0x40006400
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_I2C_MspInit+0x7c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d128      	bne.n	8001b68 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_I2C_MspInit+0x80>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	4a16      	ldr	r2, [pc, #88]	; (8001b74 <HAL_I2C_MspInit+0x80>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_I2C_MspInit+0x80>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b34:	2312      	movs	r3, #18
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001b40:	2308      	movs	r3, #8
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480b      	ldr	r0, [pc, #44]	; (8001b78 <HAL_I2C_MspInit+0x84>)
 8001b4c:	f002 fe58 	bl	8004800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_I2C_MspInit+0x80>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_I2C_MspInit+0x80>)
 8001b56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_I2C_MspInit+0x80>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40007800 	.word	0x40007800
 8001b74:	40021000 	.word	0x40021000
 8001b78:	48000800 	.word	0x48000800

08001b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <HAL_TIM_Base_MspInit+0x68>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b92:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b98:	6613      	str	r3, [r2, #96]	; 0x60
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ba6:	e018      	b.n	8001bda <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb0:	d113      	bne.n	8001bda <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_TIM_Base_MspInit+0x6c>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <HAL_TIM_Base_MspInit+0x6c>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_TIM_Base_MspInit+0x6c>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	201c      	movs	r0, #28
 8001bd0:	f001 fdab 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bd4:	201c      	movs	r0, #28
 8001bd6:	f001 fdc2 	bl	800375e <HAL_NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40012c00 	.word	0x40012c00
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_TIM_PWM_MspInit+0x38>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10b      	bne.n	8001c16 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40000400 	.word	0x40000400
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <HAL_TIM_MspPostInit+0xa8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d11c      	bne.n	8001c88 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_TIM_MspPostInit+0xac>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <HAL_TIM_MspPostInit+0xac>)
 8001c54:	f043 0320 	orr.w	r3, r3, #32
 8001c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <HAL_TIM_MspPostInit+0xac>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c66:	2301      	movs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c76:	2306      	movs	r3, #6
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4816      	ldr	r0, [pc, #88]	; (8001cdc <HAL_TIM_MspPostInit+0xb0>)
 8001c82:	f002 fdbd 	bl	8004800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c86:	e020      	b.n	8001cca <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM3)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <HAL_TIM_MspPostInit+0xb4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d11b      	bne.n	8001cca <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_TIM_MspPostInit+0xac>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <HAL_TIM_MspPostInit+0xac>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_TIM_MspPostInit+0xac>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001caa:	2310      	movs	r3, #16
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <HAL_TIM_MspPostInit+0xb8>)
 8001cc6:	f002 fd9b 	bl	8004800 <HAL_GPIO_Init>
}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	48001400 	.word	0x48001400
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	48000400 	.word	0x48000400

08001ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <NMI_Handler+0x4>

08001cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <HardFault_Handler+0x4>

08001cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <MemManage_Handler+0x4>

08001cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d34:	f000 f8b8 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Channel1_IRQHandler+0x10>)
 8001d42:	f001 fe4a 	bl	80039da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000330 	.word	0x20000330

08001d50 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <DMA1_Channel2_IRQHandler+0x10>)
 8001d56:	f001 fe40 	bl	80039da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000524 	.word	0x20000524

08001d64 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <DMA1_Channel3_IRQHandler+0x10>)
 8001d6a:	f001 fe36 	bl	80039da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000017c 	.word	0x2000017c

08001d78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIM2_IRQHandler+0x10>)
 8001d7e:	f004 fedf 	bl	8006b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200004d8 	.word	0x200004d8

08001d8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <SystemInit+0x20>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <SystemInit+0x20>)
 8001d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <Reset_Handler>:
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <LoopForever+0x2>)
 8001db2:	4685      	mov	sp, r0
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <LoopForever+0x6>)
 8001db6:	490e      	ldr	r1, [pc, #56]	; (8001df0 <LoopForever+0xa>)
 8001db8:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <LoopForever+0xe>)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:
 8001dbe:	58d4      	ldr	r4, [r2, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:
 8001dc4:	18c4      	adds	r4, r0, r3
 8001dc6:	428c      	cmp	r4, r1
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <LoopForever+0x12>)
 8001dcc:	4c0b      	ldr	r4, [pc, #44]	; (8001dfc <LoopForever+0x16>)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:
 8001dd6:	42a2      	cmp	r2, r4
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>
 8001dda:	f7ff ffd7 	bl	8001d8c <SystemInit>
 8001dde:	f006 f983 	bl	80080e8 <__libc_init_array>
 8001de2:	f7fe fb55 	bl	8000490 <main>

08001de6 <LoopForever>:
 8001de6:	e7fe      	b.n	8001de6 <LoopForever>
 8001de8:	20020000 	.word	0x20020000
 8001dec:	20000000 	.word	0x20000000
 8001df0:	20000018 	.word	0x20000018
 8001df4:	08008180 	.word	0x08008180
 8001df8:	20000018 	.word	0x20000018
 8001dfc:	200005d8 	.word	0x200005d8

08001e00 <ADC1_2_IRQHandler>:
 8001e00:	e7fe      	b.n	8001e00 <ADC1_2_IRQHandler>

08001e02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f001 fc81 	bl	8003714 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e12:	2000      	movs	r0, #0
 8001e14:	f000 f80e 	bl	8001e34 <HAL_InitTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	e001      	b.n	8001e28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e24:	f7ff fc72 	bl	800170c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e28:	79fb      	ldrb	r3, [r7, #7]

}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_InitTick+0x68>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d022      	beq.n	8001e8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_InitTick+0x6c>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <HAL_InitTick+0x68>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 fc8c 	bl	800377a <HAL_SYSTICK_Config>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10f      	bne.n	8001e88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	d809      	bhi.n	8001e82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	f04f 30ff 	mov.w	r0, #4294967295
 8001e76:	f001 fc58 	bl	800372a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_InitTick+0x70>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	e007      	b.n	8001e92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	e004      	b.n	8001e92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e001      	b.n	8001e92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000014 	.word	0x20000014
 8001ea0:	2000000c 	.word	0x2000000c
 8001ea4:	20000010 	.word	0x20000010

08001ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_IncTick+0x1c>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_IncTick+0x20>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <HAL_IncTick+0x1c>)
 8001eb8:	6013      	str	r3, [r2, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	200005d4 	.word	0x200005d4
 8001ec8:	20000014 	.word	0x20000014

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	200005d4 	.word	0x200005d4

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff ffee 	bl	8001ecc <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d004      	beq.n	8001f08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_Delay+0x40>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f08:	bf00      	nop
 8001f0a:	f7ff ffdf 	bl	8001ecc <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d8f7      	bhi.n	8001f0a <HAL_Delay+0x26>
  {
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000014 	.word	0x20000014

08001f28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	609a      	str	r2, [r3, #8]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	609a      	str	r2, [r3, #8]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3360      	adds	r3, #96	; 0x60
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <LL_ADC_SetOffset+0x44>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fc8:	bf00      	nop
 8001fca:	371c      	adds	r7, #28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	03fff000 	.word	0x03fff000

08001fd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3360      	adds	r3, #96	; 0x60
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3360      	adds	r3, #96	; 0x60
 8002014:	461a      	mov	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	431a      	orrs	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800202e:	bf00      	nop
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800203a:	b480      	push	{r7}
 800203c:	b087      	sub	sp, #28
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3360      	adds	r3, #96	; 0x60
 800204a:	461a      	mov	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	431a      	orrs	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3360      	adds	r3, #96	; 0x60
 8002080:	461a      	mov	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	431a      	orrs	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800209a:	bf00      	nop
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	615a      	str	r2, [r3, #20]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b087      	sub	sp, #28
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3330      	adds	r3, #48	; 0x30
 8002102:	461a      	mov	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	4413      	add	r3, r2
 8002110:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	211f      	movs	r1, #31
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	401a      	ands	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0e9b      	lsrs	r3, r3, #26
 800212a:	f003 011f 	and.w	r1, r3, #31
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	431a      	orrs	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800213e:	bf00      	nop
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800214a:	b480      	push	{r7}
 800214c:	b087      	sub	sp, #28
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3314      	adds	r3, #20
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	0e5b      	lsrs	r3, r3, #25
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	4413      	add	r3, r2
 8002168:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	0d1b      	lsrs	r3, r3, #20
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2107      	movs	r1, #7
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	401a      	ands	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	0d1b      	lsrs	r3, r3, #20
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	431a      	orrs	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002194:	bf00      	nop
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b8:	43db      	mvns	r3, r3
 80021ba:	401a      	ands	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0318 	and.w	r3, r3, #24
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021c4:	40d9      	lsrs	r1, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	400b      	ands	r3, r1
 80021ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ce:	431a      	orrs	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	0007ffff 	.word	0x0007ffff

080021e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 031f 	and.w	r3, r3, #31
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002214:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6093      	str	r3, [r2, #8]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800223c:	d101      	bne.n	8002242 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002260:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002264:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800228c:	d101      	bne.n	8002292 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022b4:	f043 0201 	orr.w	r2, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <LL_ADC_IsEnabled+0x18>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <LL_ADC_IsEnabled+0x1a>
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002302:	f043 0204 	orr.w	r2, r3, #4
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b04      	cmp	r3, #4
 8002328:	d101      	bne.n	800232e <LL_ADC_REG_IsConversionOngoing+0x18>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b08      	cmp	r3, #8
 800234e:	d101      	bne.n	8002354 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e1af      	b.n	80026de <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff f9e1 	bl	8001754 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff3f 	bl	8002228 <LL_ADC_IsDeepPowerDownEnabled>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff25 	bl	8002204 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff5a 	bl	8002278 <LL_ADC_IsInternalRegulatorEnabled>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d115      	bne.n	80023f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff3e 	bl	8002250 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d4:	4b9f      	ldr	r3, [pc, #636]	; (8002654 <HAL_ADC_Init+0x2f0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	4a9f      	ldr	r2, [pc, #636]	; (8002658 <HAL_ADC_Init+0x2f4>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	099b      	lsrs	r3, r3, #6
 80023e2:	3301      	adds	r3, #1
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023e8:	e002      	b.n	80023f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f9      	bne.n	80023ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff3c 	bl	8002278 <LL_ADC_IsInternalRegulatorEnabled>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	f043 0210 	orr.w	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff75 	bl	8002316 <LL_ADC_REG_IsConversionOngoing>
 800242c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	f040 8148 	bne.w	80026cc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 8144 	bne.w	80026cc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800244c:	f043 0202 	orr.w	r2, r3, #2
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff35 	bl	80022c8 <LL_ADC_IsEnabled>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d141      	bne.n	80024e8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800246c:	d004      	beq.n	8002478 <HAL_ADC_Init+0x114>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7a      	ldr	r2, [pc, #488]	; (800265c <HAL_ADC_Init+0x2f8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d10f      	bne.n	8002498 <HAL_ADC_Init+0x134>
 8002478:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800247c:	f7ff ff24 	bl	80022c8 <LL_ADC_IsEnabled>
 8002480:	4604      	mov	r4, r0
 8002482:	4876      	ldr	r0, [pc, #472]	; (800265c <HAL_ADC_Init+0x2f8>)
 8002484:	f7ff ff20 	bl	80022c8 <LL_ADC_IsEnabled>
 8002488:	4603      	mov	r3, r0
 800248a:	4323      	orrs	r3, r4
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e012      	b.n	80024be <HAL_ADC_Init+0x15a>
 8002498:	4871      	ldr	r0, [pc, #452]	; (8002660 <HAL_ADC_Init+0x2fc>)
 800249a:	f7ff ff15 	bl	80022c8 <LL_ADC_IsEnabled>
 800249e:	4604      	mov	r4, r0
 80024a0:	4870      	ldr	r0, [pc, #448]	; (8002664 <HAL_ADC_Init+0x300>)
 80024a2:	f7ff ff11 	bl	80022c8 <LL_ADC_IsEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	431c      	orrs	r4, r3
 80024aa:	486f      	ldr	r0, [pc, #444]	; (8002668 <HAL_ADC_Init+0x304>)
 80024ac:	f7ff ff0c 	bl	80022c8 <LL_ADC_IsEnabled>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4323      	orrs	r3, r4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d012      	beq.n	80024e8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ca:	d004      	beq.n	80024d6 <HAL_ADC_Init+0x172>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a62      	ldr	r2, [pc, #392]	; (800265c <HAL_ADC_Init+0x2f8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Init+0x176>
 80024d6:	4a65      	ldr	r2, [pc, #404]	; (800266c <HAL_ADC_Init+0x308>)
 80024d8:	e000      	b.n	80024dc <HAL_ADC_Init+0x178>
 80024da:	4a65      	ldr	r2, [pc, #404]	; (8002670 <HAL_ADC_Init+0x30c>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f7ff fd20 	bl	8001f28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7f5b      	ldrb	r3, [r3, #29]
 80024ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80024f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80024fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002506:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002512:	2b01      	cmp	r3, #1
 8002514:	d106      	bne.n	8002524 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	3b01      	subs	r3, #1
 800251c:	045b      	lsls	r3, r3, #17
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <HAL_ADC_Init+0x310>)
 8002548:	4013      	ands	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	69b9      	ldr	r1, [r7, #24]
 8002550:	430b      	orrs	r3, r1
 8002552:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fed1 	bl	8002316 <LL_ADC_REG_IsConversionOngoing>
 8002574:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fede 	bl	800233c <LL_ADC_INJ_IsConversionOngoing>
 8002580:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d17f      	bne.n	8002688 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d17c      	bne.n	8002688 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002592:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800259a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025aa:	f023 0302 	bic.w	r3, r3, #2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	69b9      	ldr	r1, [r7, #24]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d017      	beq.n	80025f0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6911      	ldr	r1, [r2, #16]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80025ee:	e013      	b.n	8002618 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002610:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002614:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800261e:	2b01      	cmp	r3, #1
 8002620:	d12a      	bne.n	8002678 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800263e:	4311      	orrs	r1, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002644:	430a      	orrs	r2, r1
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	611a      	str	r2, [r3, #16]
 8002652:	e019      	b.n	8002688 <HAL_ADC_Init+0x324>
 8002654:	2000000c 	.word	0x2000000c
 8002658:	053e2d63 	.word	0x053e2d63
 800265c:	50000100 	.word	0x50000100
 8002660:	50000400 	.word	0x50000400
 8002664:	50000500 	.word	0x50000500
 8002668:	50000600 	.word	0x50000600
 800266c:	50000300 	.word	0x50000300
 8002670:	50000700 	.word	0x50000700
 8002674:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d10c      	bne.n	80026aa <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f023 010f 	bic.w	r1, r3, #15
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	1e5a      	subs	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
 80026a8:	e007      	b.n	80026ba <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 020f 	bic.w	r2, r2, #15
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	f023 0303 	bic.w	r3, r3, #3
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80026ca:	e007      	b.n	80026dc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d0:	f043 0210 	orr.w	r2, r3, #16
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	bf00      	nop

080026e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026fc:	d004      	beq.n	8002708 <HAL_ADC_Start_DMA+0x20>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a58      	ldr	r2, [pc, #352]	; (8002864 <HAL_ADC_Start_DMA+0x17c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <HAL_ADC_Start_DMA+0x24>
 8002708:	4b57      	ldr	r3, [pc, #348]	; (8002868 <HAL_ADC_Start_DMA+0x180>)
 800270a:	e000      	b.n	800270e <HAL_ADC_Start_DMA+0x26>
 800270c:	4b57      	ldr	r3, [pc, #348]	; (800286c <HAL_ADC_Start_DMA+0x184>)
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fd6a 	bl	80021e8 <LL_ADC_GetMultimode>
 8002714:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fdfb 	bl	8002316 <LL_ADC_REG_IsConversionOngoing>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 8096 	bne.w	8002854 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_ADC_Start_DMA+0x4e>
 8002732:	2302      	movs	r3, #2
 8002734:	e091      	b.n	800285a <HAL_ADC_Start_DMA+0x172>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	2b05      	cmp	r3, #5
 8002748:	d002      	beq.n	8002750 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b09      	cmp	r3, #9
 800274e:	d17a      	bne.n	8002846 <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fceb 	bl	800312c <ADC_Enable>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d16d      	bne.n	800283c <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3a      	ldr	r2, [pc, #232]	; (8002864 <HAL_ADC_Start_DMA+0x17c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_ADC_Start_DMA+0xaa>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a3b      	ldr	r2, [pc, #236]	; (8002870 <HAL_ADC_Start_DMA+0x188>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d002      	beq.n	800278e <HAL_ADC_Start_DMA+0xa6>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	e003      	b.n	8002796 <HAL_ADC_Start_DMA+0xae>
 800278e:	4b39      	ldr	r3, [pc, #228]	; (8002874 <HAL_ADC_Start_DMA+0x18c>)
 8002790:	e001      	b.n	8002796 <HAL_ADC_Start_DMA+0xae>
 8002792:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4293      	cmp	r3, r2
 800279c:	d002      	beq.n	80027a4 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c0:	f023 0206 	bic.w	r2, r3, #6
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	661a      	str	r2, [r3, #96]	; 0x60
 80027c8:	e002      	b.n	80027d0 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d4:	4a28      	ldr	r2, [pc, #160]	; (8002878 <HAL_ADC_Start_DMA+0x190>)
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	4a27      	ldr	r2, [pc, #156]	; (800287c <HAL_ADC_Start_DMA+0x194>)
 80027de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	4a26      	ldr	r2, [pc, #152]	; (8002880 <HAL_ADC_Start_DMA+0x198>)
 80027e6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	221c      	movs	r2, #28
 80027ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0210 	orr.w	r2, r2, #16
 8002806:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	3340      	adds	r3, #64	; 0x40
 8002822:	4619      	mov	r1, r3
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f001 f85c 	bl	80038e4 <HAL_DMA_Start_IT>
 800282c:	4603      	mov	r3, r0
 800282e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fd5a 	bl	80022ee <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800283a:	e00d      	b.n	8002858 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002844:	e008      	b.n	8002858 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002852:	e001      	b.n	8002858 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002854:	2302      	movs	r3, #2
 8002856:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002858:	7dfb      	ldrb	r3, [r7, #23]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	50000100 	.word	0x50000100
 8002868:	50000300 	.word	0x50000300
 800286c:	50000700 	.word	0x50000700
 8002870:	50000500 	.word	0x50000500
 8002874:	50000400 	.word	0x50000400
 8002878:	080031f1 	.word	0x080031f1
 800287c:	080032c9 	.word	0x080032c9
 8002880:	080032e5 	.word	0x080032e5

08002884 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b0b6      	sub	sp, #216	; 0xd8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d102      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x24>
 80028ca:	2302      	movs	r3, #2
 80028cc:	f000 bc13 	b.w	80030f6 <HAL_ADC_ConfigChannel+0x84a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fd1a 	bl	8002316 <LL_ADC_REG_IsConversionOngoing>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 83f3 	bne.w	80030d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f7ff fbfb 	bl	80020f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fd08 	bl	8002316 <LL_ADC_REG_IsConversionOngoing>
 8002906:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fd14 	bl	800233c <LL_ADC_INJ_IsConversionOngoing>
 8002914:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002918:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800291c:	2b00      	cmp	r3, #0
 800291e:	f040 81d9 	bne.w	8002cd4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002922:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 81d4 	bne.w	8002cd4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002934:	d10f      	bne.n	8002956 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	4619      	mov	r1, r3
 8002942:	f7ff fc02 	bl	800214a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fba9 	bl	80020a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002954:	e00e      	b.n	8002974 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6819      	ldr	r1, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	461a      	mov	r2, r3
 8002964:	f7ff fbf1 	bl	800214a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fb99 	bl	80020a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	08db      	lsrs	r3, r3, #3
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b04      	cmp	r3, #4
 8002994:	d022      	beq.n	80029dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6919      	ldr	r1, [r3, #16]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029a6:	f7ff faf3 	bl	8001f90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6919      	ldr	r1, [r3, #16]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f7ff fb3f 	bl	800203a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6919      	ldr	r1, [r3, #16]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	7f1b      	ldrb	r3, [r3, #28]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d102      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x126>
 80029cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d0:	e000      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x128>
 80029d2:	2300      	movs	r3, #0
 80029d4:	461a      	mov	r2, r3
 80029d6:	f7ff fb4b 	bl	8002070 <LL_ADC_SetOffsetSaturation>
 80029da:	e17b      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff faf8 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x15c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff faed 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 80029fe:	4603      	mov	r3, r0
 8002a00:	0e9b      	lsrs	r3, r3, #26
 8002a02:	f003 021f 	and.w	r2, r3, #31
 8002a06:	e01e      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x19a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fae2 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002a36:	2320      	movs	r3, #32
 8002a38:	e004      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002a3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d105      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x1b2>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	0e9b      	lsrs	r3, r3, #26
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	e018      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x1e4>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002a82:	2320      	movs	r3, #32
 8002a84:	e004      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d106      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fab1 	bl	8002004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fa95 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x222>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2101      	movs	r1, #1
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fa8a 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	0e9b      	lsrs	r3, r3, #26
 8002ac8:	f003 021f 	and.w	r2, r3, #31
 8002acc:	e01e      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x260>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fa7f 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002aec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002af0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002af4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002afc:	2320      	movs	r3, #32
 8002afe:	e004      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002b00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d105      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x278>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	e018      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x2aa>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002b48:	2320      	movs	r3, #32
 8002b4a:	e004      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d106      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2101      	movs	r1, #1
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fa4e 	bl	8002004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fa32 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x2e8>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2102      	movs	r1, #2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fa27 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	0e9b      	lsrs	r3, r3, #26
 8002b8e:	f003 021f 	and.w	r2, r3, #31
 8002b92:	e01e      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x326>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2102      	movs	r1, #2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fa1c 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e004      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002bc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d105      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x33e>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0e9b      	lsrs	r3, r3, #26
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	e016      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x36c>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002bfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	e004      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002c0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d106      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2200      	movs	r2, #0
 8002c22:	2102      	movs	r1, #2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff f9ed 	bl	8002004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2103      	movs	r1, #3
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff f9d1 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x3aa>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2103      	movs	r1, #3
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff f9c6 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	0e9b      	lsrs	r3, r3, #26
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	e017      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x3da>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2103      	movs	r1, #3
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff f9bb 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c70:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e003      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x3f2>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	0e9b      	lsrs	r3, r3, #26
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	e011      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x416>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e003      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d106      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2103      	movs	r1, #3
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff f998 	bl	8002004 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff faf5 	bl	80022c8 <LL_ADC_IsEnabled>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f040 813d 	bne.w	8002f60 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f7ff fa54 	bl	80021a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4aa2      	ldr	r2, [pc, #648]	; (8002f88 <HAL_ADC_ConfigChannel+0x6dc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	f040 812e 	bne.w	8002f60 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x480>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	0e9b      	lsrs	r3, r3, #26
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2b09      	cmp	r3, #9
 8002d22:	bf94      	ite	ls
 8002d24:	2301      	movls	r3, #1
 8002d26:	2300      	movhi	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	e019      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x4b4>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002d44:	2320      	movs	r3, #32
 8002d46:	e003      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	2b09      	cmp	r3, #9
 8002d58:	bf94      	ite	ls
 8002d5a:	2301      	movls	r3, #1
 8002d5c:	2300      	movhi	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d079      	beq.n	8002e58 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d107      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x4d4>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	3301      	adds	r3, #1
 8002d78:	069b      	lsls	r3, r3, #26
 8002d7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d7e:	e015      	b.n	8002dac <HAL_ADC_ConfigChannel+0x500>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d90:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002d98:	2320      	movs	r3, #32
 8002d9a:	e003      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	069b      	lsls	r3, r3, #26
 8002da8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x520>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	0e9b      	lsrs	r3, r3, #26
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	e017      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x550>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002de4:	2320      	movs	r3, #32
 8002de6:	e003      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	2101      	movs	r1, #1
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	ea42 0103 	orr.w	r1, r2, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x576>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	0e9b      	lsrs	r3, r3, #26
 8002e12:	3301      	adds	r3, #1
 8002e14:	f003 021f 	and.w	r2, r3, #31
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	051b      	lsls	r3, r3, #20
 8002e20:	e018      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x5a8>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	e003      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e54:	430b      	orrs	r3, r1
 8002e56:	e07e      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x5c8>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	069b      	lsls	r3, r3, #26
 8002e6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e72:	e015      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x5f4>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	e003      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	069b      	lsls	r3, r3, #26
 8002e9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x614>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	2101      	movs	r1, #1
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	e017      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x644>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	61fb      	str	r3, [r7, #28]
  return result;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e003      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	ea42 0103 	orr.w	r1, r2, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10d      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x670>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	0e9b      	lsrs	r3, r3, #26
 8002f06:	3301      	adds	r3, #1
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	3b1e      	subs	r3, #30
 8002f14:	051b      	lsls	r3, r3, #20
 8002f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	e01b      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x6a8>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	613b      	str	r3, [r7, #16]
  return result;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002f34:	2320      	movs	r3, #32
 8002f36:	e003      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f003 021f 	and.w	r2, r3, #31
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b1e      	subs	r3, #30
 8002f4e:	051b      	lsls	r3, r3, #20
 8002f50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f54:	430b      	orrs	r3, r1
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	6892      	ldr	r2, [r2, #8]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f7ff f8f5 	bl	800214a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_ADC_ConfigChannel+0x6e0>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80be 	beq.w	80030ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f76:	d004      	beq.n	8002f82 <HAL_ADC_ConfigChannel+0x6d6>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <HAL_ADC_ConfigChannel+0x6e4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10a      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x6ec>
 8002f82:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <HAL_ADC_ConfigChannel+0x6e8>)
 8002f84:	e009      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x6ee>
 8002f86:	bf00      	nop
 8002f88:	407f0000 	.word	0x407f0000
 8002f8c:	80080000 	.word	0x80080000
 8002f90:	50000100 	.word	0x50000100
 8002f94:	50000300 	.word	0x50000300
 8002f98:	4b59      	ldr	r3, [pc, #356]	; (8003100 <HAL_ADC_ConfigChannel+0x854>)
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe ffea 	bl	8001f74 <LL_ADC_GetCommonPathInternalCh>
 8002fa0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a56      	ldr	r2, [pc, #344]	; (8003104 <HAL_ADC_ConfigChannel+0x858>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_ADC_ConfigChannel+0x70c>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a55      	ldr	r2, [pc, #340]	; (8003108 <HAL_ADC_ConfigChannel+0x85c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d13a      	bne.n	800302e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d134      	bne.n	800302e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fcc:	d005      	beq.n	8002fda <HAL_ADC_ConfigChannel+0x72e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a4e      	ldr	r2, [pc, #312]	; (800310c <HAL_ADC_ConfigChannel+0x860>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	f040 8085 	bne.w	80030e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe2:	d004      	beq.n	8002fee <HAL_ADC_ConfigChannel+0x742>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a49      	ldr	r2, [pc, #292]	; (8003110 <HAL_ADC_ConfigChannel+0x864>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x746>
 8002fee:	4a49      	ldr	r2, [pc, #292]	; (8003114 <HAL_ADC_ConfigChannel+0x868>)
 8002ff0:	e000      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x748>
 8002ff2:	4a43      	ldr	r2, [pc, #268]	; (8003100 <HAL_ADC_ConfigChannel+0x854>)
 8002ff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4610      	mov	r0, r2
 8003000:	f7fe ffa5 	bl	8001f4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003004:	4b44      	ldr	r3, [pc, #272]	; (8003118 <HAL_ADC_ConfigChannel+0x86c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	4a44      	ldr	r2, [pc, #272]	; (800311c <HAL_ADC_ConfigChannel+0x870>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800301e:	e002      	b.n	8003026 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3b01      	subs	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f9      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800302c:	e05a      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a3b      	ldr	r2, [pc, #236]	; (8003120 <HAL_ADC_ConfigChannel+0x874>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d125      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x7d8>
 8003038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800303c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11f      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a31      	ldr	r2, [pc, #196]	; (8003110 <HAL_ADC_ConfigChannel+0x864>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d104      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x7ac>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a34      	ldr	r2, [pc, #208]	; (8003124 <HAL_ADC_ConfigChannel+0x878>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d047      	beq.n	80030e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003060:	d004      	beq.n	800306c <HAL_ADC_ConfigChannel+0x7c0>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2a      	ldr	r2, [pc, #168]	; (8003110 <HAL_ADC_ConfigChannel+0x864>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x7c4>
 800306c:	4a29      	ldr	r2, [pc, #164]	; (8003114 <HAL_ADC_ConfigChannel+0x868>)
 800306e:	e000      	b.n	8003072 <HAL_ADC_ConfigChannel+0x7c6>
 8003070:	4a23      	ldr	r2, [pc, #140]	; (8003100 <HAL_ADC_ConfigChannel+0x854>)
 8003072:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307a:	4619      	mov	r1, r3
 800307c:	4610      	mov	r0, r2
 800307e:	f7fe ff66 	bl	8001f4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003082:	e031      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a27      	ldr	r2, [pc, #156]	; (8003128 <HAL_ADC_ConfigChannel+0x87c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d12d      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800308e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d127      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <HAL_ADC_ConfigChannel+0x864>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ac:	d004      	beq.n	80030b8 <HAL_ADC_ConfigChannel+0x80c>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a17      	ldr	r2, [pc, #92]	; (8003110 <HAL_ADC_ConfigChannel+0x864>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x810>
 80030b8:	4a16      	ldr	r2, [pc, #88]	; (8003114 <HAL_ADC_ConfigChannel+0x868>)
 80030ba:	e000      	b.n	80030be <HAL_ADC_ConfigChannel+0x812>
 80030bc:	4a10      	ldr	r2, [pc, #64]	; (8003100 <HAL_ADC_ConfigChannel+0x854>)
 80030be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f7fe ff40 	bl	8001f4e <LL_ADC_SetCommonPathInternalCh>
 80030ce:	e00c      	b.n	80030ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80030e2:	e002      	b.n	80030ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030e4:	bf00      	nop
 80030e6:	e000      	b.n	80030ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80030f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	37d8      	adds	r7, #216	; 0xd8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	50000700 	.word	0x50000700
 8003104:	c3210000 	.word	0xc3210000
 8003108:	90c00010 	.word	0x90c00010
 800310c:	50000600 	.word	0x50000600
 8003110:	50000100 	.word	0x50000100
 8003114:	50000300 	.word	0x50000300
 8003118:	2000000c 	.word	0x2000000c
 800311c:	053e2d63 	.word	0x053e2d63
 8003120:	c7520000 	.word	0xc7520000
 8003124:	50000500 	.word	0x50000500
 8003128:	cb840000 	.word	0xcb840000

0800312c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff f8c5 	bl	80022c8 <LL_ADC_IsEnabled>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d14d      	bne.n	80031e0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	4b28      	ldr	r3, [pc, #160]	; (80031ec <ADC_Enable+0xc0>)
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	f043 0210 	orr.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e039      	b.n	80031e2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff f894 	bl	80022a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003178:	f7fe fea8 	bl	8001ecc <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800317e:	e028      	b.n	80031d2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff f89f 	bl	80022c8 <LL_ADC_IsEnabled>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d104      	bne.n	800319a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff f883 	bl	80022a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800319a:	f7fe fe97 	bl	8001ecc <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d914      	bls.n	80031d2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d00d      	beq.n	80031d2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	f043 0210 	orr.w	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e007      	b.n	80031e2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d1cf      	bne.n	8003180 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	8000003f 	.word	0x8000003f

080031f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003202:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003206:	2b00      	cmp	r3, #0
 8003208:	d14b      	bne.n	80032a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d021      	beq.n	8003268 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe ff4f 	bl	80020cc <LL_ADC_REG_IsTriggerSourceSWStart>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d032      	beq.n	800329a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d12b      	bne.n	800329a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d11f      	bne.n	800329a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	f043 0201 	orr.w	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	65da      	str	r2, [r3, #92]	; 0x5c
 8003266:	e018      	b.n	800329a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d111      	bne.n	800329a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d105      	bne.n	800329a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f7fe f812 	bl	80012c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032a0:	e00e      	b.n	80032c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f7ff faf2 	bl	8002898 <HAL_ADC_ErrorCallback>
}
 80032b4:	e004      	b.n	80032c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff fad4 	bl	8002884 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003302:	f043 0204 	orr.w	r2, r3, #4
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f7ff fac4 	bl	8002898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <LL_ADC_IsEnabled>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <LL_ADC_IsEnabled+0x18>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <LL_ADC_IsEnabled+0x1a>
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <LL_ADC_REG_IsConversionOngoing>:
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d101      	bne.n	8003356 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b0a1      	sub	sp, #132	; 0x84
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800337e:	2302      	movs	r3, #2
 8003380:	e0e7      	b.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800338a:	2300      	movs	r3, #0
 800338c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800338e:	2300      	movs	r3, #0
 8003390:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339a:	d102      	bne.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800339c:	4b6f      	ldr	r3, [pc, #444]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	e009      	b.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6e      	ldr	r2, [pc, #440]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d102      	bne.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80033ac:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	e001      	b.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0be      	b.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ffb1 	bl	800333e <LL_ADC_REG_IsConversionOngoing>
 80033dc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff ffab 	bl	800333e <LL_ADC_REG_IsConversionOngoing>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 80a0 	bne.w	8003530 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 809c 	bne.w	8003530 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003400:	d004      	beq.n	800340c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a55      	ldr	r2, [pc, #340]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800340c:	4b56      	ldr	r3, [pc, #344]	; (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800340e:	e000      	b.n	8003412 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003410:	4b56      	ldr	r3, [pc, #344]	; (800356c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003412:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d04b      	beq.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800341c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800342e:	035b      	lsls	r3, r3, #13
 8003430:	430b      	orrs	r3, r1
 8003432:	431a      	orrs	r2, r3
 8003434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003436:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003440:	d004      	beq.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a45      	ldr	r2, [pc, #276]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d10f      	bne.n	800346c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800344c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003450:	f7ff ff62 	bl	8003318 <LL_ADC_IsEnabled>
 8003454:	4604      	mov	r4, r0
 8003456:	4841      	ldr	r0, [pc, #260]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003458:	f7ff ff5e 	bl	8003318 <LL_ADC_IsEnabled>
 800345c:	4603      	mov	r3, r0
 800345e:	4323      	orrs	r3, r4
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e012      	b.n	8003492 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800346c:	483c      	ldr	r0, [pc, #240]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800346e:	f7ff ff53 	bl	8003318 <LL_ADC_IsEnabled>
 8003472:	4604      	mov	r4, r0
 8003474:	483b      	ldr	r0, [pc, #236]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003476:	f7ff ff4f 	bl	8003318 <LL_ADC_IsEnabled>
 800347a:	4603      	mov	r3, r0
 800347c:	431c      	orrs	r4, r3
 800347e:	483c      	ldr	r0, [pc, #240]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003480:	f7ff ff4a 	bl	8003318 <LL_ADC_IsEnabled>
 8003484:	4603      	mov	r3, r0
 8003486:	4323      	orrs	r3, r4
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d056      	beq.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800349e:	f023 030f 	bic.w	r3, r3, #15
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	6811      	ldr	r1, [r2, #0]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	6892      	ldr	r2, [r2, #8]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	431a      	orrs	r2, r3
 80034ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034b2:	e047      	b.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c8:	d004      	beq.n	80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a23      	ldr	r2, [pc, #140]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10f      	bne.n	80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80034d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034d8:	f7ff ff1e 	bl	8003318 <LL_ADC_IsEnabled>
 80034dc:	4604      	mov	r4, r0
 80034de:	481f      	ldr	r0, [pc, #124]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034e0:	f7ff ff1a 	bl	8003318 <LL_ADC_IsEnabled>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4323      	orrs	r3, r4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	e012      	b.n	800351a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80034f4:	481a      	ldr	r0, [pc, #104]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034f6:	f7ff ff0f 	bl	8003318 <LL_ADC_IsEnabled>
 80034fa:	4604      	mov	r4, r0
 80034fc:	4819      	ldr	r0, [pc, #100]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034fe:	f7ff ff0b 	bl	8003318 <LL_ADC_IsEnabled>
 8003502:	4603      	mov	r3, r0
 8003504:	431c      	orrs	r4, r3
 8003506:	481a      	ldr	r0, [pc, #104]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003508:	f7ff ff06 	bl	8003318 <LL_ADC_IsEnabled>
 800350c:	4603      	mov	r3, r0
 800350e:	4323      	orrs	r3, r4
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf0c      	ite	eq
 8003514:	2301      	moveq	r3, #1
 8003516:	2300      	movne	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d012      	beq.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800351e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003526:	f023 030f 	bic.w	r3, r3, #15
 800352a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800352c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800352e:	e009      	b.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003542:	e000      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003544:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800354e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003552:	4618      	mov	r0, r3
 8003554:	3784      	adds	r7, #132	; 0x84
 8003556:	46bd      	mov	sp, r7
 8003558:	bd90      	pop	{r4, r7, pc}
 800355a:	bf00      	nop
 800355c:	50000100 	.word	0x50000100
 8003560:	50000400 	.word	0x50000400
 8003564:	50000500 	.word	0x50000500
 8003568:	50000300 	.word	0x50000300
 800356c:	50000700 	.word	0x50000700
 8003570:	50000600 	.word	0x50000600

08003574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800359c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a6:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	60d3      	str	r3, [r2, #12]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <__NVIC_GetPriorityGrouping+0x18>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0307 	and.w	r3, r3, #7
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db0b      	blt.n	8003602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4907      	ldr	r1, [pc, #28]	; (8003610 <__NVIC_EnableIRQ+0x38>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2001      	movs	r0, #1
 80035fa:	fa00 f202 	lsl.w	r2, r0, r2
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000e100 	.word	0xe000e100

08003614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	; (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	; (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f1c3 0307 	rsb	r3, r3, #7
 8003682:	2b04      	cmp	r3, #4
 8003684:	bf28      	it	cs
 8003686:	2304      	movcs	r3, #4
 8003688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3304      	adds	r3, #4
 800368e:	2b06      	cmp	r3, #6
 8003690:	d902      	bls.n	8003698 <NVIC_EncodePriority+0x30>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3b03      	subs	r3, #3
 8003696:	e000      	b.n	800369a <NVIC_EncodePriority+0x32>
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	f04f 32ff 	mov.w	r2, #4294967295
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	401a      	ands	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b0:	f04f 31ff 	mov.w	r1, #4294967295
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43d9      	mvns	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	4313      	orrs	r3, r2
         );
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e0:	d301      	bcc.n	80036e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e2:	2301      	movs	r3, #1
 80036e4:	e00f      	b.n	8003706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e6:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <SysTick_Config+0x40>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ee:	210f      	movs	r1, #15
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	f7ff ff8e 	bl	8003614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <SysTick_Config+0x40>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <SysTick_Config+0x40>)
 8003700:	2207      	movs	r2, #7
 8003702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	e000e010 	.word	0xe000e010

08003714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ff29 	bl	8003574 <__NVIC_SetPriorityGrouping>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003738:	f7ff ff40 	bl	80035bc <__NVIC_GetPriorityGrouping>
 800373c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f7ff ff90 	bl	8003668 <NVIC_EncodePriority>
 8003748:	4602      	mov	r2, r0
 800374a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff5f 	bl	8003614 <__NVIC_SetPriority>
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff33 	bl	80035d8 <__NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffa4 	bl	80036d0 <SysTick_Config>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e08d      	b.n	80038c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4b47      	ldr	r3, [pc, #284]	; (80038cc <HAL_DMA_Init+0x138>)
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d80f      	bhi.n	80037d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b45      	ldr	r3, [pc, #276]	; (80038d0 <HAL_DMA_Init+0x13c>)
 80037ba:	4413      	add	r3, r2
 80037bc:	4a45      	ldr	r2, [pc, #276]	; (80038d4 <HAL_DMA_Init+0x140>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	009a      	lsls	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a42      	ldr	r2, [pc, #264]	; (80038d8 <HAL_DMA_Init+0x144>)
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40
 80037d0:	e00e      	b.n	80037f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b40      	ldr	r3, [pc, #256]	; (80038dc <HAL_DMA_Init+0x148>)
 80037da:	4413      	add	r3, r2
 80037dc:	4a3d      	ldr	r2, [pc, #244]	; (80038d4 <HAL_DMA_Init+0x140>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	091b      	lsrs	r3, r3, #4
 80037e4:	009a      	lsls	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a3c      	ldr	r2, [pc, #240]	; (80038e0 <HAL_DMA_Init+0x14c>)
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9b6 	bl	8003bb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003850:	d102      	bne.n	8003858 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800386c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d010      	beq.n	8003898 <HAL_DMA_Init+0x104>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b04      	cmp	r3, #4
 800387c:	d80c      	bhi.n	8003898 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f9d6 	bl	8003c30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	e008      	b.n	80038aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40020407 	.word	0x40020407
 80038d0:	bffdfff8 	.word	0xbffdfff8
 80038d4:	cccccccd 	.word	0xcccccccd
 80038d8:	40020000 	.word	0x40020000
 80038dc:	bffdfbf8 	.word	0xbffdfbf8
 80038e0:	40020400 	.word	0x40020400

080038e4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_DMA_Start_IT+0x20>
 8003900:	2302      	movs	r3, #2
 8003902:	e066      	b.n	80039d2 <HAL_DMA_Start_IT+0xee>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d155      	bne.n	80039c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f8fb 	bl	8003b38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 020e 	orr.w	r2, r2, #14
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e00f      	b.n	800397c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0204 	bic.w	r2, r2, #4
 800396a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 020a 	orr.w	r2, r2, #10
 800397a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003998:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	e005      	b.n	80039d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
 80039ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2204      	movs	r2, #4
 80039fc:	409a      	lsls	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d026      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x7a>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d021      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d107      	bne.n	8003a2e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0204 	bic.w	r2, r2, #4
 8003a2c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f003 021f 	and.w	r2, r3, #31
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2104      	movs	r1, #4
 8003a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a40:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d071      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a52:	e06c      	b.n	8003b2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02e      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d029      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 020a 	bic.w	r2, r2, #10
 8003a8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aaa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d038      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ac4:	e033      	b.n	8003b2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	2208      	movs	r2, #8
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d02a      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d025      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 020e 	bic.w	r2, r2, #14
 8003af2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	2101      	movs	r1, #1
 8003b02:	fa01 f202 	lsl.w	r2, r1, r2
 8003b06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d004      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b2e:	bf00      	nop
 8003b30:	bf00      	nop
}
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b4e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b60:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	f003 021f 	and.w	r2, r3, #31
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2101      	movs	r1, #1
 8003b70:	fa01 f202 	lsl.w	r2, r1, r2
 8003b74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d108      	bne.n	8003b98 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b96:	e007      	b.n	8003ba8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	60da      	str	r2, [r3, #12]
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d802      	bhi.n	8003bce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003bc8:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e001      	b.n	8003bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003bce:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bd0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	3b08      	subs	r3, #8
 8003bde:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003be0:	fba2 2303 	umull	r2, r3, r2, r3
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bec:	089b      	lsrs	r3, r3, #2
 8003bee:	009a      	lsls	r2, r3, #2
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a0b      	ldr	r2, [pc, #44]	; (8003c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bfe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2201      	movs	r2, #1
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40020407 	.word	0x40020407
 8003c20:	40020800 	.word	0x40020800
 8003c24:	40020820 	.word	0x40020820
 8003c28:	cccccccd 	.word	0xcccccccd
 8003c2c:	40020880 	.word	0x40020880

08003c30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	461a      	mov	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c52:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	1000823f 	.word	0x1000823f
 8003c74:	40020940 	.word	0x40020940

08003c78 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e147      	b.n	8003f1a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fd fee4 	bl	8001a6c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0210 	bic.w	r2, r2, #16
 8003cb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cb4:	f7fe f90a 	bl	8001ecc <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003cba:	e012      	b.n	8003ce2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003cbc:	f7fe f906 	bl	8001ecc <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b0a      	cmp	r3, #10
 8003cc8:	d90b      	bls.n	8003ce2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2203      	movs	r2, #3
 8003cda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e11b      	b.n	8003f1a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d0e5      	beq.n	8003cbc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d00:	f7fe f8e4 	bl	8001ecc <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d06:	e012      	b.n	8003d2e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d08:	f7fe f8e0 	bl	8001ecc <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b0a      	cmp	r3, #10
 8003d14:	d90b      	bls.n	8003d2e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1a:	f043 0201 	orr.w	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2203      	movs	r2, #3
 8003d26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e0f5      	b.n	8003f1a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0e5      	beq.n	8003d08 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0202 	orr.w	r2, r2, #2
 8003d4a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a74      	ldr	r2, [pc, #464]	; (8003f24 <HAL_FDCAN_Init+0x2ac>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d103      	bne.n	8003d5e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003d56:	4a74      	ldr	r2, [pc, #464]	; (8003f28 <HAL_FDCAN_Init+0x2b0>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	7c1b      	ldrb	r3, [r3, #16]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d108      	bne.n	8003d78 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699a      	ldr	r2, [r3, #24]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d74:	619a      	str	r2, [r3, #24]
 8003d76:	e007      	b.n	8003d88 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d86:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	7c5b      	ldrb	r3, [r3, #17]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d108      	bne.n	8003da2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d9e:	619a      	str	r2, [r3, #24]
 8003da0:	e007      	b.n	8003db2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699a      	ldr	r2, [r3, #24]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003db0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7c9b      	ldrb	r3, [r3, #18]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dc8:	619a      	str	r2, [r3, #24]
 8003dca:	e007      	b.n	8003ddc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dda:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699a      	ldr	r2, [r3, #24]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003e00:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0210 	bic.w	r2, r2, #16
 8003e10:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d108      	bne.n	8003e2c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699a      	ldr	r2, [r3, #24]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0204 	orr.w	r2, r2, #4
 8003e28:	619a      	str	r2, [r3, #24]
 8003e2a:	e02c      	b.n	8003e86 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d028      	beq.n	8003e86 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d01c      	beq.n	8003e76 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e4a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0210 	orr.w	r2, r2, #16
 8003e5a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d110      	bne.n	8003e86 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0220 	orr.w	r2, r2, #32
 8003e72:	619a      	str	r2, [r3, #24]
 8003e74:	e007      	b.n	8003e86 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0220 	orr.w	r2, r2, #32
 8003e84:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e96:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e9e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003eae:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003eb0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eba:	d115      	bne.n	8003ee8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003eca:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003ed4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	3b01      	subs	r3, #1
 8003ede:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003ee4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ee6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fb96 	bl	8004630 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40006400 	.word	0x40006400
 8003f28:	40006500 	.word	0x40006500

08003f2c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f3c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d002      	beq.n	8003f4a <HAL_FDCAN_ConfigFilter+0x1e>
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d13d      	bne.n	8003fc6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d119      	bne.n	8003f86 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f5e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003f66:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	e01d      	b.n	8003fc2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	075a      	lsls	r2, r3, #29
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	079a      	lsls	r2, r3, #30
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e006      	b.n	8003fd4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fca:	f043 0202 	orr.w	r2, r3, #2
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d116      	bne.n	8004028 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004002:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	011a      	lsls	r2, r3, #4
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	431a      	orrs	r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	431a      	orrs	r2, r3
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	431a      	orrs	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e006      	b.n	8004036 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
  }
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d110      	bne.n	8004078 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699a      	ldr	r2, [r3, #24]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e006      	b.n	8004086 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407c:	f043 0204 	orr.w	r2, r3, #4
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b086      	sub	sp, #24
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d12c      	bne.n	8004104 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80040b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e023      	b.n	8004112 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80040d2:	0c1b      	lsrs	r3, r3, #16
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fb11 	bl	8004708 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2101      	movs	r1, #1
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	fa01 f202 	lsl.w	r2, r1, r2
 80040f2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80040f6:	2201      	movs	r2, #1
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	409a      	lsls	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	e006      	b.n	8004112 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004108:	f043 0208 	orr.w	r2, r3, #8
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800411c:	b480      	push	{r7}
 800411e:	b08b      	sub	sp, #44	; 0x2c
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004130:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8004132:	7efb      	ldrb	r3, [r7, #27]
 8004134:	2b02      	cmp	r3, #2
 8004136:	f040 80bc 	bne.w	80042b2 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b40      	cmp	r3, #64	; 0x40
 800413e:	d121      	bne.n	8004184 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	2b00      	cmp	r3, #0
 800414e:	d107      	bne.n	8004160 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004154:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0af      	b.n	80042c0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	0a1b      	lsrs	r3, r3, #8
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4413      	add	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	440b      	add	r3, r1
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
 8004182:	e020      	b.n	80041c6 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	2b00      	cmp	r3, #0
 8004192:	d107      	bne.n	80041a4 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004198:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e08d      	b.n	80042c0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	440b      	add	r3, r1
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d107      	bne.n	80041ea <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	0c9b      	lsrs	r3, r3, #18
 80041e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e005      	b.n	80041f6 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	3304      	adds	r3, #4
 8004212:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	0e1b      	lsrs	r3, r3, #24
 8004248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	0fda      	lsrs	r2, r3, #31
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	3304      	adds	r3, #4
 800425e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004264:	2300      	movs	r3, #0
 8004266:	623b      	str	r3, [r7, #32]
 8004268:	e00a      	b.n	8004280 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	441a      	add	r2, r3
 8004270:	6839      	ldr	r1, [r7, #0]
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	440b      	add	r3, r1
 8004276:	7812      	ldrb	r2, [r2, #0]
 8004278:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	3301      	adds	r3, #1
 800427e:	623b      	str	r3, [r7, #32]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	4a11      	ldr	r2, [pc, #68]	; (80042cc <HAL_FDCAN_GetRxMessage+0x1b0>)
 8004288:	5cd3      	ldrb	r3, [r2, r3]
 800428a:	461a      	mov	r2, r3
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	4293      	cmp	r3, r2
 8004290:	d3eb      	bcc.n	800426a <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d105      	bne.n	80042a4 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80042a2:	e004      	b.n	80042ae <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e006      	b.n	80042c0 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b6:	f043 0208 	orr.w	r2, r3, #8
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
  }
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	372c      	adds	r7, #44	; 0x2c
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	08008168 	.word	0x08008168

080042d0 <HAL_FDCAN_GetProtocolStatus>:
  *         the configuration information for the specified FDCAN.
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(FDCAN_HandleTypeDef *hfdcan, FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f003 0207 	and.w	r2, r3, #7
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	f003 0207 	and.w	r2, r3, #7
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0218 	and.w	r2, r3, #24
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	f003 0201 	and.w	r2, r3, #1
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	099b      	lsrs	r3, r3, #6
 8004312:	f003 0201 	and.w	r2, r3, #1
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	09db      	lsrs	r3, r3, #7
 800431e:	f003 0201 	and.w	r2, r3, #1
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	0adb      	lsrs	r3, r3, #11
 800432a:	f003 0201 	and.w	r2, r3, #1
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	0b1b      	lsrs	r3, r3, #12
 8004336:	f003 0201 	and.w	r2, r3, #1
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	0b5b      	lsrs	r3, r3, #13
 8004342:	f003 0201 	and.w	r2, r3, #1
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	0b9b      	lsrs	r3, r3, #14
 800434e:	f003 0201 	and.w	r2, r3, #1
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_FDCAN_GetErrorCounters>:
  *         the configuration information for the specified FDCAN.
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(FDCAN_HandleTypeDef *hfdcan, FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	0bdb      	lsrs	r3, r3, #15
 800439a:	f003 0201 	and.w	r2, r3, #1
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d107      	bne.n	80043da <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	e006      	b.n	80043e8 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 80043e8:	68fb      	ldr	r3, [r7, #12]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_FDCAN_IsRestrictedOperationMode>:
  * @retval Status
  *          - 0 : Normal FDCAN operation.
  *          - 1 : Restricted Operation Mode active.
  */
uint32_t HAL_FDCAN_IsRestrictedOperationMode(FDCAN_HandleTypeDef *hfdcan)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  uint32_t OperationMode;

  /* Get Operation Mode */
  OperationMode = ((hfdcan->Instance->CCCR & FDCAN_CCCR_ASM) >> FDCAN_CCCR_ASM_Pos);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	60fb      	str	r3, [r7, #12]

  return OperationMode;
 800440c:	68fb      	ldr	r3, [r7, #12]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <HAL_FDCAN_ExitRestrictedOperationMode>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ExitRestrictedOperationMode(FDCAN_HandleTypeDef *hfdcan)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004428:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d002      	beq.n	8004436 <HAL_FDCAN_ExitRestrictedOperationMode+0x1c>
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d109      	bne.n	800444a <HAL_FDCAN_ExitRestrictedOperationMode+0x30>
  {
    /* Exit Restricted Operation mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699a      	ldr	r2, [r3, #24]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0204 	bic.w	r2, r2, #4
 8004444:	619a      	str	r2, [r3, #24]

    /* Return function status */
    return HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e006      	b.n	8004458 <HAL_FDCAN_ExitRestrictedOperationMode+0x3e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444e:	f043 0202 	orr.w	r2, r3, #2
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
  }
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004476:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d003      	beq.n	8004486 <HAL_FDCAN_ActivateNotification+0x22>
 800447e:	7dfb      	ldrb	r3, [r7, #23]
 8004480:	2b02      	cmp	r3, #2
 8004482:	f040 80c8 	bne.w	8004616 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d03b      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d031      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d004      	beq.n	80044ca <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d027      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01d      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d013      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00c      	beq.n	800452a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d107      	bne.n	800452a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	2b00      	cmp	r3, #0
 8004532:	d004      	beq.n	800453e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d13b      	bne.n	80045b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d131      	bne.n	80045b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d127      	bne.n	80045b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d11d      	bne.n	80045b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	d113      	bne.n	80045b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00c      	beq.n	80045c6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0202 	orr.w	r2, r2, #2
 80045c4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	430a      	orrs	r2, r1
 80045e0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	430a      	orrs	r2, r1
 8004610:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e006      	b.n	8004624 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461a:	f043 0202 	orr.w	r2, r3, #2
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
  }
}
 8004624:	4618      	mov	r0, r3
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004638:	4b30      	ldr	r3, [pc, #192]	; (80046fc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800463a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2f      	ldr	r2, [pc, #188]	; (8004700 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d103      	bne.n	800464e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800464c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2c      	ldr	r2, [pc, #176]	; (8004704 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d103      	bne.n	8004660 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800465e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800466e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004676:	041a      	lsls	r2, r3, #16
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004694:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	061a      	lsls	r2, r3, #24
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e005      	b.n	80046e2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3304      	adds	r3, #4
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d3f3      	bcc.n	80046d6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80046ee:	bf00      	nop
 80046f0:	bf00      	nop
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	4000a400 	.word	0x4000a400
 8004700:	40006800 	.word	0x40006800
 8004704:	40006c00 	.word	0x40006c00

08004708 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004726:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800472e:	4313      	orrs	r3, r2
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	e00a      	b.n	800474a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800473c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004742:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004748:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004754:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800475a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004760:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	440b      	add	r3, r1
 800477a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	3304      	adds	r3, #4
 8004786:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	3304      	adds	r3, #4
 8004792:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e020      	b.n	80047dc <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	3303      	adds	r3, #3
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	3302      	adds	r3, #2
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	440b      	add	r3, r1
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80047b2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	3301      	adds	r3, #1
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	440b      	add	r3, r1
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80047c0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	440a      	add	r2, r1
 80047c8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80047ca:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	3304      	adds	r3, #4
 80047d4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	3304      	adds	r3, #4
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	4a06      	ldr	r2, [pc, #24]	; (80047fc <FDCAN_CopyMessageToRAM+0xf4>)
 80047e4:	5cd3      	ldrb	r3, [r2, r3]
 80047e6:	461a      	mov	r2, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d3d5      	bcc.n	800479a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80047ee:	bf00      	nop
 80047f0:	bf00      	nop
 80047f2:	3724      	adds	r7, #36	; 0x24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	08008168 	.word	0x08008168

08004800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800480e:	e15a      	b.n	8004ac6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	2101      	movs	r1, #1
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	4013      	ands	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 814c 	beq.w	8004ac0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d00b      	beq.n	8004848 <HAL_GPIO_Init+0x48>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d007      	beq.n	8004848 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800483c:	2b11      	cmp	r3, #17
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b12      	cmp	r3, #18
 8004846:	d130      	bne.n	80048aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	2203      	movs	r2, #3
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4013      	ands	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800487e:	2201      	movs	r2, #1
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 0201 	and.w	r2, r3, #1
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	2203      	movs	r2, #3
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_Init+0xea>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b12      	cmp	r3, #18
 80048e8:	d123      	bne.n	8004932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	08da      	lsrs	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3208      	adds	r2, #8
 80048f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	220f      	movs	r2, #15
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	08da      	lsrs	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3208      	adds	r2, #8
 800492c:	6939      	ldr	r1, [r7, #16]
 800492e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	2203      	movs	r2, #3
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4013      	ands	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 0203 	and.w	r2, r3, #3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 80a6 	beq.w	8004ac0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004974:	4b5b      	ldr	r3, [pc, #364]	; (8004ae4 <HAL_GPIO_Init+0x2e4>)
 8004976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004978:	4a5a      	ldr	r2, [pc, #360]	; (8004ae4 <HAL_GPIO_Init+0x2e4>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6613      	str	r3, [r2, #96]	; 0x60
 8004980:	4b58      	ldr	r3, [pc, #352]	; (8004ae4 <HAL_GPIO_Init+0x2e4>)
 8004982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800498c:	4a56      	ldr	r2, [pc, #344]	; (8004ae8 <HAL_GPIO_Init+0x2e8>)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	089b      	lsrs	r3, r3, #2
 8004992:	3302      	adds	r3, #2
 8004994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004998:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	220f      	movs	r2, #15
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	43db      	mvns	r3, r3
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4013      	ands	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049b6:	d01f      	beq.n	80049f8 <HAL_GPIO_Init+0x1f8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a4c      	ldr	r2, [pc, #304]	; (8004aec <HAL_GPIO_Init+0x2ec>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d019      	beq.n	80049f4 <HAL_GPIO_Init+0x1f4>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a4b      	ldr	r2, [pc, #300]	; (8004af0 <HAL_GPIO_Init+0x2f0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_GPIO_Init+0x1f0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a4a      	ldr	r2, [pc, #296]	; (8004af4 <HAL_GPIO_Init+0x2f4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00d      	beq.n	80049ec <HAL_GPIO_Init+0x1ec>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a49      	ldr	r2, [pc, #292]	; (8004af8 <HAL_GPIO_Init+0x2f8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <HAL_GPIO_Init+0x1e8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a48      	ldr	r2, [pc, #288]	; (8004afc <HAL_GPIO_Init+0x2fc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d101      	bne.n	80049e4 <HAL_GPIO_Init+0x1e4>
 80049e0:	2305      	movs	r3, #5
 80049e2:	e00a      	b.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049e4:	2306      	movs	r3, #6
 80049e6:	e008      	b.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049e8:	2304      	movs	r3, #4
 80049ea:	e006      	b.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049ec:	2303      	movs	r3, #3
 80049ee:	e004      	b.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e002      	b.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049f8:	2300      	movs	r3, #0
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	f002 0203 	and.w	r2, r2, #3
 8004a00:	0092      	lsls	r2, r2, #2
 8004a02:	4093      	lsls	r3, r2
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a0a:	4937      	ldr	r1, [pc, #220]	; (8004ae8 <HAL_GPIO_Init+0x2e8>)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	089b      	lsrs	r3, r3, #2
 8004a10:	3302      	adds	r3, #2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a18:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4013      	ands	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a3c:	4a30      	ldr	r2, [pc, #192]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004a42:	4b2f      	ldr	r3, [pc, #188]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a66:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a6c:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a90:	4a1b      	ldr	r2, [pc, #108]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a96:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004aba:	4a11      	ldr	r2, [pc, #68]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f47f ae9d 	bne.w	8004810 <HAL_GPIO_Init+0x10>
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	48000400 	.word	0x48000400
 8004af0:	48000800 	.word	0x48000800
 8004af4:	48000c00 	.word	0x48000c00
 8004af8:	48001000 	.word	0x48001000
 8004afc:	48001400 	.word	0x48001400
 8004b00:	40010400 	.word	0x40010400

08004b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	807b      	strh	r3, [r7, #2]
 8004b10:	4613      	mov	r3, r2
 8004b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b14:	787b      	ldrb	r3, [r7, #1]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b1a:	887a      	ldrh	r2, [r7, #2]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b20:	e002      	b.n	8004b28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b22:	887a      	ldrh	r2, [r7, #2]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e081      	b.n	8004c4a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fc ffca 	bl	8001af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2224      	movs	r2, #36	; 0x24
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d107      	bne.n	8004bae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	e006      	b.n	8004bbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d104      	bne.n	8004bce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bf0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	ea42 0103 	orr.w	r1, r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	021a      	lsls	r2, r3, #8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69d9      	ldr	r1, [r3, #28]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1a      	ldr	r2, [r3, #32]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	4611      	mov	r1, r2
 8004c60:	461a      	mov	r2, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	817b      	strh	r3, [r7, #10]
 8004c66:	460b      	mov	r3, r1
 8004c68:	813b      	strh	r3, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	f040 80f9 	bne.w	8004e6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_I2C_Mem_Write+0x34>
 8004c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0ed      	b.n	8004e70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_I2C_Mem_Write+0x4e>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e0e6      	b.n	8004e70 <HAL_I2C_Mem_Write+0x21c>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004caa:	f7fd f90f 	bl	8001ecc <HAL_GetTick>
 8004cae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	2319      	movs	r3, #25
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fac3 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0d1      	b.n	8004e70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2221      	movs	r2, #33	; 0x21
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2240      	movs	r2, #64	; 0x40
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a3a      	ldr	r2, [r7, #32]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cf4:	88f8      	ldrh	r0, [r7, #6]
 8004cf6:	893a      	ldrh	r2, [r7, #8]
 8004cf8:	8979      	ldrh	r1, [r7, #10]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	4603      	mov	r3, r0
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f9d3 	bl	80050b0 <I2C_RequestMemoryWrite>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0a9      	b.n	8004e70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2bff      	cmp	r3, #255	; 0xff
 8004d24:	d90e      	bls.n	8004d44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	22ff      	movs	r2, #255	; 0xff
 8004d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	8979      	ldrh	r1, [r7, #10]
 8004d34:	2300      	movs	r3, #0
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 fba5 	bl	800548c <I2C_TransferConfig>
 8004d42:	e00f      	b.n	8004d64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	8979      	ldrh	r1, [r7, #10]
 8004d56:	2300      	movs	r3, #0
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fb94 	bl	800548c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 faad 	bl	80052c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e07b      	b.n	8004e70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d034      	beq.n	8004e1c <HAL_I2C_Mem_Write+0x1c8>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d130      	bne.n	8004e1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2180      	movs	r1, #128	; 0x80
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 fa3f 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e04d      	b.n	8004e70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2bff      	cmp	r3, #255	; 0xff
 8004ddc:	d90e      	bls.n	8004dfc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	22ff      	movs	r2, #255	; 0xff
 8004de2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	8979      	ldrh	r1, [r7, #10]
 8004dec:	2300      	movs	r3, #0
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fb49 	bl	800548c <I2C_TransferConfig>
 8004dfa:	e00f      	b.n	8004e1c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	8979      	ldrh	r1, [r7, #10]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 fb38 	bl	800548c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d19e      	bne.n	8004d64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fa8c 	bl	8005348 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e01a      	b.n	8004e70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6859      	ldr	r1, [r3, #4]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <HAL_I2C_Mem_Write+0x224>)
 8004e4e:	400b      	ands	r3, r1
 8004e50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e000      	b.n	8004e70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e6e:	2302      	movs	r3, #2
  }
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	fe00e800 	.word	0xfe00e800

08004e7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	4608      	mov	r0, r1
 8004e86:	4611      	mov	r1, r2
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	817b      	strh	r3, [r7, #10]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	813b      	strh	r3, [r7, #8]
 8004e92:	4613      	mov	r3, r2
 8004e94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	f040 80fd 	bne.w	800509e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_I2C_Mem_Read+0x34>
 8004eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0f1      	b.n	80050a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_I2C_Mem_Read+0x4e>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e0ea      	b.n	80050a0 <HAL_I2C_Mem_Read+0x224>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ed2:	f7fc fffb 	bl	8001ecc <HAL_GetTick>
 8004ed6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	2319      	movs	r3, #25
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f9af 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0d5      	b.n	80050a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2222      	movs	r2, #34	; 0x22
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2240      	movs	r2, #64	; 0x40
 8004f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f1c:	88f8      	ldrh	r0, [r7, #6]
 8004f1e:	893a      	ldrh	r2, [r7, #8]
 8004f20:	8979      	ldrh	r1, [r7, #10]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f913 	bl	8005158 <I2C_RequestMemoryRead>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0ad      	b.n	80050a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2bff      	cmp	r3, #255	; 0xff
 8004f4c:	d90e      	bls.n	8004f6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	22ff      	movs	r2, #255	; 0xff
 8004f52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	8979      	ldrh	r1, [r7, #10]
 8004f5c:	4b52      	ldr	r3, [pc, #328]	; (80050a8 <HAL_I2C_Mem_Read+0x22c>)
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 fa91 	bl	800548c <I2C_TransferConfig>
 8004f6a:	e00f      	b.n	8004f8c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	8979      	ldrh	r1, [r7, #10]
 8004f7e:	4b4a      	ldr	r3, [pc, #296]	; (80050a8 <HAL_I2C_Mem_Read+0x22c>)
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 fa80 	bl	800548c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	2200      	movs	r2, #0
 8004f94:	2104      	movs	r1, #4
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f956 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e07c      	b.n	80050a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d034      	beq.n	800504c <HAL_I2C_Mem_Read+0x1d0>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d130      	bne.n	800504c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f927 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e04d      	b.n	80050a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	2bff      	cmp	r3, #255	; 0xff
 800500c:	d90e      	bls.n	800502c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	22ff      	movs	r2, #255	; 0xff
 8005012:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005018:	b2da      	uxtb	r2, r3
 800501a:	8979      	ldrh	r1, [r7, #10]
 800501c:	2300      	movs	r3, #0
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 fa31 	bl	800548c <I2C_TransferConfig>
 800502a:	e00f      	b.n	800504c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503a:	b2da      	uxtb	r2, r3
 800503c:	8979      	ldrh	r1, [r7, #10]
 800503e:	2300      	movs	r3, #0
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fa20 	bl	800548c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d19a      	bne.n	8004f8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f974 	bl	8005348 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e01a      	b.n	80050a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2220      	movs	r2, #32
 8005070:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6859      	ldr	r1, [r3, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <HAL_I2C_Mem_Read+0x230>)
 800507e:	400b      	ands	r3, r1
 8005080:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	e000      	b.n	80050a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	80002400 	.word	0x80002400
 80050ac:	fe00e800 	.word	0xfe00e800

080050b0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	4608      	mov	r0, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	461a      	mov	r2, r3
 80050be:	4603      	mov	r3, r0
 80050c0:	817b      	strh	r3, [r7, #10]
 80050c2:	460b      	mov	r3, r1
 80050c4:	813b      	strh	r3, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	8979      	ldrh	r1, [r7, #10]
 80050d0:	4b20      	ldr	r3, [pc, #128]	; (8005154 <I2C_RequestMemoryWrite+0xa4>)
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f9d7 	bl	800548c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	69b9      	ldr	r1, [r7, #24]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f8f0 	bl	80052c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e02c      	b.n	800514c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d105      	bne.n	8005104 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050f8:	893b      	ldrh	r3, [r7, #8]
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	629a      	str	r2, [r3, #40]	; 0x28
 8005102:	e015      	b.n	8005130 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005104:	893b      	ldrh	r3, [r7, #8]
 8005106:	0a1b      	lsrs	r3, r3, #8
 8005108:	b29b      	uxth	r3, r3
 800510a:	b2da      	uxtb	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	69b9      	ldr	r1, [r7, #24]
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f8d6 	bl	80052c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e012      	b.n	800514c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005126:	893b      	ldrh	r3, [r7, #8]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2200      	movs	r2, #0
 8005138:	2180      	movs	r1, #128	; 0x80
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f884 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	80002000 	.word	0x80002000

08005158 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af02      	add	r7, sp, #8
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	4608      	mov	r0, r1
 8005162:	4611      	mov	r1, r2
 8005164:	461a      	mov	r2, r3
 8005166:	4603      	mov	r3, r0
 8005168:	817b      	strh	r3, [r7, #10]
 800516a:	460b      	mov	r3, r1
 800516c:	813b      	strh	r3, [r7, #8]
 800516e:	4613      	mov	r3, r2
 8005170:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	b2da      	uxtb	r2, r3
 8005176:	8979      	ldrh	r1, [r7, #10]
 8005178:	4b20      	ldr	r3, [pc, #128]	; (80051fc <I2C_RequestMemoryRead+0xa4>)
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	2300      	movs	r3, #0
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f984 	bl	800548c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	69b9      	ldr	r1, [r7, #24]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f89d 	bl	80052c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e02c      	b.n	80051f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d105      	bne.n	80051aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800519e:	893b      	ldrh	r3, [r7, #8]
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
 80051a8:	e015      	b.n	80051d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051aa:	893b      	ldrh	r3, [r7, #8]
 80051ac:	0a1b      	lsrs	r3, r3, #8
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	69b9      	ldr	r1, [r7, #24]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f883 	bl	80052c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e012      	b.n	80051f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051cc:	893b      	ldrh	r3, [r7, #8]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2200      	movs	r2, #0
 80051de:	2140      	movs	r1, #64	; 0x40
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f831 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	80002000 	.word	0x80002000

08005200 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d103      	bne.n	800521e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2200      	movs	r2, #0
 800521c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b01      	cmp	r3, #1
 800522a:	d007      	beq.n	800523c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	619a      	str	r2, [r3, #24]
  }
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005258:	e022      	b.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d01e      	beq.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fc fe33 	bl	8001ecc <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d113      	bne.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	f043 0220 	orr.w	r2, r3, #32
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e00f      	b.n	80052c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4013      	ands	r3, r2
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	bf0c      	ite	eq
 80052b0:	2301      	moveq	r3, #1
 80052b2:	2300      	movne	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d0cd      	beq.n	800525a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052d4:	e02c      	b.n	8005330 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f870 	bl	80053c0 <I2C_IsAcknowledgeFailed>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e02a      	b.n	8005340 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d01e      	beq.n	8005330 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f2:	f7fc fdeb 	bl	8001ecc <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d113      	bne.n	8005330 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e007      	b.n	8005340 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b02      	cmp	r3, #2
 800533c:	d1cb      	bne.n	80052d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005354:	e028      	b.n	80053a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f830 	bl	80053c0 <I2C_IsAcknowledgeFailed>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e026      	b.n	80053b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fc fdaf 	bl	8001ecc <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d113      	bne.n	80053a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005384:	f043 0220 	orr.w	r2, r3, #32
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e007      	b.n	80053b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d1cf      	bne.n	8005356 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b10      	cmp	r3, #16
 80053d8:	d151      	bne.n	800547e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053da:	e022      	b.n	8005422 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e2:	d01e      	beq.n	8005422 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e4:	f7fc fd72 	bl	8001ecc <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d302      	bcc.n	80053fa <I2C_IsAcknowledgeFailed+0x3a>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d113      	bne.n	8005422 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e02e      	b.n	8005480 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b20      	cmp	r3, #32
 800542e:	d1d5      	bne.n	80053dc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2210      	movs	r2, #16
 8005436:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2220      	movs	r2, #32
 800543e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff fedd 	bl	8005200 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <I2C_IsAcknowledgeFailed+0xc8>)
 8005452:	400b      	ands	r3, r1
 8005454:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	f043 0204 	orr.w	r2, r3, #4
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	fe00e800 	.word	0xfe00e800

0800548c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	607b      	str	r3, [r7, #4]
 8005496:	460b      	mov	r3, r1
 8005498:	817b      	strh	r3, [r7, #10]
 800549a:	4613      	mov	r3, r2
 800549c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	0d5b      	lsrs	r3, r3, #21
 80054a8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80054ac:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <I2C_TransferConfig+0x58>)
 80054ae:	430b      	orrs	r3, r1
 80054b0:	43db      	mvns	r3, r3
 80054b2:	ea02 0103 	and.w	r1, r2, r3
 80054b6:	897b      	ldrh	r3, [r7, #10]
 80054b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054bc:	7a7b      	ldrb	r3, [r7, #9]
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	431a      	orrs	r2, r3
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	431a      	orrs	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	03ff63ff 	.word	0x03ff63ff

080054e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b20      	cmp	r3, #32
 80054fc:	d138      	bne.n	8005570 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005508:	2302      	movs	r3, #2
 800550a:	e032      	b.n	8005572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2224      	movs	r2, #36	; 0x24
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0201 	bic.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800553a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6819      	ldr	r1, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e000      	b.n	8005572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b20      	cmp	r3, #32
 8005592:	d139      	bne.n	8005608 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800559a:	2b01      	cmp	r3, #1
 800559c:	d101      	bne.n	80055a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800559e:	2302      	movs	r3, #2
 80055a0:	e033      	b.n	800560a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2224      	movs	r2, #36	; 0x24
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80055d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	e000      	b.n	800560a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005608:	2302      	movs	r3, #2
  }
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e041      	b.n	80056ac <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005630:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f245 5255 	movw	r2, #21845	; 0x5555
 800563a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6852      	ldr	r2, [r2, #4]
 8005644:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6892      	ldr	r2, [r2, #8]
 800564e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005650:	f7fc fc3c 	bl	8001ecc <HAL_GetTick>
 8005654:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005656:	e00f      	b.n	8005678 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005658:	f7fc fc38 	bl	8001ecc <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b30      	cmp	r3, #48	; 0x30
 8005664:	d908      	bls.n	8005678 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e019      	b.n	80056ac <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e8      	bne.n	8005658 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	429a      	cmp	r2, r3
 8005692:	d005      	beq.n	80056a0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68d2      	ldr	r2, [r2, #12]
 800569c:	611a      	str	r2, [r3, #16]
 800569e:	e004      	b.n	80056aa <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80056a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80056c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d141      	bne.n	8005766 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056e2:	4b4b      	ldr	r3, [pc, #300]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ee:	d131      	bne.n	8005754 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056f0:	4b47      	ldr	r3, [pc, #284]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056f6:	4a46      	ldr	r2, [pc, #280]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005700:	4b43      	ldr	r3, [pc, #268]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005708:	4a41      	ldr	r2, [pc, #260]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800570a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800570e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005710:	4b40      	ldr	r3, [pc, #256]	; (8005814 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2232      	movs	r2, #50	; 0x32
 8005716:	fb02 f303 	mul.w	r3, r2, r3
 800571a:	4a3f      	ldr	r2, [pc, #252]	; (8005818 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800571c:	fba2 2303 	umull	r2, r3, r2, r3
 8005720:	0c9b      	lsrs	r3, r3, #18
 8005722:	3301      	adds	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005726:	e002      	b.n	800572e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3b01      	subs	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800572e:	4b38      	ldr	r3, [pc, #224]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573a:	d102      	bne.n	8005742 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f2      	bne.n	8005728 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005742:	4b33      	ldr	r3, [pc, #204]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800574a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574e:	d158      	bne.n	8005802 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e057      	b.n	8005804 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005754:	4b2e      	ldr	r3, [pc, #184]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800575a:	4a2d      	ldr	r2, [pc, #180]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800575c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005760:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005764:	e04d      	b.n	8005802 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576c:	d141      	bne.n	80057f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800576e:	4b28      	ldr	r3, [pc, #160]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577a:	d131      	bne.n	80057e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800577c:	4b24      	ldr	r3, [pc, #144]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005782:	4a23      	ldr	r2, [pc, #140]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005788:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800578c:	4b20      	ldr	r3, [pc, #128]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005794:	4a1e      	ldr	r2, [pc, #120]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800579a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800579c:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2232      	movs	r2, #50	; 0x32
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057a8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ac:	0c9b      	lsrs	r3, r3, #18
 80057ae:	3301      	adds	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057b2:	e002      	b.n	80057ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057ba:	4b15      	ldr	r3, [pc, #84]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c6:	d102      	bne.n	80057ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f2      	bne.n	80057b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057da:	d112      	bne.n	8005802 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e011      	b.n	8005804 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e6:	4a0a      	ldr	r2, [pc, #40]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80057f0:	e007      	b.n	8005802 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057f2:	4b07      	ldr	r3, [pc, #28]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057fa:	4a05      	ldr	r2, [pc, #20]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005800:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	40007000 	.word	0x40007000
 8005814:	2000000c 	.word	0x2000000c
 8005818:	431bde83 	.word	0x431bde83

0800581c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	4a04      	ldr	r2, [pc, #16]	; (8005838 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800582a:	6093      	str	r3, [r2, #8]
}
 800582c:	bf00      	nop
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40007000 	.word	0x40007000

0800583c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e308      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d075      	beq.n	8005946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800585a:	4ba3      	ldr	r3, [pc, #652]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005864:	4ba0      	ldr	r3, [pc, #640]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b0c      	cmp	r3, #12
 8005872:	d102      	bne.n	800587a <HAL_RCC_OscConfig+0x3e>
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b03      	cmp	r3, #3
 8005878:	d002      	beq.n	8005880 <HAL_RCC_OscConfig+0x44>
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	2b08      	cmp	r3, #8
 800587e:	d10b      	bne.n	8005898 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005880:	4b99      	ldr	r3, [pc, #612]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d05b      	beq.n	8005944 <HAL_RCC_OscConfig+0x108>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d157      	bne.n	8005944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e2e3      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a0:	d106      	bne.n	80058b0 <HAL_RCC_OscConfig+0x74>
 80058a2:	4b91      	ldr	r3, [pc, #580]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a90      	ldr	r2, [pc, #576]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	e01d      	b.n	80058ec <HAL_RCC_OscConfig+0xb0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058b8:	d10c      	bne.n	80058d4 <HAL_RCC_OscConfig+0x98>
 80058ba:	4b8b      	ldr	r3, [pc, #556]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a8a      	ldr	r2, [pc, #552]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	4b88      	ldr	r3, [pc, #544]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a87      	ldr	r2, [pc, #540]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	e00b      	b.n	80058ec <HAL_RCC_OscConfig+0xb0>
 80058d4:	4b84      	ldr	r3, [pc, #528]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a83      	ldr	r2, [pc, #524]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	4b81      	ldr	r3, [pc, #516]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a80      	ldr	r2, [pc, #512]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80058e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d013      	beq.n	800591c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f4:	f7fc faea 	bl	8001ecc <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058fc:	f7fc fae6 	bl	8001ecc <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b64      	cmp	r3, #100	; 0x64
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e2a8      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800590e:	4b76      	ldr	r3, [pc, #472]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCC_OscConfig+0xc0>
 800591a:	e014      	b.n	8005946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591c:	f7fc fad6 	bl	8001ecc <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005924:	f7fc fad2 	bl	8001ecc <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b64      	cmp	r3, #100	; 0x64
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e294      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005936:	4b6c      	ldr	r3, [pc, #432]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0xe8>
 8005942:	e000      	b.n	8005946 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d075      	beq.n	8005a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005952:	4b65      	ldr	r3, [pc, #404]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 030c 	and.w	r3, r3, #12
 800595a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800595c:	4b62      	ldr	r3, [pc, #392]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b0c      	cmp	r3, #12
 800596a:	d102      	bne.n	8005972 <HAL_RCC_OscConfig+0x136>
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d002      	beq.n	8005978 <HAL_RCC_OscConfig+0x13c>
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b04      	cmp	r3, #4
 8005976:	d11f      	bne.n	80059b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005978:	4b5b      	ldr	r3, [pc, #364]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <HAL_RCC_OscConfig+0x154>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e267      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005990:	4b55      	ldr	r3, [pc, #340]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	061b      	lsls	r3, r3, #24
 800599e:	4952      	ldr	r1, [pc, #328]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059a4:	4b51      	ldr	r3, [pc, #324]	; (8005aec <HAL_RCC_OscConfig+0x2b0>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fc fa43 	bl	8001e34 <HAL_InitTick>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d043      	beq.n	8005a3c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e253      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d023      	beq.n	8005a08 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059c0:	4b49      	ldr	r3, [pc, #292]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a48      	ldr	r2, [pc, #288]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80059c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059cc:	f7fc fa7e 	bl	8001ecc <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d4:	f7fc fa7a 	bl	8001ecc <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e23c      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059e6:	4b40      	ldr	r3, [pc, #256]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f2:	4b3d      	ldr	r3, [pc, #244]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	061b      	lsls	r3, r3, #24
 8005a00:	4939      	ldr	r1, [pc, #228]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	604b      	str	r3, [r1, #4]
 8005a06:	e01a      	b.n	8005a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a08:	4b37      	ldr	r3, [pc, #220]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a36      	ldr	r2, [pc, #216]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a14:	f7fc fa5a 	bl	8001ecc <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a1c:	f7fc fa56 	bl	8001ecc <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e218      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x1e0>
 8005a3a:	e000      	b.n	8005a3e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d03c      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d01c      	beq.n	8005a8c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a52:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a58:	4a23      	ldr	r2, [pc, #140]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a5a:	f043 0301 	orr.w	r3, r3, #1
 8005a5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a62:	f7fc fa33 	bl	8001ecc <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a6a:	f7fc fa2f 	bl	8001ecc <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e1f1      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0ef      	beq.n	8005a6a <HAL_RCC_OscConfig+0x22e>
 8005a8a:	e01b      	b.n	8005ac4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a8c:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a92:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005a94:	f023 0301 	bic.w	r3, r3, #1
 8005a98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9c:	f7fc fa16 	bl	8001ecc <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa4:	f7fc fa12 	bl	8001ecc <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e1d4      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1ef      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 80ab 	beq.w	8005c28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ad6:	4b04      	ldr	r3, [pc, #16]	; (8005ae8 <HAL_RCC_OscConfig+0x2ac>)
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_RCC_OscConfig+0x2b4>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e005      	b.n	8005af2 <HAL_RCC_OscConfig+0x2b6>
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	20000010 	.word	0x20000010
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00d      	beq.n	8005b12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005af6:	4baf      	ldr	r3, [pc, #700]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afa:	4aae      	ldr	r2, [pc, #696]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b00:	6593      	str	r3, [r2, #88]	; 0x58
 8005b02:	4bac      	ldr	r3, [pc, #688]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b12:	4ba9      	ldr	r3, [pc, #676]	; (8005db8 <HAL_RCC_OscConfig+0x57c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d118      	bne.n	8005b50 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b1e:	4ba6      	ldr	r3, [pc, #664]	; (8005db8 <HAL_RCC_OscConfig+0x57c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4aa5      	ldr	r2, [pc, #660]	; (8005db8 <HAL_RCC_OscConfig+0x57c>)
 8005b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b2a:	f7fc f9cf 	bl	8001ecc <HAL_GetTick>
 8005b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b30:	e008      	b.n	8005b44 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b32:	f7fc f9cb 	bl	8001ecc <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e18d      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b44:	4b9c      	ldr	r3, [pc, #624]	; (8005db8 <HAL_RCC_OscConfig+0x57c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0f0      	beq.n	8005b32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d108      	bne.n	8005b6a <HAL_RCC_OscConfig+0x32e>
 8005b58:	4b96      	ldr	r3, [pc, #600]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5e:	4a95      	ldr	r2, [pc, #596]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b68:	e024      	b.n	8005bb4 <HAL_RCC_OscConfig+0x378>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2b05      	cmp	r3, #5
 8005b70:	d110      	bne.n	8005b94 <HAL_RCC_OscConfig+0x358>
 8005b72:	4b90      	ldr	r3, [pc, #576]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b78:	4a8e      	ldr	r2, [pc, #568]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005b7a:	f043 0304 	orr.w	r3, r3, #4
 8005b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b82:	4b8c      	ldr	r3, [pc, #560]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b88:	4a8a      	ldr	r2, [pc, #552]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b92:	e00f      	b.n	8005bb4 <HAL_RCC_OscConfig+0x378>
 8005b94:	4b87      	ldr	r3, [pc, #540]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9a:	4a86      	ldr	r2, [pc, #536]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ba4:	4b83      	ldr	r3, [pc, #524]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005baa:	4a82      	ldr	r2, [pc, #520]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005bac:	f023 0304 	bic.w	r3, r3, #4
 8005bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d016      	beq.n	8005bea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbc:	f7fc f986 	bl	8001ecc <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bc2:	e00a      	b.n	8005bda <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc4:	f7fc f982 	bl	8001ecc <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e142      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bda:	4b76      	ldr	r3, [pc, #472]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0ed      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x388>
 8005be8:	e015      	b.n	8005c16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bea:	f7fc f96f 	bl	8001ecc <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bf0:	e00a      	b.n	8005c08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf2:	f7fc f96b 	bl	8001ecc <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e12b      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c08:	4b6a      	ldr	r3, [pc, #424]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1ed      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c16:	7ffb      	ldrb	r3, [r7, #31]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d105      	bne.n	8005c28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c1c:	4b65      	ldr	r3, [pc, #404]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c20:	4a64      	ldr	r2, [pc, #400]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d03c      	beq.n	8005cae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01c      	beq.n	8005c76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c3c:	4b5d      	ldr	r3, [pc, #372]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c42:	4a5c      	ldr	r2, [pc, #368]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005c44:	f043 0301 	orr.w	r3, r3, #1
 8005c48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4c:	f7fc f93e 	bl	8001ecc <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c54:	f7fc f93a 	bl	8001ecc <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e0fc      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c66:	4b53      	ldr	r3, [pc, #332]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0ef      	beq.n	8005c54 <HAL_RCC_OscConfig+0x418>
 8005c74:	e01b      	b.n	8005cae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c76:	4b4f      	ldr	r3, [pc, #316]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c7c:	4a4d      	ldr	r2, [pc, #308]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005c7e:	f023 0301 	bic.w	r3, r3, #1
 8005c82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c86:	f7fc f921 	bl	8001ecc <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c8e:	f7fc f91d 	bl	8001ecc <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e0df      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ca0:	4b44      	ldr	r3, [pc, #272]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1ef      	bne.n	8005c8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 80d3 	beq.w	8005e5e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cb8:	4b3e      	ldr	r3, [pc, #248]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 030c 	and.w	r3, r3, #12
 8005cc0:	2b0c      	cmp	r3, #12
 8005cc2:	f000 808d 	beq.w	8005de0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d15a      	bne.n	8005d84 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cce:	4b39      	ldr	r3, [pc, #228]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a38      	ldr	r2, [pc, #224]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005cd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cda:	f7fc f8f7 	bl	8001ecc <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce2:	f7fc f8f3 	bl	8001ecc <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e0b5      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cf4:	4b2f      	ldr	r3, [pc, #188]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1f0      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d00:	4b2c      	ldr	r3, [pc, #176]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	4b2d      	ldr	r3, [pc, #180]	; (8005dbc <HAL_RCC_OscConfig+0x580>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6a11      	ldr	r1, [r2, #32]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d10:	3a01      	subs	r2, #1
 8005d12:	0112      	lsls	r2, r2, #4
 8005d14:	4311      	orrs	r1, r2
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d1a:	0212      	lsls	r2, r2, #8
 8005d1c:	4311      	orrs	r1, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d22:	0852      	lsrs	r2, r2, #1
 8005d24:	3a01      	subs	r2, #1
 8005d26:	0552      	lsls	r2, r2, #21
 8005d28:	4311      	orrs	r1, r2
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d2e:	0852      	lsrs	r2, r2, #1
 8005d30:	3a01      	subs	r2, #1
 8005d32:	0652      	lsls	r2, r2, #25
 8005d34:	4311      	orrs	r1, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d3a:	06d2      	lsls	r2, r2, #27
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	491d      	ldr	r1, [pc, #116]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d44:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1a      	ldr	r2, [pc, #104]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d50:	4b18      	ldr	r3, [pc, #96]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	4a17      	ldr	r2, [pc, #92]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5c:	f7fc f8b6 	bl	8001ecc <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d64:	f7fc f8b2 	bl	8001ecc <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e074      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d76:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0f0      	beq.n	8005d64 <HAL_RCC_OscConfig+0x528>
 8005d82:	e06c      	b.n	8005e5e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d84:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d8e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005d90:	4b08      	ldr	r3, [pc, #32]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4a07      	ldr	r2, [pc, #28]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005d96:	f023 0303 	bic.w	r3, r3, #3
 8005d9a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d9c:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	4a04      	ldr	r2, [pc, #16]	; (8005db4 <HAL_RCC_OscConfig+0x578>)
 8005da2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005daa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dac:	f7fc f88e 	bl	8001ecc <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db2:	e00e      	b.n	8005dd2 <HAL_RCC_OscConfig+0x596>
 8005db4:	40021000 	.word	0x40021000
 8005db8:	40007000 	.word	0x40007000
 8005dbc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc0:	f7fc f884 	bl	8001ecc <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e046      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dd2:	4b25      	ldr	r3, [pc, #148]	; (8005e68 <HAL_RCC_OscConfig+0x62c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f0      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x584>
 8005dde:	e03e      	b.n	8005e5e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e039      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005dec:	4b1e      	ldr	r3, [pc, #120]	; (8005e68 <HAL_RCC_OscConfig+0x62c>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 0203 	and.w	r2, r3, #3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d12c      	bne.n	8005e5a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d123      	bne.n	8005e5a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d11b      	bne.n	8005e5a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d113      	bne.n	8005e5a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d109      	bne.n	8005e5a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	085b      	lsrs	r3, r3, #1
 8005e52:	3b01      	subs	r3, #1
 8005e54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d001      	beq.n	8005e5e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3720      	adds	r7, #32
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40021000 	.word	0x40021000

08005e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e11e      	b.n	80060c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e84:	4b91      	ldr	r3, [pc, #580]	; (80060cc <HAL_RCC_ClockConfig+0x260>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d910      	bls.n	8005eb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e92:	4b8e      	ldr	r3, [pc, #568]	; (80060cc <HAL_RCC_ClockConfig+0x260>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f023 020f 	bic.w	r2, r3, #15
 8005e9a:	498c      	ldr	r1, [pc, #560]	; (80060cc <HAL_RCC_ClockConfig+0x260>)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea2:	4b8a      	ldr	r3, [pc, #552]	; (80060cc <HAL_RCC_ClockConfig+0x260>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d001      	beq.n	8005eb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e106      	b.n	80060c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d073      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d129      	bne.n	8005f1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec8:	4b81      	ldr	r3, [pc, #516]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e0f4      	b.n	80060c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005ed8:	f000 f966 	bl	80061a8 <RCC_GetSysClockFreqFromPLLSource>
 8005edc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	4a7c      	ldr	r2, [pc, #496]	; (80060d4 <HAL_RCC_ClockConfig+0x268>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d93f      	bls.n	8005f66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ee6:	4b7a      	ldr	r3, [pc, #488]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d033      	beq.n	8005f66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d12f      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f06:	4b72      	ldr	r3, [pc, #456]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f0e:	4a70      	ldr	r2, [pc, #448]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f16:	2380      	movs	r3, #128	; 0x80
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	e024      	b.n	8005f66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d107      	bne.n	8005f34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f24:	4b6a      	ldr	r3, [pc, #424]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d109      	bne.n	8005f44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e0c6      	b.n	80060c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f34:	4b66      	ldr	r3, [pc, #408]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e0be      	b.n	80060c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f44:	f000 f8ce 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 8005f48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	4a61      	ldr	r2, [pc, #388]	; (80060d4 <HAL_RCC_ClockConfig+0x268>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d909      	bls.n	8005f66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f52:	4b5f      	ldr	r3, [pc, #380]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5a:	4a5d      	ldr	r2, [pc, #372]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f62:	2380      	movs	r3, #128	; 0x80
 8005f64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f66:	4b5a      	ldr	r3, [pc, #360]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f023 0203 	bic.w	r2, r3, #3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4957      	ldr	r1, [pc, #348]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f78:	f7fb ffa8 	bl	8001ecc <HAL_GetTick>
 8005f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f7e:	e00a      	b.n	8005f96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f80:	f7fb ffa4 	bl	8001ecc <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e095      	b.n	80060c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f96:	4b4e      	ldr	r3, [pc, #312]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 020c 	and.w	r2, r3, #12
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d1eb      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d023      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fc0:	4b43      	ldr	r3, [pc, #268]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	4a42      	ldr	r2, [pc, #264]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005fc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005fd8:	4b3d      	ldr	r3, [pc, #244]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005fe0:	4a3b      	ldr	r2, [pc, #236]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005fe2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fe6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fe8:	4b39      	ldr	r3, [pc, #228]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4936      	ldr	r1, [pc, #216]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	608b      	str	r3, [r1, #8]
 8005ffa:	e008      	b.n	800600e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2b80      	cmp	r3, #128	; 0x80
 8006000:	d105      	bne.n	800600e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006002:	4b33      	ldr	r3, [pc, #204]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	4a32      	ldr	r2, [pc, #200]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8006008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800600c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800600e:	4b2f      	ldr	r3, [pc, #188]	; (80060cc <HAL_RCC_ClockConfig+0x260>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d21d      	bcs.n	8006058 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601c:	4b2b      	ldr	r3, [pc, #172]	; (80060cc <HAL_RCC_ClockConfig+0x260>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f023 020f 	bic.w	r2, r3, #15
 8006024:	4929      	ldr	r1, [pc, #164]	; (80060cc <HAL_RCC_ClockConfig+0x260>)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	4313      	orrs	r3, r2
 800602a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800602c:	f7fb ff4e 	bl	8001ecc <HAL_GetTick>
 8006030:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006032:	e00a      	b.n	800604a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006034:	f7fb ff4a 	bl	8001ecc <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006042:	4293      	cmp	r3, r2
 8006044:	d901      	bls.n	800604a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e03b      	b.n	80060c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800604a:	4b20      	ldr	r3, [pc, #128]	; (80060cc <HAL_RCC_ClockConfig+0x260>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d1ed      	bne.n	8006034 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006064:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	4917      	ldr	r1, [pc, #92]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8006072:	4313      	orrs	r3, r2
 8006074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006082:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	490f      	ldr	r1, [pc, #60]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 8006092:	4313      	orrs	r3, r2
 8006094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006096:	f000 f825 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 800609a:	4602      	mov	r2, r0
 800609c:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <HAL_RCC_ClockConfig+0x264>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	490c      	ldr	r1, [pc, #48]	; (80060d8 <HAL_RCC_ClockConfig+0x26c>)
 80060a8:	5ccb      	ldrb	r3, [r1, r3]
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	fa22 f303 	lsr.w	r3, r2, r3
 80060b2:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <HAL_RCC_ClockConfig+0x270>)
 80060b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80060b6:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <HAL_RCC_ClockConfig+0x274>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fb feba 	bl	8001e34 <HAL_InitTick>
 80060c0:	4603      	mov	r3, r0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40022000 	.word	0x40022000
 80060d0:	40021000 	.word	0x40021000
 80060d4:	04c4b400 	.word	0x04c4b400
 80060d8:	08008158 	.word	0x08008158
 80060dc:	2000000c 	.word	0x2000000c
 80060e0:	20000010 	.word	0x20000010

080060e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80060ea:	4b2c      	ldr	r3, [pc, #176]	; (800619c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 030c 	and.w	r3, r3, #12
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d102      	bne.n	80060fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060f6:	4b2a      	ldr	r3, [pc, #168]	; (80061a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	e047      	b.n	800618c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80060fc:	4b27      	ldr	r3, [pc, #156]	; (800619c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 030c 	and.w	r3, r3, #12
 8006104:	2b08      	cmp	r3, #8
 8006106:	d102      	bne.n	800610e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006108:	4b26      	ldr	r3, [pc, #152]	; (80061a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	e03e      	b.n	800618c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800610e:	4b23      	ldr	r3, [pc, #140]	; (800619c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b0c      	cmp	r3, #12
 8006118:	d136      	bne.n	8006188 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800611a:	4b20      	ldr	r3, [pc, #128]	; (800619c <HAL_RCC_GetSysClockFreq+0xb8>)
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006124:	4b1d      	ldr	r3, [pc, #116]	; (800619c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	3301      	adds	r3, #1
 8006130:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b03      	cmp	r3, #3
 8006136:	d10c      	bne.n	8006152 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006138:	4a1a      	ldr	r2, [pc, #104]	; (80061a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006140:	4a16      	ldr	r2, [pc, #88]	; (800619c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006142:	68d2      	ldr	r2, [r2, #12]
 8006144:	0a12      	lsrs	r2, r2, #8
 8006146:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800614a:	fb02 f303 	mul.w	r3, r2, r3
 800614e:	617b      	str	r3, [r7, #20]
      break;
 8006150:	e00c      	b.n	800616c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006152:	4a13      	ldr	r2, [pc, #76]	; (80061a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	fbb2 f3f3 	udiv	r3, r2, r3
 800615a:	4a10      	ldr	r2, [pc, #64]	; (800619c <HAL_RCC_GetSysClockFreq+0xb8>)
 800615c:	68d2      	ldr	r2, [r2, #12]
 800615e:	0a12      	lsrs	r2, r2, #8
 8006160:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006164:	fb02 f303 	mul.w	r3, r2, r3
 8006168:	617b      	str	r3, [r7, #20]
      break;
 800616a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <HAL_RCC_GetSysClockFreq+0xb8>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	0e5b      	lsrs	r3, r3, #25
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	3301      	adds	r3, #1
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	fbb2 f3f3 	udiv	r3, r2, r3
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	e001      	b.n	800618c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800618c:	693b      	ldr	r3, [r7, #16]
}
 800618e:	4618      	mov	r0, r3
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000
 80061a0:	00f42400 	.word	0x00f42400
 80061a4:	007a1200 	.word	0x007a1200

080061a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061ae:	4b1e      	ldr	r3, [pc, #120]	; (8006228 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061b8:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	091b      	lsrs	r3, r3, #4
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	3301      	adds	r3, #1
 80061c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d10c      	bne.n	80061e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061cc:	4a17      	ldr	r2, [pc, #92]	; (800622c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d4:	4a14      	ldr	r2, [pc, #80]	; (8006228 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061d6:	68d2      	ldr	r2, [r2, #12]
 80061d8:	0a12      	lsrs	r2, r2, #8
 80061da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061de:	fb02 f303 	mul.w	r3, r2, r3
 80061e2:	617b      	str	r3, [r7, #20]
    break;
 80061e4:	e00c      	b.n	8006200 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061e6:	4a12      	ldr	r2, [pc, #72]	; (8006230 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ee:	4a0e      	ldr	r2, [pc, #56]	; (8006228 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061f0:	68d2      	ldr	r2, [r2, #12]
 80061f2:	0a12      	lsrs	r2, r2, #8
 80061f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061f8:	fb02 f303 	mul.w	r3, r2, r3
 80061fc:	617b      	str	r3, [r7, #20]
    break;
 80061fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006200:	4b09      	ldr	r3, [pc, #36]	; (8006228 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	0e5b      	lsrs	r3, r3, #25
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	3301      	adds	r3, #1
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	fbb2 f3f3 	udiv	r3, r2, r3
 8006218:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800621a:	687b      	ldr	r3, [r7, #4]
}
 800621c:	4618      	mov	r0, r3
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	40021000 	.word	0x40021000
 800622c:	007a1200 	.word	0x007a1200
 8006230:	00f42400 	.word	0x00f42400

08006234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800623c:	2300      	movs	r3, #0
 800623e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006240:	2300      	movs	r3, #0
 8006242:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8098 	beq.w	8006382 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006252:	2300      	movs	r3, #0
 8006254:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006256:	4b43      	ldr	r3, [pc, #268]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10d      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006262:	4b40      	ldr	r3, [pc, #256]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006266:	4a3f      	ldr	r2, [pc, #252]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626c:	6593      	str	r3, [r2, #88]	; 0x58
 800626e:	4b3d      	ldr	r3, [pc, #244]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006276:	60bb      	str	r3, [r7, #8]
 8006278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800627a:	2301      	movs	r3, #1
 800627c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800627e:	4b3a      	ldr	r3, [pc, #232]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a39      	ldr	r2, [pc, #228]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006288:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800628a:	f7fb fe1f 	bl	8001ecc <HAL_GetTick>
 800628e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006290:	e009      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006292:	f7fb fe1b 	bl	8001ecc <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d902      	bls.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	74fb      	strb	r3, [r7, #19]
        break;
 80062a4:	e005      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062a6:	4b30      	ldr	r3, [pc, #192]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0ef      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80062b2:	7cfb      	ldrb	r3, [r7, #19]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d159      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062b8:	4b2a      	ldr	r3, [pc, #168]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01e      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d019      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062d4:	4b23      	ldr	r3, [pc, #140]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062e0:	4b20      	ldr	r3, [pc, #128]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e6:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062f0:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f6:	4a1b      	ldr	r2, [pc, #108]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006300:	4a18      	ldr	r2, [pc, #96]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d016      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006312:	f7fb fddb 	bl	8001ecc <HAL_GetTick>
 8006316:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006318:	e00b      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631a:	f7fb fdd7 	bl	8001ecc <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	f241 3288 	movw	r2, #5000	; 0x1388
 8006328:	4293      	cmp	r3, r2
 800632a:	d902      	bls.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	74fb      	strb	r3, [r7, #19]
            break;
 8006330:	e006      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006332:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0ec      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006340:	7cfb      	ldrb	r3, [r7, #19]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10b      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006346:	4b07      	ldr	r3, [pc, #28]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006354:	4903      	ldr	r1, [pc, #12]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800635c:	e008      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800635e:	7cfb      	ldrb	r3, [r7, #19]
 8006360:	74bb      	strb	r3, [r7, #18]
 8006362:	e005      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006364:	40021000 	.word	0x40021000
 8006368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636c:	7cfb      	ldrb	r3, [r7, #19]
 800636e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006370:	7c7b      	ldrb	r3, [r7, #17]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d105      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006376:	4baf      	ldr	r3, [pc, #700]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637a:	4aae      	ldr	r2, [pc, #696]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800637c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006380:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800638e:	4ba9      	ldr	r3, [pc, #676]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	f023 0203 	bic.w	r2, r3, #3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	49a5      	ldr	r1, [pc, #660]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063b0:	4ba0      	ldr	r3, [pc, #640]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b6:	f023 020c 	bic.w	r2, r3, #12
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	499d      	ldr	r1, [pc, #628]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063d2:	4b98      	ldr	r3, [pc, #608]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4994      	ldr	r1, [pc, #592]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063f4:	4b8f      	ldr	r3, [pc, #572]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	498c      	ldr	r1, [pc, #560]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006416:	4b87      	ldr	r3, [pc, #540]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	4983      	ldr	r1, [pc, #524]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006438:	4b7e      	ldr	r3, [pc, #504]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	497b      	ldr	r1, [pc, #492]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800645a:	4b76      	ldr	r3, [pc, #472]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	4972      	ldr	r1, [pc, #456]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800647c:	4b6d      	ldr	r3, [pc, #436]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	496a      	ldr	r1, [pc, #424]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800649e:	4b65      	ldr	r3, [pc, #404]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	4961      	ldr	r1, [pc, #388]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064c0:	4b5c      	ldr	r3, [pc, #368]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064c6:	f023 0203 	bic.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ce:	4959      	ldr	r1, [pc, #356]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064e2:	4b54      	ldr	r3, [pc, #336]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	4950      	ldr	r1, [pc, #320]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006500:	2b00      	cmp	r3, #0
 8006502:	d015      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006504:	4b4b      	ldr	r3, [pc, #300]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	4948      	ldr	r1, [pc, #288]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006522:	d105      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006524:	4b43      	ldr	r3, [pc, #268]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	4a42      	ldr	r2, [pc, #264]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800652a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800652e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006538:	2b00      	cmp	r3, #0
 800653a:	d015      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800653c:	4b3d      	ldr	r3, [pc, #244]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006542:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	493a      	ldr	r1, [pc, #232]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800655a:	d105      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800655c:	4b35      	ldr	r3, [pc, #212]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	4a34      	ldr	r2, [pc, #208]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006566:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d015      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006574:	4b2f      	ldr	r3, [pc, #188]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	492c      	ldr	r1, [pc, #176]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006584:	4313      	orrs	r3, r2
 8006586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006592:	d105      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006594:	4b27      	ldr	r3, [pc, #156]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	4a26      	ldr	r2, [pc, #152]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800659a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800659e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d015      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065ac:	4b21      	ldr	r3, [pc, #132]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ba:	491e      	ldr	r1, [pc, #120]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ca:	d105      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065cc:	4b19      	ldr	r3, [pc, #100]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	4a18      	ldr	r2, [pc, #96]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d015      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065e4:	4b13      	ldr	r3, [pc, #76]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	4910      	ldr	r1, [pc, #64]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006602:	d105      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006604:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	4a0a      	ldr	r2, [pc, #40]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800660a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800660e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d018      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662a:	4902      	ldr	r1, [pc, #8]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800662c:	4313      	orrs	r3, r2
 800662e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006632:	e001      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006634:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006640:	d105      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006642:	4b21      	ldr	r3, [pc, #132]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	4a20      	ldr	r2, [pc, #128]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800664c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d015      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800665a:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800665c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006660:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006668:	4917      	ldr	r1, [pc, #92]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006678:	d105      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800667a:	4b13      	ldr	r3, [pc, #76]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	4a12      	ldr	r2, [pc, #72]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006684:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d015      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006692:	4b0d      	ldr	r3, [pc, #52]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006694:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006698:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a0:	4909      	ldr	r1, [pc, #36]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066b0:	d105      	bne.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066b2:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	4a04      	ldr	r2, [pc, #16]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80066b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066bc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80066be:	7cbb      	ldrb	r3, [r7, #18]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40021000 	.word	0x40021000

080066cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e049      	b.n	8006772 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fb fa42 	bl	8001b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3304      	adds	r3, #4
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f000 fde2 	bl	80072d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	d001      	beq.n	8006794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e054      	b.n	800683e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0201 	orr.w	r2, r2, #1
 80067aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a26      	ldr	r2, [pc, #152]	; (800684c <HAL_TIM_Base_Start_IT+0xd0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d022      	beq.n	80067fc <HAL_TIM_Base_Start_IT+0x80>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067be:	d01d      	beq.n	80067fc <HAL_TIM_Base_Start_IT+0x80>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a22      	ldr	r2, [pc, #136]	; (8006850 <HAL_TIM_Base_Start_IT+0xd4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d018      	beq.n	80067fc <HAL_TIM_Base_Start_IT+0x80>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a21      	ldr	r2, [pc, #132]	; (8006854 <HAL_TIM_Base_Start_IT+0xd8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d013      	beq.n	80067fc <HAL_TIM_Base_Start_IT+0x80>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a1f      	ldr	r2, [pc, #124]	; (8006858 <HAL_TIM_Base_Start_IT+0xdc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00e      	beq.n	80067fc <HAL_TIM_Base_Start_IT+0x80>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1e      	ldr	r2, [pc, #120]	; (800685c <HAL_TIM_Base_Start_IT+0xe0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d009      	beq.n	80067fc <HAL_TIM_Base_Start_IT+0x80>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1c      	ldr	r2, [pc, #112]	; (8006860 <HAL_TIM_Base_Start_IT+0xe4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_TIM_Base_Start_IT+0x80>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a1b      	ldr	r2, [pc, #108]	; (8006864 <HAL_TIM_Base_Start_IT+0xe8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d115      	bne.n	8006828 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	4b19      	ldr	r3, [pc, #100]	; (8006868 <HAL_TIM_Base_Start_IT+0xec>)
 8006804:	4013      	ands	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b06      	cmp	r3, #6
 800680c:	d015      	beq.n	800683a <HAL_TIM_Base_Start_IT+0xbe>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006814:	d011      	beq.n	800683a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0201 	orr.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006826:	e008      	b.n	800683a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	e000      	b.n	800683c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	40012c00 	.word	0x40012c00
 8006850:	40000400 	.word	0x40000400
 8006854:	40000800 	.word	0x40000800
 8006858:	40000c00 	.word	0x40000c00
 800685c:	40013400 	.word	0x40013400
 8006860:	40014000 	.word	0x40014000
 8006864:	40015000 	.word	0x40015000
 8006868:	00010007 	.word	0x00010007

0800686c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e049      	b.n	8006912 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d106      	bne.n	8006898 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fb f9aa 	bl	8001bec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f000 fd12 	bl	80072d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d109      	bne.n	8006940 <HAL_TIM_PWM_Start+0x24>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b01      	cmp	r3, #1
 8006936:	bf14      	ite	ne
 8006938:	2301      	movne	r3, #1
 800693a:	2300      	moveq	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	e03c      	b.n	80069ba <HAL_TIM_PWM_Start+0x9e>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b04      	cmp	r3, #4
 8006944:	d109      	bne.n	800695a <HAL_TIM_PWM_Start+0x3e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	bf14      	ite	ne
 8006952:	2301      	movne	r3, #1
 8006954:	2300      	moveq	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	e02f      	b.n	80069ba <HAL_TIM_PWM_Start+0x9e>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d109      	bne.n	8006974 <HAL_TIM_PWM_Start+0x58>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b01      	cmp	r3, #1
 800696a:	bf14      	ite	ne
 800696c:	2301      	movne	r3, #1
 800696e:	2300      	moveq	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	e022      	b.n	80069ba <HAL_TIM_PWM_Start+0x9e>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b0c      	cmp	r3, #12
 8006978:	d109      	bne.n	800698e <HAL_TIM_PWM_Start+0x72>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b01      	cmp	r3, #1
 8006984:	bf14      	ite	ne
 8006986:	2301      	movne	r3, #1
 8006988:	2300      	moveq	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	e015      	b.n	80069ba <HAL_TIM_PWM_Start+0x9e>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b10      	cmp	r3, #16
 8006992:	d109      	bne.n	80069a8 <HAL_TIM_PWM_Start+0x8c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	bf14      	ite	ne
 80069a0:	2301      	movne	r3, #1
 80069a2:	2300      	moveq	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	e008      	b.n	80069ba <HAL_TIM_PWM_Start+0x9e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	bf14      	ite	ne
 80069b4:	2301      	movne	r3, #1
 80069b6:	2300      	moveq	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e0a6      	b.n	8006b10 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <HAL_TIM_PWM_Start+0xb6>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069d0:	e023      	b.n	8006a1a <HAL_TIM_PWM_Start+0xfe>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d104      	bne.n	80069e2 <HAL_TIM_PWM_Start+0xc6>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069e0:	e01b      	b.n	8006a1a <HAL_TIM_PWM_Start+0xfe>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d104      	bne.n	80069f2 <HAL_TIM_PWM_Start+0xd6>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069f0:	e013      	b.n	8006a1a <HAL_TIM_PWM_Start+0xfe>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b0c      	cmp	r3, #12
 80069f6:	d104      	bne.n	8006a02 <HAL_TIM_PWM_Start+0xe6>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a00:	e00b      	b.n	8006a1a <HAL_TIM_PWM_Start+0xfe>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b10      	cmp	r3, #16
 8006a06:	d104      	bne.n	8006a12 <HAL_TIM_PWM_Start+0xf6>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a10:	e003      	b.n	8006a1a <HAL_TIM_PWM_Start+0xfe>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 f8c4 	bl	8007bb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a3a      	ldr	r2, [pc, #232]	; (8006b18 <HAL_TIM_PWM_Start+0x1fc>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d018      	beq.n	8006a64 <HAL_TIM_PWM_Start+0x148>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a39      	ldr	r2, [pc, #228]	; (8006b1c <HAL_TIM_PWM_Start+0x200>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d013      	beq.n	8006a64 <HAL_TIM_PWM_Start+0x148>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a37      	ldr	r2, [pc, #220]	; (8006b20 <HAL_TIM_PWM_Start+0x204>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00e      	beq.n	8006a64 <HAL_TIM_PWM_Start+0x148>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a36      	ldr	r2, [pc, #216]	; (8006b24 <HAL_TIM_PWM_Start+0x208>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d009      	beq.n	8006a64 <HAL_TIM_PWM_Start+0x148>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a34      	ldr	r2, [pc, #208]	; (8006b28 <HAL_TIM_PWM_Start+0x20c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <HAL_TIM_PWM_Start+0x148>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a33      	ldr	r2, [pc, #204]	; (8006b2c <HAL_TIM_PWM_Start+0x210>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d101      	bne.n	8006a68 <HAL_TIM_PWM_Start+0x14c>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <HAL_TIM_PWM_Start+0x14e>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d007      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a25      	ldr	r2, [pc, #148]	; (8006b18 <HAL_TIM_PWM_Start+0x1fc>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d022      	beq.n	8006ace <HAL_TIM_PWM_Start+0x1b2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a90:	d01d      	beq.n	8006ace <HAL_TIM_PWM_Start+0x1b2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a26      	ldr	r2, [pc, #152]	; (8006b30 <HAL_TIM_PWM_Start+0x214>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d018      	beq.n	8006ace <HAL_TIM_PWM_Start+0x1b2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a24      	ldr	r2, [pc, #144]	; (8006b34 <HAL_TIM_PWM_Start+0x218>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d013      	beq.n	8006ace <HAL_TIM_PWM_Start+0x1b2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a23      	ldr	r2, [pc, #140]	; (8006b38 <HAL_TIM_PWM_Start+0x21c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00e      	beq.n	8006ace <HAL_TIM_PWM_Start+0x1b2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a19      	ldr	r2, [pc, #100]	; (8006b1c <HAL_TIM_PWM_Start+0x200>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d009      	beq.n	8006ace <HAL_TIM_PWM_Start+0x1b2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a18      	ldr	r2, [pc, #96]	; (8006b20 <HAL_TIM_PWM_Start+0x204>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d004      	beq.n	8006ace <HAL_TIM_PWM_Start+0x1b2>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a18      	ldr	r2, [pc, #96]	; (8006b2c <HAL_TIM_PWM_Start+0x210>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d115      	bne.n	8006afa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	4b19      	ldr	r3, [pc, #100]	; (8006b3c <HAL_TIM_PWM_Start+0x220>)
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b06      	cmp	r3, #6
 8006ade:	d015      	beq.n	8006b0c <HAL_TIM_PWM_Start+0x1f0>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae6:	d011      	beq.n	8006b0c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0201 	orr.w	r2, r2, #1
 8006af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af8:	e008      	b.n	8006b0c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0201 	orr.w	r2, r2, #1
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	e000      	b.n	8006b0e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40012c00 	.word	0x40012c00
 8006b1c:	40013400 	.word	0x40013400
 8006b20:	40014000 	.word	0x40014000
 8006b24:	40014400 	.word	0x40014400
 8006b28:	40014800 	.word	0x40014800
 8006b2c:	40015000 	.word	0x40015000
 8006b30:	40000400 	.word	0x40000400
 8006b34:	40000800 	.word	0x40000800
 8006b38:	40000c00 	.word	0x40000c00
 8006b3c:	00010007 	.word	0x00010007

08006b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d122      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d11b      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0202 	mvn.w	r2, #2
 8006b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fb88 	bl	8007298 <HAL_TIM_IC_CaptureCallback>
 8006b88:	e005      	b.n	8006b96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fb7a 	bl	8007284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fb8b 	bl	80072ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d122      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d11b      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0204 	mvn.w	r2, #4
 8006bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fb5e 	bl	8007298 <HAL_TIM_IC_CaptureCallback>
 8006bdc:	e005      	b.n	8006bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fb50 	bl	8007284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fb61 	bl	80072ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0308 	and.w	r3, r3, #8
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d122      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d11b      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0208 	mvn.w	r2, #8
 8006c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2204      	movs	r2, #4
 8006c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fb34 	bl	8007298 <HAL_TIM_IC_CaptureCallback>
 8006c30:	e005      	b.n	8006c3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fb26 	bl	8007284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fb37 	bl	80072ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b10      	cmp	r3, #16
 8006c50:	d122      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b10      	cmp	r3, #16
 8006c5e:	d11b      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0210 	mvn.w	r2, #16
 8006c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fb0a 	bl	8007298 <HAL_TIM_IC_CaptureCallback>
 8006c84:	e005      	b.n	8006c92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fafc 	bl	8007284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fb0d 	bl	80072ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d10e      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d107      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0201 	mvn.w	r2, #1
 8006cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fa fbb4 	bl	800142c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d10e      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cdc:	2b80      	cmp	r3, #128	; 0x80
 8006cde:	d107      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 f99a 	bl	8008024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cfe:	d10e      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d107      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 f98d 	bl	8008038 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d28:	2b40      	cmp	r3, #64	; 0x40
 8006d2a:	d10e      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d107      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fabb 	bl	80072c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d10e      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d107      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f06f 0220 	mvn.w	r2, #32
 8006d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 f94d 	bl	8008010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d84:	d10f      	bne.n	8006da6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d94:	d107      	bne.n	8006da6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 f953 	bl	800804c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006db0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006db4:	d10f      	bne.n	8006dd6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dc4:	d107      	bne.n	8006dd6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 f945 	bl	8008060 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006de4:	d10f      	bne.n	8006e06 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006df4:	d107      	bne.n	8006e06 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 f937 	bl	8008074 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e14:	d10f      	bne.n	8006e36 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e24:	d107      	bne.n	8006e36 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 f929 	bl	8008088 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e0fd      	b.n	8007056 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b14      	cmp	r3, #20
 8006e66:	f200 80f0 	bhi.w	800704a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006e6a:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08006ec5 	.word	0x08006ec5
 8006e74:	0800704b 	.word	0x0800704b
 8006e78:	0800704b 	.word	0x0800704b
 8006e7c:	0800704b 	.word	0x0800704b
 8006e80:	08006f05 	.word	0x08006f05
 8006e84:	0800704b 	.word	0x0800704b
 8006e88:	0800704b 	.word	0x0800704b
 8006e8c:	0800704b 	.word	0x0800704b
 8006e90:	08006f47 	.word	0x08006f47
 8006e94:	0800704b 	.word	0x0800704b
 8006e98:	0800704b 	.word	0x0800704b
 8006e9c:	0800704b 	.word	0x0800704b
 8006ea0:	08006f87 	.word	0x08006f87
 8006ea4:	0800704b 	.word	0x0800704b
 8006ea8:	0800704b 	.word	0x0800704b
 8006eac:	0800704b 	.word	0x0800704b
 8006eb0:	08006fc9 	.word	0x08006fc9
 8006eb4:	0800704b 	.word	0x0800704b
 8006eb8:	0800704b 	.word	0x0800704b
 8006ebc:	0800704b 	.word	0x0800704b
 8006ec0:	08007009 	.word	0x08007009
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68b9      	ldr	r1, [r7, #8]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 faaa 	bl	8007424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0208 	orr.w	r2, r2, #8
 8006ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 0204 	bic.w	r2, r2, #4
 8006eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6999      	ldr	r1, [r3, #24]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	691a      	ldr	r2, [r3, #16]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	619a      	str	r2, [r3, #24]
      break;
 8006f02:	e0a3      	b.n	800704c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68b9      	ldr	r1, [r7, #8]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fb24 	bl	8007558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699a      	ldr	r2, [r3, #24]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6999      	ldr	r1, [r3, #24]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	021a      	lsls	r2, r3, #8
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	619a      	str	r2, [r3, #24]
      break;
 8006f44:	e082      	b.n	800704c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68b9      	ldr	r1, [r7, #8]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fb97 	bl	8007680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f042 0208 	orr.w	r2, r2, #8
 8006f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0204 	bic.w	r2, r2, #4
 8006f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69d9      	ldr	r1, [r3, #28]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	61da      	str	r2, [r3, #28]
      break;
 8006f84:	e062      	b.n	800704c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fc09 	bl	80077a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69da      	ldr	r2, [r3, #28]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	69da      	ldr	r2, [r3, #28]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69d9      	ldr	r1, [r3, #28]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	021a      	lsls	r2, r3, #8
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	61da      	str	r2, [r3, #28]
      break;
 8006fc6:	e041      	b.n	800704c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fc7c 	bl	80078cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0208 	orr.w	r2, r2, #8
 8006fe2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 0204 	bic.w	r2, r2, #4
 8006ff2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	691a      	ldr	r2, [r3, #16]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007006:	e021      	b.n	800704c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fcc6 	bl	80079a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007022:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007032:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	021a      	lsls	r2, r3, #8
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007048:	e000      	b.n	800704c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800704a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop

08007060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_TIM_ConfigClockSource+0x18>
 8007074:	2302      	movs	r3, #2
 8007076:	e0f5      	b.n	8007264 <HAL_TIM_ConfigClockSource+0x204>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800709a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a6e      	ldr	r2, [pc, #440]	; (800726c <HAL_TIM_ConfigClockSource+0x20c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	f000 80c1 	beq.w	800723a <HAL_TIM_ConfigClockSource+0x1da>
 80070b8:	4a6c      	ldr	r2, [pc, #432]	; (800726c <HAL_TIM_ConfigClockSource+0x20c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	f200 80c6 	bhi.w	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 80070c0:	4a6b      	ldr	r2, [pc, #428]	; (8007270 <HAL_TIM_ConfigClockSource+0x210>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	f000 80b9 	beq.w	800723a <HAL_TIM_ConfigClockSource+0x1da>
 80070c8:	4a69      	ldr	r2, [pc, #420]	; (8007270 <HAL_TIM_ConfigClockSource+0x210>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	f200 80be 	bhi.w	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 80070d0:	4a68      	ldr	r2, [pc, #416]	; (8007274 <HAL_TIM_ConfigClockSource+0x214>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	f000 80b1 	beq.w	800723a <HAL_TIM_ConfigClockSource+0x1da>
 80070d8:	4a66      	ldr	r2, [pc, #408]	; (8007274 <HAL_TIM_ConfigClockSource+0x214>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	f200 80b6 	bhi.w	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 80070e0:	4a65      	ldr	r2, [pc, #404]	; (8007278 <HAL_TIM_ConfigClockSource+0x218>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	f000 80a9 	beq.w	800723a <HAL_TIM_ConfigClockSource+0x1da>
 80070e8:	4a63      	ldr	r2, [pc, #396]	; (8007278 <HAL_TIM_ConfigClockSource+0x218>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	f200 80ae 	bhi.w	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 80070f0:	4a62      	ldr	r2, [pc, #392]	; (800727c <HAL_TIM_ConfigClockSource+0x21c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	f000 80a1 	beq.w	800723a <HAL_TIM_ConfigClockSource+0x1da>
 80070f8:	4a60      	ldr	r2, [pc, #384]	; (800727c <HAL_TIM_ConfigClockSource+0x21c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	f200 80a6 	bhi.w	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 8007100:	4a5f      	ldr	r2, [pc, #380]	; (8007280 <HAL_TIM_ConfigClockSource+0x220>)
 8007102:	4293      	cmp	r3, r2
 8007104:	f000 8099 	beq.w	800723a <HAL_TIM_ConfigClockSource+0x1da>
 8007108:	4a5d      	ldr	r2, [pc, #372]	; (8007280 <HAL_TIM_ConfigClockSource+0x220>)
 800710a:	4293      	cmp	r3, r2
 800710c:	f200 809e 	bhi.w	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 8007110:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007114:	f000 8091 	beq.w	800723a <HAL_TIM_ConfigClockSource+0x1da>
 8007118:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800711c:	f200 8096 	bhi.w	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 8007120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007124:	f000 8089 	beq.w	800723a <HAL_TIM_ConfigClockSource+0x1da>
 8007128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800712c:	f200 808e 	bhi.w	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 8007130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007134:	d03e      	beq.n	80071b4 <HAL_TIM_ConfigClockSource+0x154>
 8007136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800713a:	f200 8087 	bhi.w	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 800713e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007142:	f000 8085 	beq.w	8007250 <HAL_TIM_ConfigClockSource+0x1f0>
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714a:	d87f      	bhi.n	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 800714c:	2b70      	cmp	r3, #112	; 0x70
 800714e:	d01a      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0x126>
 8007150:	2b70      	cmp	r3, #112	; 0x70
 8007152:	d87b      	bhi.n	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 8007154:	2b60      	cmp	r3, #96	; 0x60
 8007156:	d050      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x19a>
 8007158:	2b60      	cmp	r3, #96	; 0x60
 800715a:	d877      	bhi.n	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 800715c:	2b50      	cmp	r3, #80	; 0x50
 800715e:	d03c      	beq.n	80071da <HAL_TIM_ConfigClockSource+0x17a>
 8007160:	2b50      	cmp	r3, #80	; 0x50
 8007162:	d873      	bhi.n	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 8007164:	2b40      	cmp	r3, #64	; 0x40
 8007166:	d058      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x1ba>
 8007168:	2b40      	cmp	r3, #64	; 0x40
 800716a:	d86f      	bhi.n	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 800716c:	2b30      	cmp	r3, #48	; 0x30
 800716e:	d064      	beq.n	800723a <HAL_TIM_ConfigClockSource+0x1da>
 8007170:	2b30      	cmp	r3, #48	; 0x30
 8007172:	d86b      	bhi.n	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 8007174:	2b20      	cmp	r3, #32
 8007176:	d060      	beq.n	800723a <HAL_TIM_ConfigClockSource+0x1da>
 8007178:	2b20      	cmp	r3, #32
 800717a:	d867      	bhi.n	800724c <HAL_TIM_ConfigClockSource+0x1ec>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d05c      	beq.n	800723a <HAL_TIM_ConfigClockSource+0x1da>
 8007180:	2b10      	cmp	r3, #16
 8007182:	d05a      	beq.n	800723a <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007184:	e062      	b.n	800724c <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	6899      	ldr	r1, [r3, #8]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f000 fceb 	bl	8007b70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	609a      	str	r2, [r3, #8]
      break;
 80071b2:	e04e      	b.n	8007252 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	6899      	ldr	r1, [r3, #8]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f000 fcd4 	bl	8007b70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071d6:	609a      	str	r2, [r3, #8]
      break;
 80071d8:	e03b      	b.n	8007252 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	6859      	ldr	r1, [r3, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	461a      	mov	r2, r3
 80071e8:	f000 fc46 	bl	8007a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2150      	movs	r1, #80	; 0x50
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fc9f 	bl	8007b36 <TIM_ITRx_SetConfig>
      break;
 80071f8:	e02b      	b.n	8007252 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6859      	ldr	r1, [r3, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	461a      	mov	r2, r3
 8007208:	f000 fc65 	bl	8007ad6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2160      	movs	r1, #96	; 0x60
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fc8f 	bl	8007b36 <TIM_ITRx_SetConfig>
      break;
 8007218:	e01b      	b.n	8007252 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6859      	ldr	r1, [r3, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	461a      	mov	r2, r3
 8007228:	f000 fc26 	bl	8007a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2140      	movs	r1, #64	; 0x40
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fc7f 	bl	8007b36 <TIM_ITRx_SetConfig>
      break;
 8007238:	e00b      	b.n	8007252 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f000 fc76 	bl	8007b36 <TIM_ITRx_SetConfig>
        break;
 800724a:	e002      	b.n	8007252 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 800724c:	bf00      	nop
 800724e:	e000      	b.n	8007252 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8007250:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	00100070 	.word	0x00100070
 8007270:	00100060 	.word	0x00100060
 8007274:	00100050 	.word	0x00100050
 8007278:	00100040 	.word	0x00100040
 800727c:	00100030 	.word	0x00100030
 8007280:	00100020 	.word	0x00100020

08007284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a46      	ldr	r2, [pc, #280]	; (8007400 <TIM_Base_SetConfig+0x12c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d017      	beq.n	800731c <TIM_Base_SetConfig+0x48>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f2:	d013      	beq.n	800731c <TIM_Base_SetConfig+0x48>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a43      	ldr	r2, [pc, #268]	; (8007404 <TIM_Base_SetConfig+0x130>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00f      	beq.n	800731c <TIM_Base_SetConfig+0x48>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a42      	ldr	r2, [pc, #264]	; (8007408 <TIM_Base_SetConfig+0x134>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00b      	beq.n	800731c <TIM_Base_SetConfig+0x48>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a41      	ldr	r2, [pc, #260]	; (800740c <TIM_Base_SetConfig+0x138>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d007      	beq.n	800731c <TIM_Base_SetConfig+0x48>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a40      	ldr	r2, [pc, #256]	; (8007410 <TIM_Base_SetConfig+0x13c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d003      	beq.n	800731c <TIM_Base_SetConfig+0x48>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a3f      	ldr	r2, [pc, #252]	; (8007414 <TIM_Base_SetConfig+0x140>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d108      	bne.n	800732e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a33      	ldr	r2, [pc, #204]	; (8007400 <TIM_Base_SetConfig+0x12c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d023      	beq.n	800737e <TIM_Base_SetConfig+0xaa>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733c:	d01f      	beq.n	800737e <TIM_Base_SetConfig+0xaa>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a30      	ldr	r2, [pc, #192]	; (8007404 <TIM_Base_SetConfig+0x130>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d01b      	beq.n	800737e <TIM_Base_SetConfig+0xaa>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a2f      	ldr	r2, [pc, #188]	; (8007408 <TIM_Base_SetConfig+0x134>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d017      	beq.n	800737e <TIM_Base_SetConfig+0xaa>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a2e      	ldr	r2, [pc, #184]	; (800740c <TIM_Base_SetConfig+0x138>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d013      	beq.n	800737e <TIM_Base_SetConfig+0xaa>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a2d      	ldr	r2, [pc, #180]	; (8007410 <TIM_Base_SetConfig+0x13c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00f      	beq.n	800737e <TIM_Base_SetConfig+0xaa>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a2d      	ldr	r2, [pc, #180]	; (8007418 <TIM_Base_SetConfig+0x144>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00b      	beq.n	800737e <TIM_Base_SetConfig+0xaa>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a2c      	ldr	r2, [pc, #176]	; (800741c <TIM_Base_SetConfig+0x148>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d007      	beq.n	800737e <TIM_Base_SetConfig+0xaa>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a2b      	ldr	r2, [pc, #172]	; (8007420 <TIM_Base_SetConfig+0x14c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d003      	beq.n	800737e <TIM_Base_SetConfig+0xaa>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a26      	ldr	r2, [pc, #152]	; (8007414 <TIM_Base_SetConfig+0x140>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d108      	bne.n	8007390 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a12      	ldr	r2, [pc, #72]	; (8007400 <TIM_Base_SetConfig+0x12c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d013      	beq.n	80073e4 <TIM_Base_SetConfig+0x110>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a14      	ldr	r2, [pc, #80]	; (8007410 <TIM_Base_SetConfig+0x13c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00f      	beq.n	80073e4 <TIM_Base_SetConfig+0x110>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a14      	ldr	r2, [pc, #80]	; (8007418 <TIM_Base_SetConfig+0x144>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00b      	beq.n	80073e4 <TIM_Base_SetConfig+0x110>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a13      	ldr	r2, [pc, #76]	; (800741c <TIM_Base_SetConfig+0x148>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d007      	beq.n	80073e4 <TIM_Base_SetConfig+0x110>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a12      	ldr	r2, [pc, #72]	; (8007420 <TIM_Base_SetConfig+0x14c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d003      	beq.n	80073e4 <TIM_Base_SetConfig+0x110>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a0d      	ldr	r2, [pc, #52]	; (8007414 <TIM_Base_SetConfig+0x140>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d103      	bne.n	80073ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	615a      	str	r2, [r3, #20]
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40012c00 	.word	0x40012c00
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800
 800740c:	40000c00 	.word	0x40000c00
 8007410:	40013400 	.word	0x40013400
 8007414:	40015000 	.word	0x40015000
 8007418:	40014000 	.word	0x40014000
 800741c:	40014400 	.word	0x40014400
 8007420:	40014800 	.word	0x40014800

08007424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f023 0201 	bic.w	r2, r3, #1
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0303 	bic.w	r3, r3, #3
 800745e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f023 0302 	bic.w	r3, r3, #2
 8007470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a30      	ldr	r2, [pc, #192]	; (8007540 <TIM_OC1_SetConfig+0x11c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d013      	beq.n	80074ac <TIM_OC1_SetConfig+0x88>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a2f      	ldr	r2, [pc, #188]	; (8007544 <TIM_OC1_SetConfig+0x120>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00f      	beq.n	80074ac <TIM_OC1_SetConfig+0x88>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a2e      	ldr	r2, [pc, #184]	; (8007548 <TIM_OC1_SetConfig+0x124>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00b      	beq.n	80074ac <TIM_OC1_SetConfig+0x88>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a2d      	ldr	r2, [pc, #180]	; (800754c <TIM_OC1_SetConfig+0x128>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d007      	beq.n	80074ac <TIM_OC1_SetConfig+0x88>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a2c      	ldr	r2, [pc, #176]	; (8007550 <TIM_OC1_SetConfig+0x12c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d003      	beq.n	80074ac <TIM_OC1_SetConfig+0x88>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a2b      	ldr	r2, [pc, #172]	; (8007554 <TIM_OC1_SetConfig+0x130>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d10c      	bne.n	80074c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f023 0308 	bic.w	r3, r3, #8
 80074b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f023 0304 	bic.w	r3, r3, #4
 80074c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a1d      	ldr	r2, [pc, #116]	; (8007540 <TIM_OC1_SetConfig+0x11c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d013      	beq.n	80074f6 <TIM_OC1_SetConfig+0xd2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a1c      	ldr	r2, [pc, #112]	; (8007544 <TIM_OC1_SetConfig+0x120>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00f      	beq.n	80074f6 <TIM_OC1_SetConfig+0xd2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <TIM_OC1_SetConfig+0x124>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00b      	beq.n	80074f6 <TIM_OC1_SetConfig+0xd2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a1a      	ldr	r2, [pc, #104]	; (800754c <TIM_OC1_SetConfig+0x128>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d007      	beq.n	80074f6 <TIM_OC1_SetConfig+0xd2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a19      	ldr	r2, [pc, #100]	; (8007550 <TIM_OC1_SetConfig+0x12c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d003      	beq.n	80074f6 <TIM_OC1_SetConfig+0xd2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a18      	ldr	r2, [pc, #96]	; (8007554 <TIM_OC1_SetConfig+0x130>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d111      	bne.n	800751a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	4313      	orrs	r3, r2
 8007518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	621a      	str	r2, [r3, #32]
}
 8007534:	bf00      	nop
 8007536:	371c      	adds	r7, #28
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40013400 	.word	0x40013400
 8007548:	40014000 	.word	0x40014000
 800754c:	40014400 	.word	0x40014400
 8007550:	40014800 	.word	0x40014800
 8007554:	40015000 	.word	0x40015000

08007558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	f023 0210 	bic.w	r2, r3, #16
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800758a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	4313      	orrs	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f023 0320 	bic.w	r3, r3, #32
 80075a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a2c      	ldr	r2, [pc, #176]	; (8007668 <TIM_OC2_SetConfig+0x110>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d007      	beq.n	80075cc <TIM_OC2_SetConfig+0x74>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a2b      	ldr	r2, [pc, #172]	; (800766c <TIM_OC2_SetConfig+0x114>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d003      	beq.n	80075cc <TIM_OC2_SetConfig+0x74>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a2a      	ldr	r2, [pc, #168]	; (8007670 <TIM_OC2_SetConfig+0x118>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d10d      	bne.n	80075e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	011b      	lsls	r3, r3, #4
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a1f      	ldr	r2, [pc, #124]	; (8007668 <TIM_OC2_SetConfig+0x110>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d013      	beq.n	8007618 <TIM_OC2_SetConfig+0xc0>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a1e      	ldr	r2, [pc, #120]	; (800766c <TIM_OC2_SetConfig+0x114>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00f      	beq.n	8007618 <TIM_OC2_SetConfig+0xc0>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a1e      	ldr	r2, [pc, #120]	; (8007674 <TIM_OC2_SetConfig+0x11c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d00b      	beq.n	8007618 <TIM_OC2_SetConfig+0xc0>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a1d      	ldr	r2, [pc, #116]	; (8007678 <TIM_OC2_SetConfig+0x120>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d007      	beq.n	8007618 <TIM_OC2_SetConfig+0xc0>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a1c      	ldr	r2, [pc, #112]	; (800767c <TIM_OC2_SetConfig+0x124>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d003      	beq.n	8007618 <TIM_OC2_SetConfig+0xc0>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a17      	ldr	r2, [pc, #92]	; (8007670 <TIM_OC2_SetConfig+0x118>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d113      	bne.n	8007640 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800761e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4313      	orrs	r3, r2
 8007632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	4313      	orrs	r3, r2
 800763e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	621a      	str	r2, [r3, #32]
}
 800765a:	bf00      	nop
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40012c00 	.word	0x40012c00
 800766c:	40013400 	.word	0x40013400
 8007670:	40015000 	.word	0x40015000
 8007674:	40014000 	.word	0x40014000
 8007678:	40014400 	.word	0x40014400
 800767c:	40014800 	.word	0x40014800

08007680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a2b      	ldr	r2, [pc, #172]	; (800778c <TIM_OC3_SetConfig+0x10c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d007      	beq.n	80076f2 <TIM_OC3_SetConfig+0x72>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a2a      	ldr	r2, [pc, #168]	; (8007790 <TIM_OC3_SetConfig+0x110>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d003      	beq.n	80076f2 <TIM_OC3_SetConfig+0x72>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a29      	ldr	r2, [pc, #164]	; (8007794 <TIM_OC3_SetConfig+0x114>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d10d      	bne.n	800770e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	021b      	lsls	r3, r3, #8
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	4313      	orrs	r3, r2
 8007704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800770c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a1e      	ldr	r2, [pc, #120]	; (800778c <TIM_OC3_SetConfig+0x10c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d013      	beq.n	800773e <TIM_OC3_SetConfig+0xbe>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a1d      	ldr	r2, [pc, #116]	; (8007790 <TIM_OC3_SetConfig+0x110>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d00f      	beq.n	800773e <TIM_OC3_SetConfig+0xbe>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a1d      	ldr	r2, [pc, #116]	; (8007798 <TIM_OC3_SetConfig+0x118>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d00b      	beq.n	800773e <TIM_OC3_SetConfig+0xbe>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a1c      	ldr	r2, [pc, #112]	; (800779c <TIM_OC3_SetConfig+0x11c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d007      	beq.n	800773e <TIM_OC3_SetConfig+0xbe>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a1b      	ldr	r2, [pc, #108]	; (80077a0 <TIM_OC3_SetConfig+0x120>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d003      	beq.n	800773e <TIM_OC3_SetConfig+0xbe>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a16      	ldr	r2, [pc, #88]	; (8007794 <TIM_OC3_SetConfig+0x114>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d113      	bne.n	8007766 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800774c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	4313      	orrs	r3, r2
 8007758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	621a      	str	r2, [r3, #32]
}
 8007780:	bf00      	nop
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	40012c00 	.word	0x40012c00
 8007790:	40013400 	.word	0x40013400
 8007794:	40015000 	.word	0x40015000
 8007798:	40014000 	.word	0x40014000
 800779c:	40014400 	.word	0x40014400
 80077a0:	40014800 	.word	0x40014800

080077a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	021b      	lsls	r3, r3, #8
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	031b      	lsls	r3, r3, #12
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a2c      	ldr	r2, [pc, #176]	; (80078b4 <TIM_OC4_SetConfig+0x110>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d007      	beq.n	8007818 <TIM_OC4_SetConfig+0x74>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a2b      	ldr	r2, [pc, #172]	; (80078b8 <TIM_OC4_SetConfig+0x114>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d003      	beq.n	8007818 <TIM_OC4_SetConfig+0x74>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a2a      	ldr	r2, [pc, #168]	; (80078bc <TIM_OC4_SetConfig+0x118>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d10d      	bne.n	8007834 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800781e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	031b      	lsls	r3, r3, #12
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	4313      	orrs	r3, r2
 800782a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007832:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a1f      	ldr	r2, [pc, #124]	; (80078b4 <TIM_OC4_SetConfig+0x110>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d013      	beq.n	8007864 <TIM_OC4_SetConfig+0xc0>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a1e      	ldr	r2, [pc, #120]	; (80078b8 <TIM_OC4_SetConfig+0x114>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d00f      	beq.n	8007864 <TIM_OC4_SetConfig+0xc0>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a1e      	ldr	r2, [pc, #120]	; (80078c0 <TIM_OC4_SetConfig+0x11c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00b      	beq.n	8007864 <TIM_OC4_SetConfig+0xc0>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a1d      	ldr	r2, [pc, #116]	; (80078c4 <TIM_OC4_SetConfig+0x120>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d007      	beq.n	8007864 <TIM_OC4_SetConfig+0xc0>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a1c      	ldr	r2, [pc, #112]	; (80078c8 <TIM_OC4_SetConfig+0x124>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d003      	beq.n	8007864 <TIM_OC4_SetConfig+0xc0>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a17      	ldr	r2, [pc, #92]	; (80078bc <TIM_OC4_SetConfig+0x118>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d113      	bne.n	800788c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800786a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007872:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	019b      	lsls	r3, r3, #6
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	019b      	lsls	r3, r3, #6
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	4313      	orrs	r3, r2
 800788a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	621a      	str	r2, [r3, #32]
}
 80078a6:	bf00      	nop
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40012c00 	.word	0x40012c00
 80078b8:	40013400 	.word	0x40013400
 80078bc:	40015000 	.word	0x40015000
 80078c0:	40014000 	.word	0x40014000
 80078c4:	40014400 	.word	0x40014400
 80078c8:	40014800 	.word	0x40014800

080078cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	4313      	orrs	r3, r2
 8007908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007910:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	041b      	lsls	r3, r3, #16
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a19      	ldr	r2, [pc, #100]	; (8007988 <TIM_OC5_SetConfig+0xbc>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d013      	beq.n	800794e <TIM_OC5_SetConfig+0x82>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a18      	ldr	r2, [pc, #96]	; (800798c <TIM_OC5_SetConfig+0xc0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d00f      	beq.n	800794e <TIM_OC5_SetConfig+0x82>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a17      	ldr	r2, [pc, #92]	; (8007990 <TIM_OC5_SetConfig+0xc4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d00b      	beq.n	800794e <TIM_OC5_SetConfig+0x82>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a16      	ldr	r2, [pc, #88]	; (8007994 <TIM_OC5_SetConfig+0xc8>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d007      	beq.n	800794e <TIM_OC5_SetConfig+0x82>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a15      	ldr	r2, [pc, #84]	; (8007998 <TIM_OC5_SetConfig+0xcc>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d003      	beq.n	800794e <TIM_OC5_SetConfig+0x82>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a14      	ldr	r2, [pc, #80]	; (800799c <TIM_OC5_SetConfig+0xd0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d109      	bne.n	8007962 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007954:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	021b      	lsls	r3, r3, #8
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	621a      	str	r2, [r3, #32]
}
 800797c:	bf00      	nop
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40013400 	.word	0x40013400
 8007990:	40014000 	.word	0x40014000
 8007994:	40014400 	.word	0x40014400
 8007998:	40014800 	.word	0x40014800
 800799c:	40015000 	.word	0x40015000

080079a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	051b      	lsls	r3, r3, #20
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a1a      	ldr	r2, [pc, #104]	; (8007a60 <TIM_OC6_SetConfig+0xc0>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d013      	beq.n	8007a24 <TIM_OC6_SetConfig+0x84>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a19      	ldr	r2, [pc, #100]	; (8007a64 <TIM_OC6_SetConfig+0xc4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d00f      	beq.n	8007a24 <TIM_OC6_SetConfig+0x84>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a18      	ldr	r2, [pc, #96]	; (8007a68 <TIM_OC6_SetConfig+0xc8>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d00b      	beq.n	8007a24 <TIM_OC6_SetConfig+0x84>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a17      	ldr	r2, [pc, #92]	; (8007a6c <TIM_OC6_SetConfig+0xcc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d007      	beq.n	8007a24 <TIM_OC6_SetConfig+0x84>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a16      	ldr	r2, [pc, #88]	; (8007a70 <TIM_OC6_SetConfig+0xd0>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d003      	beq.n	8007a24 <TIM_OC6_SetConfig+0x84>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a15      	ldr	r2, [pc, #84]	; (8007a74 <TIM_OC6_SetConfig+0xd4>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d109      	bne.n	8007a38 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	029b      	lsls	r3, r3, #10
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	621a      	str	r2, [r3, #32]
}
 8007a52:	bf00      	nop
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	40012c00 	.word	0x40012c00
 8007a64:	40013400 	.word	0x40013400
 8007a68:	40014000 	.word	0x40014000
 8007a6c:	40014400 	.word	0x40014400
 8007a70:	40014800 	.word	0x40014800
 8007a74:	40015000 	.word	0x40015000

08007a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	f023 0201 	bic.w	r2, r3, #1
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f023 030a 	bic.w	r3, r3, #10
 8007ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	621a      	str	r2, [r3, #32]
}
 8007aca:	bf00      	nop
 8007acc:	371c      	adds	r7, #28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b087      	sub	sp, #28
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	f023 0210 	bic.w	r2, r3, #16
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	031b      	lsls	r3, r3, #12
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	011b      	lsls	r3, r3, #4
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	621a      	str	r2, [r3, #32]
}
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f043 0307 	orr.w	r3, r3, #7
 8007b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	609a      	str	r2, [r3, #8]
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	021a      	lsls	r2, r3, #8
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	431a      	orrs	r2, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	609a      	str	r2, [r3, #8]
}
 8007ba4:	bf00      	nop
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 031f 	and.w	r3, r3, #31
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6a1a      	ldr	r2, [r3, #32]
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a1a      	ldr	r2, [r3, #32]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f003 031f 	and.w	r3, r3, #31
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	fa01 f303 	lsl.w	r3, r1, r3
 8007be8:	431a      	orrs	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	621a      	str	r2, [r3, #32]
}
 8007bee:	bf00      	nop
 8007bf0:	371c      	adds	r7, #28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
	...

08007bfc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d109      	bne.n	8007c20 <HAL_TIMEx_PWMN_Start+0x24>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	bf14      	ite	ne
 8007c18:	2301      	movne	r3, #1
 8007c1a:	2300      	moveq	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	e022      	b.n	8007c66 <HAL_TIMEx_PWMN_Start+0x6a>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d109      	bne.n	8007c3a <HAL_TIMEx_PWMN_Start+0x3e>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	bf14      	ite	ne
 8007c32:	2301      	movne	r3, #1
 8007c34:	2300      	moveq	r3, #0
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	e015      	b.n	8007c66 <HAL_TIMEx_PWMN_Start+0x6a>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b08      	cmp	r3, #8
 8007c3e:	d109      	bne.n	8007c54 <HAL_TIMEx_PWMN_Start+0x58>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	bf14      	ite	ne
 8007c4c:	2301      	movne	r3, #1
 8007c4e:	2300      	moveq	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	e008      	b.n	8007c66 <HAL_TIMEx_PWMN_Start+0x6a>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	bf14      	ite	ne
 8007c60:	2301      	movne	r3, #1
 8007c62:	2300      	moveq	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e073      	b.n	8007d56 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d104      	bne.n	8007c7e <HAL_TIMEx_PWMN_Start+0x82>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c7c:	e013      	b.n	8007ca6 <HAL_TIMEx_PWMN_Start+0xaa>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	d104      	bne.n	8007c8e <HAL_TIMEx_PWMN_Start+0x92>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c8c:	e00b      	b.n	8007ca6 <HAL_TIMEx_PWMN_Start+0xaa>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d104      	bne.n	8007c9e <HAL_TIMEx_PWMN_Start+0xa2>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c9c:	e003      	b.n	8007ca6 <HAL_TIMEx_PWMN_Start+0xaa>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2204      	movs	r2, #4
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 f9f4 	bl	800809c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a25      	ldr	r2, [pc, #148]	; (8007d60 <HAL_TIMEx_PWMN_Start+0x164>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d022      	beq.n	8007d14 <HAL_TIMEx_PWMN_Start+0x118>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd6:	d01d      	beq.n	8007d14 <HAL_TIMEx_PWMN_Start+0x118>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a21      	ldr	r2, [pc, #132]	; (8007d64 <HAL_TIMEx_PWMN_Start+0x168>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d018      	beq.n	8007d14 <HAL_TIMEx_PWMN_Start+0x118>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a20      	ldr	r2, [pc, #128]	; (8007d68 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d013      	beq.n	8007d14 <HAL_TIMEx_PWMN_Start+0x118>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1e      	ldr	r2, [pc, #120]	; (8007d6c <HAL_TIMEx_PWMN_Start+0x170>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00e      	beq.n	8007d14 <HAL_TIMEx_PWMN_Start+0x118>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a1d      	ldr	r2, [pc, #116]	; (8007d70 <HAL_TIMEx_PWMN_Start+0x174>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d009      	beq.n	8007d14 <HAL_TIMEx_PWMN_Start+0x118>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a1b      	ldr	r2, [pc, #108]	; (8007d74 <HAL_TIMEx_PWMN_Start+0x178>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d004      	beq.n	8007d14 <HAL_TIMEx_PWMN_Start+0x118>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a1a      	ldr	r2, [pc, #104]	; (8007d78 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d115      	bne.n	8007d40 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	4b18      	ldr	r3, [pc, #96]	; (8007d7c <HAL_TIMEx_PWMN_Start+0x180>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b06      	cmp	r3, #6
 8007d24:	d015      	beq.n	8007d52 <HAL_TIMEx_PWMN_Start+0x156>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d2c:	d011      	beq.n	8007d52 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0201 	orr.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d3e:	e008      	b.n	8007d52 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0201 	orr.w	r2, r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	e000      	b.n	8007d54 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	40012c00 	.word	0x40012c00
 8007d64:	40000400 	.word	0x40000400
 8007d68:	40000800 	.word	0x40000800
 8007d6c:	40000c00 	.word	0x40000c00
 8007d70:	40013400 	.word	0x40013400
 8007d74:	40014000 	.word	0x40014000
 8007d78:	40015000 	.word	0x40015000
 8007d7c:	00010007 	.word	0x00010007

08007d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e074      	b.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a34      	ldr	r2, [pc, #208]	; (8007e90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d009      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a33      	ldr	r2, [pc, #204]	; (8007e94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d004      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a31      	ldr	r2, [pc, #196]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d108      	bne.n	8007de8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ddc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a21      	ldr	r2, [pc, #132]	; (8007e90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d022      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e18:	d01d      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a1f      	ldr	r2, [pc, #124]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d018      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a1d      	ldr	r2, [pc, #116]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d013      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a1c      	ldr	r2, [pc, #112]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d00e      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a15      	ldr	r2, [pc, #84]	; (8007e94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d009      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a18      	ldr	r2, [pc, #96]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d004      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a11      	ldr	r2, [pc, #68]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d10c      	bne.n	8007e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	40012c00 	.word	0x40012c00
 8007e94:	40013400 	.word	0x40013400
 8007e98:	40015000 	.word	0x40015000
 8007e9c:	40000400 	.word	0x40000400
 8007ea0:	40000800 	.word	0x40000800
 8007ea4:	40000c00 	.word	0x40000c00
 8007ea8:	40014000 	.word	0x40014000

08007eac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e096      	b.n	8007ff6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	041b      	lsls	r3, r3, #16
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a2f      	ldr	r2, [pc, #188]	; (8008004 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d009      	beq.n	8007f60 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a2d      	ldr	r2, [pc, #180]	; (8008008 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d004      	beq.n	8007f60 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a2c      	ldr	r2, [pc, #176]	; (800800c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d106      	bne.n	8007f6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a24      	ldr	r2, [pc, #144]	; (8008004 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d009      	beq.n	8007f8c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a22      	ldr	r2, [pc, #136]	; (8008008 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d004      	beq.n	8007f8c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a21      	ldr	r2, [pc, #132]	; (800800c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d12b      	bne.n	8007fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	051b      	lsls	r3, r3, #20
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a11      	ldr	r2, [pc, #68]	; (8008004 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d009      	beq.n	8007fd6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a10      	ldr	r2, [pc, #64]	; (8008008 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d004      	beq.n	8007fd6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a0e      	ldr	r2, [pc, #56]	; (800800c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d106      	bne.n	8007fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	40012c00 	.word	0x40012c00
 8008008:	40013400 	.word	0x40013400
 800800c:	40015000 	.word	0x40015000

08008010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f003 031f 	and.w	r3, r3, #31
 80080ae:	2204      	movs	r2, #4
 80080b0:	fa02 f303 	lsl.w	r3, r2, r3
 80080b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a1a      	ldr	r2, [r3, #32]
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	43db      	mvns	r3, r3
 80080be:	401a      	ands	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6a1a      	ldr	r2, [r3, #32]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f003 031f 	and.w	r3, r3, #31
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	fa01 f303 	lsl.w	r3, r1, r3
 80080d4:	431a      	orrs	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	621a      	str	r2, [r3, #32]
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
	...

080080e8 <__libc_init_array>:
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	4d0d      	ldr	r5, [pc, #52]	; (8008120 <__libc_init_array+0x38>)
 80080ec:	4c0d      	ldr	r4, [pc, #52]	; (8008124 <__libc_init_array+0x3c>)
 80080ee:	1b64      	subs	r4, r4, r5
 80080f0:	10a4      	asrs	r4, r4, #2
 80080f2:	2600      	movs	r6, #0
 80080f4:	42a6      	cmp	r6, r4
 80080f6:	d109      	bne.n	800810c <__libc_init_array+0x24>
 80080f8:	4d0b      	ldr	r5, [pc, #44]	; (8008128 <__libc_init_array+0x40>)
 80080fa:	4c0c      	ldr	r4, [pc, #48]	; (800812c <__libc_init_array+0x44>)
 80080fc:	f000 f820 	bl	8008140 <_init>
 8008100:	1b64      	subs	r4, r4, r5
 8008102:	10a4      	asrs	r4, r4, #2
 8008104:	2600      	movs	r6, #0
 8008106:	42a6      	cmp	r6, r4
 8008108:	d105      	bne.n	8008116 <__libc_init_array+0x2e>
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008110:	4798      	blx	r3
 8008112:	3601      	adds	r6, #1
 8008114:	e7ee      	b.n	80080f4 <__libc_init_array+0xc>
 8008116:	f855 3b04 	ldr.w	r3, [r5], #4
 800811a:	4798      	blx	r3
 800811c:	3601      	adds	r6, #1
 800811e:	e7f2      	b.n	8008106 <__libc_init_array+0x1e>
 8008120:	08008178 	.word	0x08008178
 8008124:	08008178 	.word	0x08008178
 8008128:	08008178 	.word	0x08008178
 800812c:	0800817c 	.word	0x0800817c

08008130 <memset>:
 8008130:	4402      	add	r2, r0
 8008132:	4603      	mov	r3, r0
 8008134:	4293      	cmp	r3, r2
 8008136:	d100      	bne.n	800813a <memset+0xa>
 8008138:	4770      	bx	lr
 800813a:	f803 1b01 	strb.w	r1, [r3], #1
 800813e:	e7f9      	b.n	8008134 <memset+0x4>

08008140 <_init>:
 8008140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008142:	bf00      	nop
 8008144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008146:	bc08      	pop	{r3}
 8008148:	469e      	mov	lr, r3
 800814a:	4770      	bx	lr

0800814c <_fini>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr
